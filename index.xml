<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>승우의 개발 일기🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/</link>
        <description>Hugo theme - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 22 Jul 2023 18:37:42 &#43;0900</lastBuildDate>
            <atom:link href="https://choiseungwoo98.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>[Java] final 사용법</title>
    <link>https://choiseungwoo98.github.io/final/</link>
    <pubDate>Sat, 22 Jul 2023 18:37:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/final/</guid>
    <description><![CDATA[커리어리라는 어플을 보다가 주니어 자바 개발자를 위한 100가지 질문을 보게 되었다. 오늘은 여러가지 질문 중 final에 대해 알아보고자 한다.
java에서 final 키워드란 뭘까? 1. final 의미 자바에서 final은 변수, 메서드, 클래스에 사용되는 키워드로서 불변성을 나타낸다. final로 선언된 요소는 한번 초가화하면 그 값을 변경할 수 없다. 예를 들면 정보처리기사라는 시험의 점수는 고정되어 있다! 시험을 보는 사람마다 점수가 다르게 선정된다면 혼란을 야기할듯.. 다만, 시험보는 사람의 수험번호와 같은 경우 모든 사람이 다를 것이다.]]></description>
</item>
<item>
    <title>JDK와 JRE의 차이 그리고 JIT, JVM</title>
    <link>https://choiseungwoo98.github.io/differencebetweenjdkandjre/</link>
    <pubDate>Fri, 21 Jul 2023 19:29:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/differencebetweenjdkandjre/</guid>
    <description><![CDATA[커리어리라는 어플을 보다가 주니어 자바 개발자를 위한 100가지 질문을 보게 되었다.
8개월 동안 회사에서 프로젝트를 여러개 진행하면서 다양한 기술을 사용해봤다.
하지만 기초 및 이론 공부는 굉장히 소홀했었다..
기초가 단단하지 않으면 나의 개발 스펙트럼도 짧아 질것 같아서 하나하나 정리해보려 한다.
요즘 다시 괜찮아져서 블로그도 다시 시작&hellip; 화이팅..!
들어가기 앞서 오늘은 자바 플랫폼에 대해 알아보고자 한다. JDK, JRE, JVM은 자바 플랫폼의 3대 구성요소이다. 오늘은 JDK, JRE, JVM에 추가로 JIT까지 알아보고자 한다. 이미지를 먼저 확인 후 본격적으로 들어가보자.]]></description>
</item>
<item>
    <title>Spring Boot, Websocket &#43; STOMP 사용하기</title>
    <link>https://choiseungwoo98.github.io/websocket/</link>
    <pubDate>Sat, 06 May 2023 19:29:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/websocket/</guid>
    <description><![CDATA[ 일을 하던 중 프로그래스 바와 같은 작업의 완료 타이밍을 알 수 있는 방법이 있을까?
같은 고민을 하다가 WebSocket을 알게 되었고 그 과정을 글로 작성해보려고 한다.
Web Socket을 사용한 코드 게시물은 추후에 작성하겠습니다!! 아래 코드는 첨부했습니다!
포스트 작성 시 참고한 링크 코드 ]]></description>
</item>
<item>
    <title>서버에서 클라이언트로 이벤트를 보내는 4가지 방법</title>
    <link>https://choiseungwoo98.github.io/servereventtoclient/</link>
    <pubDate>Sat, 06 May 2023 19:29:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/servereventtoclient/</guid>
    <description><![CDATA[일을 하던 중 프로그래스 바와 같은 작업의 완료 타이밍을 알 수 있는 방법이 있을까?
같은 고민을 하다가 WebSocket을 알게 되었고 그 과정을 글로 작성해보려고 한다.
서버에서 클라이언트로 이벤트를 보내는 4가지 방법 1. Polling 클라이언트가 평벙한 http request를 서버로 계속 날려서 이벤트 내용을 받는 방법 가장 쉬운 방법이지만 클라이언트가 지속적으로 request를 보내야 하기 때문에 클라이언트가 많아 질 수록 서버 부담이 급증 실시간으로 정보를 응답 받는 것이 아닌 반복해서 request를 보내는 사이에 바뀐 내용을 받아오는 방식 http 오버헤드가 발생한다는 큰 단점.]]></description>
</item>
<item>
    <title>Docker는 뭘까?</title>
    <link>https://choiseungwoo98.github.io/docker%EB%9E%80/</link>
    <pubDate>Fri, 17 Mar 2023 01:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker%EB%9E%80/</guid>
    <description><![CDATA[Mysql을 사용하여 프로젝트를 하나 진행 중이었습니다.
해당 프로젝트가 끝나고 새로운 프로젝트를 진행하게 되었는데,
새로운 프로젝트에서는 MariaDB를 사용해야하는 상황이었고, Mysql과 MariaDB는 서로 프로토콜, 프로세스 명, 명령어 등을 쉐어하고 있다고 알려져 있어 MySql이 설치되어있는 상황에서 MariaDB를 다운하면 충돌이 발생하고
MySql을 지우고 다운받을 수 없는 상황이라 동시에 사용하기 위해 Docker로 설치해여 사용하려 합니다.
Docker?? 컨테이너 기반의 오픈소스 가상화 플랫폼
다양한 프로그램, 실행 환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램 배포 및 관리를 단순화 한다.]]></description>
</item>
<item>
    <title>Workflow? 작업 방식?</title>
    <link>https://choiseungwoo98.github.io/workflow%EB%9E%80/</link>
    <pubDate>Sun, 05 Mar 2023 04:39:34 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/workflow%EB%9E%80/</guid>
    <description><![CDATA[workflow는 어떤 것이 있고 어떤 방법론이 있는지 조사해보자고 마음을 먹어 작성하게되었다.
WorkFlow?? Git은 브랜치로 작업을 관리한다.
팀에서 브랜치를 어떻게 사용할 지에 대한 규칙을 Workflow라고 한다.
Git에서 대표적인 Workflow는 Git flow, Github flow, Gitlab flow가 있다.
Git flow 브랜치의 역할이 명확하고 대규모 프로젝트에 적합.
2개의 메인 브랜치, 3개의 보조 브랜치로 나뉨.
Main Branch
master 제품으로 출시하는 브랜치 실제 배포 중이 상용 버전 develop 다음 출시 버전을 개발하는 브랜치 실제 작동 중인 버전의 다음 버전을 개발하기 위한 메인 스트림 Serve Branch]]></description>
</item>
<item>
    <title>Merge와 Rebase 차이</title>
    <link>https://choiseungwoo98.github.io/merge_%EC%99%80_rebase_%EC%B0%A8%EC%9D%B4/</link>
    <pubDate>Sun, 05 Mar 2023 04:30:49 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/merge_%EC%99%80_rebase_%EC%B0%A8%EC%9D%B4/</guid>
    <description><![CDATA[프로그래밍을 공부 했을 시절 분기되었던 브랜치를 합치는 것 작업을 merge로 만 수행했었다.
현업에 들어오고 나서 git history가 엉망이 되어가는 것을 직접 목격하였다&hellip;
어떻게 해야 history를 잘 관리 할 수 있는지 궁금하였고 사수의 도움으로 rebase하는 것을 알게 되었다.
rebase 를 알고 사용하고 있지만 merge와 rebase의 차이점을 명확하게 알고 싶어 찾아보았다.
들어가기 앞서 merge와 rebase의 차이를 알아보기 전에 이것들은 어떤 상황에서 사용하며 사용하면 어떤 일이 일어나는지 부터 간단하게 알아보고자 한다.
Git이란?]]></description>
</item>
<item>
    <title>branch가 자세히 뭘까?</title>
    <link>https://choiseungwoo98.github.io/branch%EB%9E%80/</link>
    <pubDate>Sun, 05 Mar 2023 00:40:51 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/branch%EB%9E%80/</guid>
    <description><![CDATA[브랜치?? 여러 개발자들이 동시에 다양한 작업을 할 수 있게 만들어 주는 기능이 바로 브랜치(Branch) 이다.
각자 독립적인 작업 영역(저장소) 안에서 마음대로 소스코드를 변경할 수 있다.
이렇게 분리된 작업 영역에서 변경된 내용은 나중에 원래의 버전과 비교해서 하나의 새로운 버전으로 만들어 낼 수 있다.
브랜치 사용법 메인 브랜치에서 자신의 작업 전용 브랜치를 만듦 각자 작업을 진행한 후, 작업이 끝난 사람은 메인 브랜치에 자신의 브랜치의 변경 사항을 적용 다른 사람의 작업에 영향을 받지 않고 독립적으로 특정 작업을 수행하고 그 결과를 하나로 모음 브랜치로 그 작업의 기록을 중간 중간에 남기게 되므로 문제가 발생했을 경우 원인이 되는 작업을 찾아내거나 그에 따른 대책을 세우기 쉬워짐 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 브랜치 생성 # git branch branchName $ git branch myWork-1 # 브랜치 이동 # switch 혹은 checkout 둘 다 가능 # git switch branchName $ git switch myWork-1 # 브랜치 생성 및 이동 # git checkout -b branch_name # git switch -c branch_name $ git switch -c myWork-2 # 현재 브랜치 확인 $ git branch # 브랜치 삭제 # git branch -d branchName $ git branch -d myWork-1 포스트 작성 시 참고한 링크 브랜치란?]]></description>
</item>
<item>
    <title>형상관리란 SVN? GIT?</title>
    <link>https://choiseungwoo98.github.io/%ED%98%95%EC%83%81%EA%B4%80%EB%A6%AC%EB%9E%80/</link>
    <pubDate>Sat, 04 Mar 2023 22:47:36 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/%ED%98%95%EC%83%81%EA%B4%80%EB%A6%AC%EB%9E%80/</guid>
    <description><![CDATA[현재 가장 많이 사용하고 있는 형상관리도구 git에 대해 공부를 하다가 문득 궁금한 것이 생겼다. Git은 형상관리 도구 중 하나인데 다른 형상관리도구랑 어떠한 차이가 있을까? 그래서 한번 각각의 형산관리 도구에 대해 알아보고 장단점은 무엇인지 알아보고자 한다.
형상관리?? 소프트웨어 구성 관리(Software Configuration Management) 또는 형상관리는 소프트웨어의 변경사항을 체계적으로 추적하고 통제 하는 것 일반적으로 단순 버전관리 기반의 소프트웨어 운용을 좀 더 포괄적인 학술 분야의 형태로 넓히는 근간 소프트웨어의 소스 코드, 개발 환경, 빌드 구조 등 전반적인 환경 전반적인 내역에 대한 관리 체계를 정의 형상 관리는 포괄적인 개념, 통상적으로 버전관리, 소스관리 등으로 불립니다.]]></description>
</item>
<item>
    <title>깃 블로그 만드는 방법</title>
    <link>https://choiseungwoo98.github.io/%EA%B9%83_%EB%B8%94%EB%A1%9C%EA%B7%B8_%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
    <pubDate>Sat, 04 Mar 2023 14:16:49 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/%EA%B9%83_%EB%B8%94%EB%A1%9C%EA%B7%B8_%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
    <description><![CDATA[현업에서 일하기 시작한지 이제 3개월이 지나가고 있는 시점에 공부가 필요하다고 뼈저리게 느끼고 있습니다.
직장에 다니기 전에 네이버 블로그를 통해 배운 내용을 정리하였지만
조금 더 개발자스러운 블로그를 운영하고 싶다고 느껴 깃 블로그를 만들게 되었습니다.
시작하기 앞서 운영체제는 MAC에서 제작하였습니다.
블로그 플랫폼 선택 블로그를 쓰려고 마음먹고 나서 플랫폼이 뭐가 있는지 찾아보면서
나한테 가장 잘 맞는 플랫폼은 뭐가 있을까?
많은 고민을 하던 중 가장 많이 사용되고 있는듯(?)한 플랫폼 3가지를 비교해 보았다.
Jekyll]]></description>
</item>
</channel>
</rss>
