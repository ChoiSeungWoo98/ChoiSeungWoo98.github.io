<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>승우의 개발 일기🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/</link>
        <description>Hugo theme - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 22 Jul 2024 21:27:45 &#43;0900</lastBuildDate>
            <atom:link href="https://choiseungwoo98.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Basic</title>
    <link>https://choiseungwoo98.github.io/basic.html</link>
    <pubDate>Mon, 22 Jul 2024 21:27:45 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/basic.html</guid>
    <description><![CDATA[오늘은 드디어 그 유명한 쿠버네티스!!!
쿠버만 잘해도 반은 간다는데
화이팅! 부셔보자!!!
Kubenetes(K8S) 설명 컨테이너화된 애플리케이션 배포, 확장 및 관리를 자동화 하는 오픈소스 시스템 대규모 애플리케이션을 신뢰성 있고 효율적인 운영을 도움 특징 서비스 디스커버리 및 로드 밸런싱 : DNS 혹은 자체 IP를 사용해 컨테이너 노출(컨테이너에 트랙픽이 많으면 로드밸런싱 후 배포하여 안정적으로 운영 가능) 스토리지 오케스트레이션 : 로컬저장소, 클라우드 공급자 등과 같이 원하는 저장소 시스템 사용 가능 자동화된 롤아웃, 롤백 : 배포된 컨테이너의 원하는 상태 서술 및 현재 원하는 상태로 변경 자동화된 빈패킹 : 컨테이너 노드에 맞춰 리소스를 가장 잘 사용할 수 있도록 지원 자동화된 복구 : 실패한 컨테이너를 다시 시작, 교체하며 사용자가 정의한 상태 이외에는 지속적으로 복구 가능 시크릿과 구성관리 : 암초, OAuth 토큰, SSH 키와 같은 중요한 정보를 저장 및 관리(컨테이너 이미지 재구성하지 않고 시크릿 및 애플리케이션 구성을 배포 및 업데이트) 핵심 개념 cluster : 여러 대의 머신(노드)으로 구성된 그룹(마스터 노드와 여러 워커 노드로 구성) node : 클러스터 구성요소가 되는 물리적 또는 가상머신 pod : k8s가 생성하고 관리할 수 있는 배포 가능한 가장 작은 단워(하나 이상의 컨테이너 그룹) replicaset : 동일한 포드의 복제본을 일정하게 유지해 가용성 보장 시 사용되는 리소스(Deploment 사용 권장) deployment : 파드와 레플리카셋에 대한 선언적 업데이트 제공 statefulset : 관리하는 데 사용되는 워크로드, 파드 순서 및 고유성 보장(Deployment와 다르게 동자성 유지) Daemonset : 모든 노드가 파드의 사본을 실행(모든 노드에서 클러스터 스토리지, 로그 수집, 노드 모니터링 데몬 실행) Job : 하나 이상의 파드를 생성하고 종료될 때 까지 계속 파드 실행 시도 Cronjob : 반복 일정에 따라 Job 생성 Namespace : 클러스터 내에 리소스를 논리적으로 분리 실습 UTM 3개 생성 후 각각 접속 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 쿠버네티스 설치 sudo snap install microk8s --classic --channel=1.]]></description>
</item>
<item>
    <title>IaC 기초 및 Terraform, Ansible</title>
    <link>https://choiseungwoo98.github.io/iac_terraform_ansible.html</link>
    <pubDate>Thu, 18 Jul 2024 09:54:15 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/iac_terraform_ansible.html</guid>
    <description><![CDATA[오늘은 배포 자동화에 대해 배웠다.
거의 대부분의 프로젝트가 자동화를 사용하는 만큼 집중해서 잘 들어야지 잊지 않기 위해 복습 또 복습&hellip;
IaC(Infrastructure As Code) 서버, 네트워크, DB, 애플리케이션 구성 등 IT 인프라를 수동 관리 대신 코드로 정의하고 관리하는 방식 프로그래밍 언어, 구성 파일을 사용하여 인프라 자동 배포 및 관리 특징 자동화, 일관성 : 수동 오류를 줄이고 배포, 관리의 일관성 유지 버전 관리 : 변경 이력 추적 및 복구 가능 재사용성 : 코드 모듈화 및 템플릿화 를 통해 재사용성을 높여 비용 절감 협업 : Devops 문화의 핵심 요소 가시성, 투명성 : 모든 설정을 명시적으로 정의해, 인프라 구성 상태를 명확히 파악 구현 방식 선언적 접근 방식 : 원하는 최종 상태 정의, 시스템 자동 구성(Terraform, AWS CloudFormation 등), 간결한 설정으로 이해가 쉽고 필요한 설정만 변경 명령적 접근 방식 : 수행할 명령어 순서 명시 및 인프라 설정을 위한 단계별 명령 작성(Ansible, Chef 등), 세부적인 제어 가능, 복잡한 논리와 조건 처리를 쉽게 구현 도구 Terraform : 클라우드 인프라를 코드로 정의하는 오픈소스 도구 AWS CloudFormation : AWS 리소스 템플릿으로 정의하여 배포 Ansible : 서버 구성 및 애플리케이션 배포 자동화 도구, YAML 포맷의 플레이북 사용 Kubernetes : 컨테이너화된 애플리케이션 배포, 스케일링, 운영 자동화, Yaml 파일을 통해 클러스터 상태 관리 워크플로우 계획 : 요구사항 분석 및 인프라 구조 설계 코드 작성 : 인프라를 코드로 정의 버전 관리 : 작성된 코드를 Git 등의 버전 관리 시스템에 저장 및 이력 관리 테스트 : 테스트 환경에서 코드 실행 및 결과 검증 적용 : 검증된 코드를 실제 환경에 배포 모니터링, 관리 : 배포된 인프라 모니터링 및 수정, 업데이트 장점 신속한 배포 : 자동화된 프로세스를 통해 신속하게 배포 효율성 : 반복적인 작업을 자동화 일관성 : 모든 환경에서 동일한 설정 적용 복구 능력 : 코드 기반 인프라는 장애 시 빠르게 복구 가능 확장성 : 필요에 따라 쉽게 확장 및 축소 가능 Terraform 인프라를 코드로 관리하는 도구, HashiCorp에서 개발 인프라를 선언적으로 정의 및 관리 대부분 인프라를 테라폼해서 배포, 진짜 중요한 사업인 경우 손으로 배포 특징 프로바이더 : AWS, Azure, GCP 등 다양한 클라우드 서비스 제공자 지원 인프라 코드화 : JSON과 유사한 HCL(HashiCorp Configuration Language) 사용 실행 계획 : 변경사항 적용 전 계획 미리 확인 모듈화 : 재사용 가능한 모듈 사용 워크플로우 init : 프로젝트 디렉토리 초기화 및 필요한 플러그인 다운로드 plan : 변경 사항 시뮬레이션 및 계획서 제출 apply : 계획된 변경 사항 실제 인프라 적용 state : 인프라 상태 확인 및 관리 destroy : 인프라 자원 제거 예제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # CSP 설정 provider &#34;aws&#34; { # 할당 지역 설정 region = &#34;ap-northeast-2&#34; } # 변수 설정 variable &#34;instance_count&#34; { # 기본 값 설정 default = 3 } # CSP 내부에서 사용할 리소스 명칭 resource &#34;aws_instance&#34; &#34;example&#34; { ami = &#34;ami-123456&#34; instance_type = &#34;t2.]]></description>
</item>
<item>
    <title>aws에 EBS, Lambda와 efs</title>
    <link>https://choiseungwoo98.github.io/lambda_and_efs.html</link>
    <pubDate>Wed, 17 Jul 2024 11:42:15 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/lambda_and_efs.html</guid>
    <description><![CDATA[오늘은 EBS, 람다와 EFS에 대해 배웠다 잊지 않기 위해 복습 또 복습&hellip;
EBS(Elastic Block Storage) AWS 블록 스토리지 서비스로 EC2 인스턴스에 사용되는 지속적인 스토리지 DB, 파일 시스템, 로그 스토리지, 애플리케이션 데이터 등 사용 데이터를 블록 단위로 저장하며 개별적으로 다루어 질 수 있다. 지속성이 보장되며 중지 또는 종료해도 데이터 유지 주로 자주 접근하지 않는 데이터를 저렴하게 저장할 때 사용한다. 특징 탄력성 : 필요에 따라 크기 조정, 스냅샷을 통해 백업 및 복원 가능(용량을 늘리는 건 쉬우나 줄이는 건 힘들어 충분히 고려 후 증설) 고성능 : 다양한 선능 옵션 제공 내구성 : 데이터 복제 및 높은 가용성 제공 보안 : IAM 정책을 통한 접근 제어 가능 스냅샷 : 볼륨의 시점 복사본 생성 가능 S3에 저장되며 복구 가능 실습(볼륨 확장) 인스턴스 생성 보안 그룹 권한 변경 볼륨 늘림 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 인스턴스 접근 ssh -i &lt;aws key&gt; &lt;os&gt;@&lt;ip&gt; # 루트 권한으로 변경 sudo su # 파일 시스템 디스크 사용량 노출 df -hT # 시스템 블록 장치 나열 lsblk # 지정된 파티션의 크기 확장 growpart /dev/xvda 1 # XFS 파일 시스템 크기 확장 xfs_growfs /dev/xvda1 # 증설 확인 lsblk AWS EFS(Elastic FileSystem) 여러 EC2 인스턴스가 동시에 데이터를 읽고 쓰며, 파일 시스템의 확장성과 고가용성 보장 같은 VPC 내에서 여러 인스턴스가 같은 파일 시스템에 접근해 읽기, 쓰기 가능 특징 확장성 : 파일 시스템 크기 자동 조절 및 필요에 따른 확장, 축소 가능 고가용성 및 내구성 : 여러 가용 영역(AZ)에 데이터 자동 복제해 높은 가용성 및 내구성 제공 동시 엑세스 : 여러 EC2 인스턴스에서 동시에 엑세스 할 수 있으며 공유 파일 시스템이 필요한 워크 로드에 적합 실습(볼륨 확장) EFS 생성 보안그룹 수정 연결 1 2 3 4 5 6 7 8 9 10 11 12 13 # 인스턴스 접근 ssh -i &lt;aws key&gt; &lt;os&gt;@&lt;ip&gt; # 루트 권한으로 변경 sudo su # ip 복사 # /mnt 디렉토리 안에 efs 폴더 생성 cd /mnt &amp;&amp; mkdir efs # 복사한 ip 주소 입력 # 확인 df -hT | grep efs AWS S3(Simple Storage Serive) 객체 스토리지 서비스로 데이터를 객체 단위로 저장 객체는 파일 데이터와 메타 데이터로 구성되며 인터넷을 통해 접근 가능 특징 내구성 및 가용성 : S3는 99.]]></description>
</item>
<item>
    <title>AWS IAM을 이용한 S3 실습</title>
    <link>https://choiseungwoo98.github.io/iam_and_s3.html</link>
    <pubDate>Mon, 15 Jul 2024 15:01:46 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/iam_and_s3.html</guid>
    <description><![CDATA[오늘은 AWS 첫번째 실습 시간이다.
IAM에 대해 공부 후
S3를 통해 제어하는 실습
IAM 클라우드 서비스에서 사용자의 리소스 접근을 제어하는 웹 서비스 사용자 및 그룹을 생성해 리소스 권한 관리 IAM User Aws 리소스에 접근하기 위해 생성되는 개별 엔터티 고유한 자격 증명(로그인 정보)과 함께 제공, 권한을 부여받아 작업 수행 IAM Group 공통적인 권한을 부여하기 위해 사요되는 논리적 단위 사용자별 권한을 할당하는 대신 그룹에 권한 할당 실습 IAM User 생성 IAM User Group 생성 생성한 유저 로그인 후 권한 확인 IAM 정책(Policy) AWS 리소스에 대한 접근 권한을 정의하는 JSON 문서 권한을 세부적으로 제어 보안과 권한 관리를 위해 필수적인 구성 요소 관리형 정책(Managed Policies) 미리 정의된 정책으로 사용자가 쉽게 권한을 부여할 수 있도록 설계]]></description>
</item>
<item>
    <title>AWS와 LB 실습</title>
    <link>https://choiseungwoo98.github.io/basic.html</link>
    <pubDate>Mon, 15 Jul 2024 15:01:46 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/basic.html</guid>
    <description><![CDATA[오늘은 AWS 첫번째 실습 시간이다.
EC2에서 VPC를 사용하고 public이랑 private를 열어
public은 LB를 테스트하고
private은 NAT를 이용한 인터넷 연결을 실습했다.
CSP(Cloud Service Provider) 클라우드 컴퓨팅 서비스를 제공하는 회사(Ex. AWS, Azure, GCP, NCP 등) 인프라 서비스(IaaS), 플랫폼 서비스(PaaS), 소프트웨어 서비스(SaaS) 제공 AWS(Amazon Web Services) 아마존에서 제공하는 클라우드 컴퓨팅 플랫폼 현재 높은 점유율로 클라우드 시장에서 강세를 보이고 있다. 클라우드 컴퓨팅 내용 온프레미스(On-premise) 환경과 반대의 의미로 많이 사용 IT 인프라를 조직 내부에 직접 설치하고 운영하는 방식 장점 비용 절감 : 필요한 만큼 컴퓨팅 자원과 스토리지 대여를 통해 비용 절감 속도와 민첩성 : 시스템 자체에 대한 확정을지원하는 클라우드 특성상 빠르게 확장을 진행 할 수 있다.]]></description>
</item>
<item>
    <title>네트워크 복습</title>
    <link>https://choiseungwoo98.github.io/network_review.html</link>
    <pubDate>Sat, 13 Jul 2024 22:42:04 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/network_review.html</guid>
    <description><![CDATA[오늘은 주말이라 여태까지 배운 네트워크에 대해
정리하면서 복습을 진행해보고자 한다.
다시 기억하기 위해 화이팅!
네트워크 둘 이상의 컴퓨터와 연결하는 링크의 조합 물리적 네트워크, 논리적 네트워크 형성 물리적 네트워크 : 어댑터, 케이블, 전화선 논리적 네트워크 : 소프트웨어, 개념 모델 OSI 7, 4 Layer OSI(Open System Interconnection : 개방형 시스템 상호 연결) 다양한 통신 시스템이 통신 할 수 있도록 국제 표준화 기구에서 만든 개념 모델
OSI 7 Layer 응용 프로그램 계층(Application Layer) : 사용자가 사용하는 응용 프로그램과 인터페이스 제공 프레젠테이션 계층(Presentation Layer) : 데이터 형식 변환 밑 표준화 데이터 형식 변환 : 컴퓨터 시스템 간 데이터 송수신 시 공통된 형식으로 변환(Ex.]]></description>
</item>
<item>
    <title>네트워크 도메인, HTTPs</title>
    <link>https://choiseungwoo98.github.io/network_basic_2.html</link>
    <pubDate>Sat, 13 Jul 2024 16:42:04 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/network_basic_2.html</guid>
    <description><![CDATA[오늘은 주말이라 강좌로 올라와있는
네트워크 개념 잡기를 수강하고 정리하고자 한다.
도메인 IP는 숫자로만 이루어져 기억하기 어렵기 때문에 이름을 부여한 것
IP 인터넷에 연결되어 있는 장치(컴퓨터, 스마트폰 등)을 식별할 수 있는 주소(Ex. 172.217.161.206)
웹사이트 ip 주소 가져오는 방법 : nslookup google.com
네임 스페이스 도메인 이름을 계층적으로 구성하여 네트워크 상의 자원을 고유하게 식별 및 관리
포트포워딩 외부 네트워크에서 특정 포트를 통해 들어오는 트래픽을 내부 네트워크의 특정 장치나 포트로 전달하는 네트워크 설정]]></description>
</item>
<item>
    <title>Docker 이론</title>
    <link>https://choiseungwoo98.github.io/docker_etc.html</link>
    <pubDate>Fri, 12 Jul 2024 14:25:27 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_etc.html</guid>
    <description><![CDATA[오늘은 실습보다 이론위주의 수업이었다.
도커 보안에 대해 간단하게 설명하고 들었던 것들을 정리하고자 한다.
Docker Security Rootless Mode 개념 Docker를 실행할 때 관리자 권한 없이 실행시키는 모드 특징 시스템 전체에 대한 권한 없이 사용할 수 있어 잠재적 보안 위험을 낮출 수 있다. 모두 일반 사용자 권한으로 시스템 자원에 대한 접근 제한 Linux Capabilities 개념 리눅스 커널에서 제공하는 기능으로 시스템 관리 권한을 세분화하여 특정 작업에 대해 권한을 부여할 수 있다. 특징 컨테이너 생성 시 필요한 권한만 부여해 보안성 향상 Privileged : 컨테이너가 호스트 시스템의 모든 권한을 갖고 있음.]]></description>
</item>
<item>
    <title>Docker_conpose</title>
    <link>https://choiseungwoo98.github.io/docker_conpose.html</link>
    <pubDate>Thu, 11 Jul 2024 13:13:32 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_conpose.html</guid>
    <description><![CDATA[오늘은 docker compose에 대해 배웠습니다.
이론이 많지는 않았지만
앞으로 자주 사용할 것이란 생각이 들어 실습까지 다시 진행하며 복습하겠습니다.
Docker compose 개념 여러 Docker Continer를 정의하고 실행할 수 있도록 도와주는 도구 docker-compose.yaml 파일을 사용해 서비스, 네트워크, 볼륨 등을 정의 기능 멀티 컨테이너 애플리케이션 정의 : docker-compose-yaml 파일을 통해 여러 컨테이너 정의 서비스 간 의존성 관리 : 여러 컨테이너 간의 의존성을 정의하고, 필요한 순서에 따라 컨테이너 시작 일관된 개발 환경 제공 : 동일한 docker-compose.]]></description>
</item>
<item>
    <title>Dockerfile 기초</title>
    <link>https://choiseungwoo98.github.io/dockerfile_basic.html</link>
    <pubDate>Wed, 10 Jul 2024 16:16:44 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/dockerfile_basic.html</guid>
    <description><![CDATA[어제는 도커의 개념과 동작 방식에 대해 정리하였습니다.
오늘은 docker를 실질적으로 사용해보면서 필요한 내용을 정리해보고자 합니다.
Dockerfile 개념 이미지 생성 목적으로 작성되는 파일
특징 환경 일관성 : 개발, 테스트, 운영 등 모든 환경에서 동일한 설정 유지 이식성 : 다양한 운영체제에서 동일하게 동작 자동화 : CI/CD 파이프라인 과정에서 빌드 및 배포 과정 자동화 반복 가능성 : 동일한 방식으로 이미지를 빌드해 반복 가능한 환경 제공 확장성 : 마이크로 아키텍처를 이용해 쉽게 확장 지시자 Dockerfile 만들기 이미지 크기 최적화 멀티 스테이지 빌드 사용 : 불필요한 빌드 종속성 제거 불필요한 파일 제외 : .]]></description>
</item>
</channel>
</rss>
