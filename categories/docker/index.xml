<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Docker - Category - 승우의 개발 일기🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/categories/docker.html</link>
        <description>Docker - Category - 승우의 개발 일기🧑🏻‍💻</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 09 Jul 2024 16:16:44 &#43;0900</lastBuildDate><atom:link href="https://choiseungwoo98.github.io/categories/docker.html" rel="self" type="application/rss+xml" /><item>
    <title>Dockerfile 기초</title>
    <link>https://choiseungwoo98.github.io/dockerfile_basic.html</link>
    <pubDate>Tue, 09 Jul 2024 16:16:44 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/dockerfile_basic.html</guid>
    <description><![CDATA[어제는 도커의 개념과 동작 방식에 대해 정리하였습니다.
오늘은 docker를 실질적으로 사용해보면서 필요한 내용을 정리해보고자 합니다.
Dockerfile 개념 이미지 생성 목적으로 작성되는 파일
특징 환경 일관성 : 개발, 테스트, 운영 등 모든 환경에서 동일한 설정 유지 이식성 : 다양한 운영체제에서 동일하게 동작 자동화 : CI/CD 파이프라인 과정에서 빌드 및 배포 과정 자동화 반복 가능성 : 동일한 방식으로 이미지를 빌드해 반복 가능한 환경 제공 확장성 : 마이크로 아키텍처를 이용해 쉽게 확장 지시자 Dockerfile 만들기 이미지 크기 최적화 멀티 스테이지 빌드 사용 : 불필요한 빌드 종속성 제거 불필요한 파일 제외 : .]]></description>
</item>
<item>
    <title>Docker 기초</title>
    <link>https://choiseungwoo98.github.io/docker_basic.html</link>
    <pubDate>Mon, 08 Jul 2024 16:16:44 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_basic.html</guid>
    <description><![CDATA[기존에 혼자 Docker에 대해 잠깐 공부한 적 있지만 심도있게 다루지는 않았습니다.
카카오 테크 부트캠프를 시작하면서 클라우드 수업을 듣기 시작했고
docker는 매우 중요한 부분이라 생각해 다시 정리하면서 복습하고자 합니다.
Docker 개념 컨테이너 기반의 오픈소스 가상화 플랫폼으로 애플리케이션을 소프트웨어의 실행 환경과 함께 패키징해 손쉽게 배포, 실행 할 수 있도록 도와준다.
주요 개념 Image : 애플리케이션과 필요한 모든 종속성(라이브러리, 설정 파일 등)을 포함하는 읽기 전용 템플릿, 컨테이너를 만드는데 사용 Container : 이미지를 실행한 상태로 격리된 애플리케이션 실행 환경 제공, 독립적으로 실행되며 호스트 시스템 리소스 공유 Dockerfile : 이미지 정의하는 설정 파일, 이미지를 빌드하는데 필요한 명령어 포함 DockerHub : Docker 이미지 중앙 저장소로 공개 또는 개인 저장소로 사용 가능 동작 방식 Docker Daemon : Docker에 핵심 프로세스로 컨테이너 생성 및 관리 Client : 사용자와 데몬 간의 인터페이스 역할 수행 이미지 생성 : Dockerfile을 이용해 이미지 생성, 각 명령어는 새로운 레이어 생성 컨테이너 실행 : 이미지를 사용해 컨테이너 실행, 이미지의 읽기 전용 레이어 위에 쓰기 가능한 레이어 추가 최적화 방법 다단계 빌드 사용 : 여러 단계에 걸쳐 빌드해 중간 산출물을 제거를 통해 불필요한 빌드 단계와 종속성을 제거하여 경량화 캐시 활용 : Dockerfile 명령어 순서를 최적화하여 빌드 속도 개선 불필요한 파일 제거 : 이미지에 포함되지 않아도 되는 파일을 .]]></description>
</item>
<item>
    <title>[Docker] Docker는 뭘까?</title>
    <link>https://choiseungwoo98.github.io/docker.html</link>
    <pubDate>Fri, 17 Mar 2023 01:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker.html</guid>
    <description><![CDATA[Mysql을 사용하여 프로젝트를 하나 진행 중이었습니다.
해당 프로젝트가 끝나고 새로운 프로젝트를 진행하게 되었는데,
새로운 프로젝트에서는 MariaDB를 사용해야하는 상황이었고, Mysql과 MariaDB는 서로 프로토콜, 프로세스 명, 명령어 등을 쉐어하고 있다고 알려져 있어 MySql이 설치되어있는 상황에서 MariaDB를 다운하면 충돌이 발생하고
MySql을 지우고 다운받을 수 없는 상황이라 동시에 사용하기 위해 Docker로 설치해여 사용하려 합니다.
Docker?? 컨테이너 기반의 오픈소스 가상화 플랫폼
다양한 프로그램, 실행 환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램 배포 및 관리를 단순화 한다.]]></description>
</item>
</channel>
</rss>
