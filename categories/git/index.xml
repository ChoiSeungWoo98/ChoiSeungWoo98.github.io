<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on My New Hugo Site</title>
    <link>http://localhost:1313/categories/git/</link>
    <description>Recent content in Git on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Mar 2023 04:39:34 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Git] Workflow? 작업 방식?</title>
      <link>http://localhost:1313/posts/configuration_management/git/workflow/</link>
      <pubDate>Sun, 05 Mar 2023 04:39:34 +0900</pubDate>
      <guid>http://localhost:1313/posts/configuration_management/git/workflow/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;workflow는 어떤 것이 있고 어떤 방법론이 있는지 조사해보자고 마음을 먹어 작성하게되었다.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;workflow&#34;&gt;WorkFlow??&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Git은 브랜치로 작업을 관리한다.&lt;br&gt;&#xA;팀에서 브랜치를 어떻게 사용할 지에 대한 규칙을 Workflow라고 한다.&lt;br&gt;&#xA;Git에서 대표적인 Workflow는 &lt;code&gt;Git flow&lt;/code&gt;, &lt;code&gt;Github flow&lt;/code&gt;, &lt;code&gt;Gitlab flow&lt;/code&gt;가 있다.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;git-flow&#34;&gt;Git flow&lt;/h2&gt;&#xA;&lt;p&gt;브랜치의 역할이 명확하고 &lt;strong&gt;대규모 프로젝트에 적합&lt;/strong&gt;.&lt;br&gt;&#xA;2개의 메인 브랜치, 3개의 보조 브랜치로 나뉨.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;master&#xA;&lt;ul&gt;&#xA;&lt;li&gt;제품으로 출시하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;실제 배포 중&lt;/strong&gt;이 상용 버전&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;develop&#xA;&lt;ul&gt;&#xA;&lt;li&gt;다음 출시 버전을 개발하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;실제 작동 중인 버전의 &lt;strong&gt;다음 버전을 개발&lt;/strong&gt;하기 위한 메인 스트림&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;feature&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;기능을 개발&lt;/strong&gt;하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;develop에서 뻗어 나와 develop으로&lt;/strong&gt; 합쳐짐&lt;/li&gt;&#xA;&lt;li&gt;실제 개발을 할때 &lt;strong&gt;가장 많이 쓰이는&lt;/strong&gt; 브랜치&lt;/li&gt;&#xA;&lt;li&gt;기능 별 브랜치 생성 후 개발 완료 시 develop 병합&lt;/li&gt;&#xA;&lt;li&gt;자유로운 브랜치명, 서버에 올리지 않고 &lt;strong&gt;local에서 작업&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;release&#xA;&lt;ul&gt;&#xA;&lt;li&gt;새로운 &lt;strong&gt;버전을 배포&lt;/strong&gt;하기 위한 브랜치(QA 용도)&lt;/li&gt;&#xA;&lt;li&gt;develop에서 뻗어나와 develop으로 합쳐지거나 배포 준비 완료 시 master로 합쳐짐&lt;/li&gt;&#xA;&lt;li&gt;주로 &lt;strong&gt;버그를 수정하는 디버깅만 커밋&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;release-* 라는 이름을 사용&lt;/li&gt;&#xA;&lt;li&gt;master에 병합했다면 develop에도 병합해 내용 일치시킴&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;hotfix&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;상용 제품에서 버그 발생 시 처리&lt;/strong&gt;하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;master에서 뻗어 나와 버그 수정 후 master와 develop으로 병합&lt;/li&gt;&#xA;&lt;li&gt;버그 픽스를 위한 브랜치로 &lt;strong&gt;다버깅만 커밋하며, 보통 일회성 사용&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;개인 작업은 develop에서 feature 브랜치를 따서 작업한다.&lt;/li&gt;&#xA;&lt;li&gt;개인 작업이 끝나면 develop에 병합한다.&lt;/li&gt;&#xA;&lt;li&gt;develop브랜치에서 배포 준비가 끝나면 release 브랜치로 분할한다.&lt;/li&gt;&#xA;&lt;li&gt;release 브랜치에서 디버깅하고 문제가 없으면 master와 develop 브랜치에 합친다.&lt;/li&gt;&#xA;&lt;li&gt;master브랜치를 배포한다.&lt;/li&gt;&#xA;&lt;li&gt;만약 배포 버전에서 문제가 생겨 급하게 수정해야 하면 hotfix 브랜치를 따서 작업한다.&lt;/li&gt;&#xA;&lt;li&gt;hotfix에서 버그픽스가 끝나면 master와 develop에 합친다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;github-flow&#34;&gt;Github flow&lt;/h2&gt;&#xA;&lt;p&gt;하나의 메인 브랜치인 &lt;strong&gt;master 브랜치를 중점으로 운용하며 pull request을 활용&lt;/strong&gt;한 방식 &lt;br&gt;&#xA;master 브랜치는 &lt;strong&gt;항상 최신 버전 유지 및 안정적&lt;/strong&gt;이어야 함 &lt;br&gt;&#xA;브랜치의 용도가 명확하게 분류되어 있지 않아 브랜치 생성 시 &lt;strong&gt;브랜치 명을 명확하게 작성&lt;/strong&gt; &lt;br&gt;&#xA;일반적으로 feature 브랜치의 작업은 local 저장소가 아닌 &lt;strong&gt;원격 저장소에 저장&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Git] Merge와 Rebase 차이</title>
      <link>http://localhost:1313/posts/configuration_management/git/merge_rebase/</link>
      <pubDate>Sun, 05 Mar 2023 04:30:49 +0900</pubDate>
      <guid>http://localhost:1313/posts/configuration_management/git/merge_rebase/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;프로그래밍을 공부 했을 시절 분기되었던 브랜치를 합치는 것 작업을 merge로 만 수행했었다.&lt;br&gt;&#xA;현업에 들어오고 나서 git history가 엉망이 되어가는 것을 직접 목격하였다&amp;hellip;&lt;br&gt;&#xA;어떻게 해야 history를 잘 관리 할 수 있는지 궁금하였고 사수의 도움으로 rebase하는 것을 알게 되었다.&lt;br&gt;&#xA;rebase 를 알고 사용하고 있지만 merge와 rebase의 차이점을 명확하게 알고 싶어 찾아보았다.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;들어가기-앞서&#34;&gt;들어가기 앞서&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;merge와 rebase의 차이를 알아보기 전에 이것들은 어떤 상황에서 사용하며 사용하면 어떤 일이 일어나는지 부터 간단하게 알아보고자 한다.&lt;br&gt;&#xA;&lt;a href=&#34;https://ChoiSeungWoo98.github.io/%ED%98%95%EC%82%B0%EA%B4%80%EB%A6%AC%EB%9E%80/&#34;&gt;Git이란?&lt;/a&gt;&lt;br&gt;&#xA;형상 관리 도구 중 하나이며 소스코드를 효과적으로 관리할 수 있게 해주는 공개 소프트웨어이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Git] branch가 자세히 뭘까?</title>
      <link>http://localhost:1313/posts/configuration_management/git/branch/</link>
      <pubDate>Sun, 05 Mar 2023 00:40:51 +0900</pubDate>
      <guid>http://localhost:1313/posts/configuration_management/git/branch/</guid>
      <description>&lt;h2 id=&#34;브랜치&#34;&gt;브랜치??&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;여러 개발자들이 &lt;strong&gt;동시에 다양한 작업을 할 수 있게 만들어 주는 기능&lt;/strong&gt;이 바로 브랜치(Branch) 이다.&lt;br&gt;&#xA;각자 &lt;strong&gt;독립적인 작업 영역(저장소) 안에서 마음대로 소스코드를 변경&lt;/strong&gt;할 수 있다.&lt;br&gt;&#xA;이렇게 분리된 작업 영역에서 &lt;strong&gt;변경된 내용은 나중에 원래의 버전과 비교해서 하나의 새로운 버전으로 만들어&lt;/strong&gt; 낼 수 있다.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;브랜치-사용법&#34;&gt;브랜치 사용법&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;메인 브랜치에서 자신의 작업 전용 브랜치를 만듦&lt;/li&gt;&#xA;&lt;li&gt;각자 작업을 진행한 후, 작업이 끝난 사람은 메인 브랜치에 자신의 브랜치의 변경 사항을 적용&lt;/li&gt;&#xA;&lt;li&gt;다른 사람의 작업에 영향을 받지 않고 독립적으로 특정 작업을 수행하고 그 결과를 하나로 모음&lt;/li&gt;&#xA;&lt;li&gt;브랜치로 그 작업의 기록을 중간 중간에 남기게 되므로 문제가 발생했을 경우 원인이 되는 작업을 찾아내거나 그에 따른 대책을 세우기 쉬워짐&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 브랜치 생성&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git branch branchName&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch myWork-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 브랜치 이동&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# switch 혹은 checkout 둘 다 가능&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git switch branchName&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git switch myWork-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 브랜치 생성 및 이동&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git checkout -b branch_name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git switch -c branch_name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git switch -c myWork-2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 현재 브랜치 확인&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 브랜치 삭제&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git branch -d branchName&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch -d myWork-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;포스트-작성-시-참고한-링크&#34;&gt;포스트 작성 시 참고한 링크&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://backlog.com/git-tutorial/kr/stepup/stepup1_1.html&#34;&gt;브랜치란?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
