<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>클라우드 on My Tech Blog 🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/categories/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C/</link>
        <description>Recent content in 클라우드 on My Tech Blog 🧑🏻‍💻</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 03 Jul 2024 22:03:57 +0900</lastBuildDate><atom:link href="https://choiseungwoo98.github.io/categories/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>클라우드 개념</title>
        <link>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EA%B0%9C%EB%85%90/</link>
        <pubDate>Wed, 03 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EA%B0%9C%EB%85%90/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제 어수선한 분위기 속에 첫날이 마무리되고&lt;br&gt;
두번째 수업이 진행되었습니다.&lt;br&gt;
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;클라우드-개념&#34;&gt;클라우드 개념
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 네트워크를 통해 인터넷 상에서 데이터 저장, 컴퓨팅 파워, 소프트웨어 등을 제공하는 기술이다.&lt;/li&gt;
&lt;li&gt;즉, 인터넷 상에서 &lt;strong&gt;여러 리소스&lt;/strong&gt;를 내가 원할 때 원하는 만큼 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;리소스-제공&#34;&gt;리소스 제공
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;통째로 빌려주는 방법
&lt;ul&gt;
&lt;li&gt;쉬운 방법이나, 내가 원하는 리소스랑 다를 수 있다.
&lt;ul&gt;
&lt;li&gt;원하는 리소스가 8코어 16기가 인데 16코어 32기가 서버가 존재한 경우 오버스펙이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자가 원하는 만큼 서버를 띄우는 방법
&lt;ul&gt;
&lt;li&gt;통째로 빌려주는 것이 아닌 큰 서버에서 사용자가 원하는 만큼 서버를 만들어 제공한다.&lt;/li&gt;
&lt;li&gt;이때 사용하는 기술이 가상화(Virtualization)이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;가상화virtualization&#34;&gt;가상화(Virtualization)
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;개념&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;물리적인 자원을 추상화하여 가상 자원을 만들어 관리하는 기술이다.(Ex : 안드로이드 애뮬레이터 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;호스트 가상화
&lt;ul&gt;
&lt;li&gt;가장 쉬운 방법, window 혹은 mac에서 가상화 소프트웨어를 이용하여 서버를 만드는 방법이다.(Ex : Virtual Box, VMware Fusion 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;details&gt;
     &lt;summary style=&#34;margin-left: 60px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;호스트 가상화&lt;/summary&gt;
     &lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/cloud/호스트가상화.png&#34;&gt;
 &lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;하이퍼바이저 가상화
&lt;ul&gt;
&lt;li&gt;하드웨어에 하이퍼바이저를 설치하여 가상 자원을 만드는 방법이다.(Ex : Xen, KVM 등)&lt;/li&gt;
&lt;li&gt;OS 명령어를 하이퍼바이저가 모두 받아들이거나(Para-Virtualization, PV)&lt;br&gt;
하드웨어에서 OS 명령어를 이해하는 경우(Hardware Virtual
Machine, HVM / Bare-Metal Hypervisor)가 있다.&lt;/li&gt;
&lt;li&gt;엔지니어가 주로 사용하는 방법이다.&lt;/li&gt;
&lt;li&gt;호스트 가상화와 가장 큰 차이점은 OS 위에 다른 OS를 띄우는 호스트 가상화와 달리&lt;br&gt;
하드웨어 위에 하이퍼바이저를 설치 후 그 위에 OS를 띄운다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;details&gt;
     &lt;summary style=&#34;margin-left: 60px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;하이퍼바이저 가상화&lt;/summary&gt;
     &lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/cloud/하이퍼바이저가상화.png&#34;&gt;
 &lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너 가상화
&lt;ul&gt;
&lt;li&gt;컨테이너 관리 소프트웨어를 설치하여, 논리적으로 나누어 사용한다.(Ex : Docker, Linux Container 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;details&gt;
     &lt;summary style=&#34;margin-left: 60px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;컨테이너 가상화&lt;/summary&gt;
     &lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/cloud/컨테이너가상화.png&#34;&gt;
 &lt;/details&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;awsamazon-web-services는-어떤-가상화를-사용할까&#34;&gt;AWS(Amazon Web Services)는 어떤 가상화를 사용할까?
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AWS EC2에서는 초반에 PV 방식을 사용하다가 HVM 방식을 사용하고 있으며, 최근 &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/ko/ec2/nitro/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nitro System&lt;/a&gt;을 사용하기 시작했다.&lt;/li&gt;
&lt;li&gt;AWS ECS에서는 컨테이너 가상화를 활용 중이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;가상화-종류&#34;&gt;가상화 종류
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;서버 가상화
&lt;ul&gt;
&lt;li&gt;하나의 물리적 서버를 여러 가상 서버로 분할하여 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데스크탑 가상화
&lt;ul&gt;
&lt;li&gt;사용자의 데스크탑 환경 가상화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;애플리케이션 가상화
&lt;ul&gt;
&lt;li&gt;애플리케이션을 가상 환경에서 실행하여 운영 체제와 분리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네트워크 가상화
&lt;ul&gt;
&lt;li&gt;물리적 네트워크 자원을 가상화하여 여러 가상 네트워크 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스토리지 가상화
&lt;ul&gt;
&lt;li&gt;물리적 스토리지를 추상화하여 논리적 스토리지 풀 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;virtual-machine과-bare-metal&#34;&gt;Virtual Machine과 Bare Metal
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Machine(VM)
&lt;ul&gt;
&lt;li&gt;가상 머신. 가상화 방식(PV or HVM)기반의 서버&lt;/li&gt;
&lt;li&gt;대부분의 클라우드 내 서버는 VM 방식 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bare Metal(BM)
&lt;ul&gt;
&lt;li&gt;큰 서버에서 분할해 제공하는 VM 방식과 달리 통째로 서버를 제공해주는 방법&lt;/li&gt;
&lt;li&gt;필요한 CPU, Memory, Storage 만큼 하드웨어를 만들어 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtual Machine vs Bare Metal
&lt;ul&gt;
&lt;li&gt;VM은 같은 하드웨어 위에서 분할하여 사용하므로&lt;br&gt;
한 사용자가 대량으로 리소스를 사용하면 하이퍼바이저에 영향이 가고 다른 사용자에게 까지 영향을 미칠수 있다.&lt;br&gt;
따라서, 안정적으로 좋은 성능을 요구한다면 BM을 비용 절감을 요구한다면 VM을 사용을 추천한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;cpu와-vcpu&#34;&gt;CPU와 vCPU
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;CPU
&lt;ul&gt;
&lt;li&gt;실제 하드웨어 자원, 물리적인 서버에서 실제 연산&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vCPU
&lt;ul&gt;
&lt;li&gt;가상화 환경에서 물리적 CPU 자원을 추상화한 자원, VM에 할당된 가상 자원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU vs vCPU
&lt;ul&gt;
&lt;li&gt;두 자원은 엄연히 다른 자원이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>클라우드 아키텍처</title>
        <link>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</link>
        <pubDate>Wed, 03 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제 어수선한 분위기 속에 첫날이 마무리되고&lt;br&gt;
두번째 수업이 진행되었습니다.&lt;br&gt;
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;클라우드-아키텍처&#34;&gt;클라우드 아키텍처
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션을 실행할 기반이 되는 온라인 플랫폼을 제공할 목적으로 클라우드 구축에 필수적인 모든 구성 요소 및 기능을 연결하는 방식&lt;/li&gt;
&lt;li&gt;서비스를 구축할 때, 클라우드 서비스의 다양한 기능들을 이용하여 인프라 구축 그림을 그리는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;클라우드-아키텍처를-그리기-위한-배경지식들&#34;&gt;클라우드 아키텍처를 그리기 위한 배경지식들
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;OS(Operating System)
&lt;ul&gt;
&lt;li&gt;하드웨어를 사용하기 위해 필요한 소프트웨어이다.&lt;/li&gt;
&lt;li&gt;Ex : Windows, Mac, Linux 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;파일시스템
&lt;ul&gt;
&lt;li&gt;운영 체제에서 HD, SSD 또는 USB 플래시 드라이브와 같은 저장 장치에 있는 파일을 구성하고 관리하는 데 사용하는 구조이다.&lt;/li&gt;
&lt;li&gt;클라우드에서도 서버 용량을 붙일 때 HD, SSD로 붙일지 선택하고 Network Block으로 만들어 붙인다. 따라서, VM에 있는 파일시스템 성능과 로컬에 성능은 다를 수 있다.&lt;/li&gt;
&lt;li&gt;NFS(Network File System), NBD(Network Block Device)와 같은 파일시스템에 대한 가상화도 많이 활용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VM (Virtual Machine)
&lt;ul&gt;
&lt;li&gt;가상화된 서버&lt;/li&gt;
&lt;li&gt;보통 OnDemand 형태로 필요한 만큼 사용하거나 1년이나 3년 비용을 미리 할인되 가격으로 내는 Reserved 방식으로 활용한다&lt;/li&gt;
&lt;li&gt;Spot Instance 형태로 저렴하게 사용 가능 단, 남는 리소스를 잠깐 빌려주는 형태라 강제로 서버가 회수될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LB(Load Balancer)
&lt;ul&gt;
&lt;li&gt;네트워크 트래픽을 여러 서버로 분산시키는 역할&lt;/li&gt;
&lt;li&gt;서버 이중화하는 경우 가장 많이 사용한다.&lt;/li&gt;
&lt;li&gt;이중화를 통해 HA(고가용성)을 책임진다.
&lt;ul&gt;
&lt;li&gt;HA : 바람직한 정도로 긴 시간동안 지속적으로 운영이 가능한 시스템이나 컴포넌트를 가리킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LB도 서비스 이기 때문에 느려질 수 있다.&lt;/li&gt;
&lt;li&gt;트래픽 몰릴 것으로 예상되는 시점에 서버도 늘리지만, LB에 미리 부하를 줘서 LB를 구성하는 서버도 미리 늘려놓는다.&lt;br&gt;
Pre-Warming 또는 Warm-Up이라고 부릅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터베이스
&lt;ul&gt;
&lt;li&gt;데이터를 저장하고 관리하는 서비스&lt;/li&gt;
&lt;li&gt;라이센스 규정에 의해 비슷한 서비스를 자체적으로 만들어 공급하는 경우가 많다(Ex : DynamoDB)&lt;/li&gt;
&lt;li&gt;오픈소스를 운영하는 경우도 있다(Ex : Amazon RDS for MySQL, Elasticache)&lt;/li&gt;
&lt;li&gt;AWS는 최신 버전을 업데이트 해주지만 많은 클라우스 서비스들이 버전업, 유지보수를 해주지 않는 경우가 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDN (Content Delivery Network)
&lt;ul&gt;
&lt;li&gt;자주 바뀌지 않는 리소스들을 캐싱하여 데이터를 전달하는 서비스&lt;/li&gt;
&lt;li&gt;서버에서 리소스를 전달하면, 그 만큼 서버의 트래픽이 나가는데 이 트래픽을 CDN이 대신 책임져준다면 서버의 부담이 낮아진다.&lt;/li&gt;
&lt;li&gt;캐싱을 사용해 서버가 리소스를 전달하는 것보다 효율적이다. 따라서, 자주 바뀌지 않는 리소스를 올리는게 좋습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSA (Micro Service Architecture)
&lt;ul&gt;
&lt;li&gt;작은 독립적인 서비스들로 분할하여 운영하는 아키텍처로 VM이나 Container를 이용하여 운영되어야 한다.&lt;/li&gt;
&lt;li&gt;보통 VM에 직접 올리는 형태에서 VM에 Container를 올려 운영하다가, 최종적으로는 EKS와 같은 쿠버네티스 시스템을 활용하는 형태로 고도화됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;다층구조&#34;&gt;다층구조
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 애플리케이션을 논리적으로 분리된 여러 계층으로 나누어 구성하는 아키텍처 스타일&lt;/li&gt;
&lt;li&gt;다층 구조는 보통 프레젠테이션 계층(=프론트엔드 계층), 애플리케이션 계층(=백엔드 계층), 데이터 계층(=데이터베이스 계층)으로 나눈다.(고차원으로 갈수룩 더 다양한 계층이 생길 수 있다.)&lt;/li&gt;
&lt;li&gt;다층 구조 종류
&lt;ul&gt;
&lt;li&gt;1티어 구조
&lt;ul&gt;
&lt;li&gt;프론트, 백, DB가 하나의 VM에서 돌고 있는 상황이다.&lt;/li&gt;
&lt;li&gt;VM이 죽는다면 모든 서버가 죽고 VM을 살리면 모든 서버를 살릴 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2티어 구조
&lt;ul&gt;
&lt;li&gt;프론트, 백엔드 서버 구분 없이 하나의 서버에서 DB와 연결된 상황이다.&lt;/li&gt;
&lt;li&gt;많이 사용되는 아키텍처, 안정성과 관리가 용이하다.&lt;/li&gt;
&lt;li&gt;단점으로는 백엔드에서 나는 에러가 프론트에서도 난다.(Ex: 404페이지, 500페이지 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3티어 구조
&lt;ul&gt;
&lt;li&gt;프론트와 백엔드를 구별하고 백엔드에서 DB에 연결된 상황&lt;/li&gt;
&lt;li&gt;인프라 운영 노하우가 있고 제품을 이해하고 있으면 가장 나은 방식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N티어 구조
&lt;ul&gt;
&lt;li&gt;백엔드에 역할을 다양하게 나누어 서로 API 통신하게 만드는 형태&lt;/li&gt;
&lt;li&gt;대부분의 SaaS가 해당 형태로 운영된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다층구조 핵심
&lt;ul&gt;
&lt;li&gt;비즈니스 상황을 고려하여 티어를 선택&lt;/li&gt;
&lt;li&gt;애플리케이션이 너무 커져서 모듈로 쪼갠다면 데이터 기반이 보편적이다.(결제 시스템, 유저 시스템 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>부트캠프 시작(클라우드 OT)</title>
        <link>https://choiseungwoo98.github.io/p/%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%8B%9C%EC%9E%91%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-ot/</link>
        <pubDate>Tue, 02 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%8B%9C%EC%9E%91%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-ot/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제 OT를 잘 마치고 오늘 첫번째 수업 날 입니다!&lt;br&gt;
오늘은 별다른 수업 없이 ZEP에 접속하고 노션(단체, 개인 목표를 작성)을 만들었습니다.
진도를 나가지 않아 엄청 어수선한 분위기 속에 어떻게 되련지&amp;hellip;.
아침에 말씀해주셨던 부분 중 일부분을 찾아보고 작성하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;쿠버네티스&#34;&gt;쿠버네티스
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너화 된 애플리케이션의 자동화(Deploy, Scaling 등을 제공) 하는 시스템&lt;/li&gt;
&lt;li&gt;쿠버네티스를 운영하기 위한 서버가 따로 필요하다.&lt;/li&gt;
&lt;li&gt;항상 쿠버네티스가 솔루션인가는 고민해볼 필요가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;서버의-이중화는-반드시-필요한가&#34;&gt;서버의 이중화는 반드시 필요한가?
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;정답은 없는 부분이라 섣부르게 답변하기 어렵지만 내 생각을 정리하자면 반드시 필요하지는 않다고 생각한다.&lt;br&gt;
주식, 게임과 같은 실시간 서비스거나 트래픽이 많은 대규모 어플리케이션을 운영하는 경우 필요하다고 생각하지만. &lt;br&gt;
사내에서 인트라넷, 비즈니스에 큰 영향이 가지 않는 경우 이중화를 하게 되면 비용적인 문제가 발생할 수 있다고 생각한다.&lt;br&gt;
따라서, 서비스의 특징과 상황을 고려하여 이중화를 진행해야 한다고 생각합니다.&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;안정성-vs-효율&#34;&gt;안정성 vs 효율
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;개발자는 항상 기로에 놓이는 것 같습니다.&lt;br&gt;
새로운 기술을 채택하여 효율적으로 작업하거나 기존의 기술을 채택하여 안정적으로 작업하거나&lt;br&gt;
이것도 마찬가지로 정답은 없지만 그때그때 상황에 맞게 사용할 수 있도록 소통 및 판단하는 능력이 중요할 것 같습니다.&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;나한테-이득이-되는-경험&#34;&gt;나한테 이득이 되는 경험
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;서비스 운영&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;도메인 붙인 서비스&lt;/li&gt;
&lt;li&gt;리소스 모터링(스케일인 / 스케일아웃)&lt;/li&gt;
&lt;li&gt;개인정보처리방침과 이용약관 이해하고 회원가입&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;데이터 관리&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;db를 클라우드에 깔기&lt;/li&gt;
&lt;li&gt;백업 자동화&lt;/li&gt;
&lt;li&gt;데이터베이스 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;애플리케이션 보안&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Token 기반으로 api가 동작하도록 만들어보기&lt;/li&gt;
&lt;li&gt;가장 쉬운 방법 세션, 토큰, key(하드하게 넣으면 탈취 당할 수 있음, 파일을 따로 둔다.)&lt;/li&gt;
&lt;li&gt;api 파라미터를 조작하여 다른 계정의 데이터를 가져올 수 없게 만들기&lt;/li&gt;
&lt;li&gt;주요 3rd Party Key들을 보관할 때. 하드코딩 말고 밖으로 배서 관리하기 Vault을 통해 관리하기&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;클라우드-엔지니어가-알고-있으면-좋은-것들추후에-포스트로-작성-예정&#34;&gt;클라우드 엔지니어가 알고 있으면 좋은 것들(추후에 포스트로 작성 예정)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;쿠버네티스&lt;/li&gt;
&lt;li&gt;네트워크 -&amp;gt; 20240704 작성&lt;/li&gt;
&lt;li&gt;리눅스&lt;/li&gt;
&lt;li&gt;보안&lt;/li&gt;
&lt;li&gt;장애 대응 프로세서&lt;/li&gt;
&lt;li&gt;HA(고가용성)&lt;/li&gt;
&lt;li&gt;Absible&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;온프레미스 방식&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;sre&lt;/li&gt;
&lt;li&gt;kisa&lt;/li&gt;
&lt;li&gt;MongoDB Atlas(몽고 디비를 클라우드 서비스로 제공)&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;token&lt;/li&gt;
&lt;li&gt;GIB&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
