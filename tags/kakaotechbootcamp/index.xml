<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>KakaoTechBootCamp on 승우의 성장일지 🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/tags/kakaotechbootcamp/</link>
        <description>Recent content in KakaoTechBootCamp on 승우의 성장일지 🧑🏻‍💻</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 18 Jul 2024 09:54:15 +0900</lastBuildDate><atom:link href="https://choiseungwoo98.github.io/tags/kakaotechbootcamp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>IaC 기초 및 Terraform, Ansible</title>
        <link>https://choiseungwoo98.github.io/p/iac-%EA%B8%B0%EC%B4%88-%EB%B0%8F-terraform-ansible/</link>
        <pubDate>Thu, 18 Jul 2024 09:54:15 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/iac-%EA%B8%B0%EC%B4%88-%EB%B0%8F-terraform-ansible/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 배포 자동화에 대해 배웠다.&lt;br&gt;
거의 대부분의 프로젝트가 자동화를 사용하는 만큼 집중해서 잘 들어야지   &lt;br&gt;
잊지 않기 위해 복습 또 복습&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;iacinfrastructure-as-code&#34;&gt;IaC(Infrastructure As Code)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서버, 네트워크, DB, 애플리케이션 구성 등 IT 인프라를 수동 관리 대신 코드로 정의하고 관리하는 방식&lt;/li&gt;
&lt;li&gt;프로그래밍 언어, 구성 파일을 사용하여 인프라 자동 배포 및 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;자동화, 일관성 : 수동 오류를 줄이고 배포, 관리의 일관성 유지&lt;/li&gt;
&lt;li&gt;버전 관리 : 변경 이력 추적 및 복구 가능&lt;/li&gt;
&lt;li&gt;재사용성 : 코드 모듈화 및 템플릿화 를 통해 재사용성을 높여 비용 절감&lt;/li&gt;
&lt;li&gt;협업 : Devops 문화의 핵심 요소&lt;/li&gt;
&lt;li&gt;가시성, 투명성 : 모든 설정을 명시적으로 정의해, 인프라 구성 상태를 명확히 파악&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;구현-방식&#34;&gt;구현 방식
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;선언적 접근 방식 : 원하는 최종 상태 정의, 시스템 자동 구성(Terraform, AWS CloudFormation 등), 간결한 설정으로 이해가 쉽고 필요한 설정만 변경&lt;/li&gt;
&lt;li&gt;명령적 접근 방식 : 수행할 명령어 순서 명시 및 인프라 설정을 위한 단계별 명령 작성(Ansible, Chef 등), 세부적인 제어 가능, 복잡한 논리와 조건 처리를 쉽게 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;도구&#34;&gt;도구
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Terraform : 클라우드 인프라를 코드로 정의하는 오픈소스 도구&lt;/li&gt;
&lt;li&gt;AWS CloudFormation : AWS 리소스 템플릿으로 정의하여 배포&lt;/li&gt;
&lt;li&gt;Ansible : 서버 구성 및 애플리케이션 배포 자동화 도구, YAML 포맷의 플레이북 사용&lt;/li&gt;
&lt;li&gt;Kubernetes : 컨테이너화된 애플리케이션 배포, 스케일링, 운영 자동화, Yaml 파일을 통해 클러스터 상태 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;워크플로우&#34;&gt;워크플로우
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;계획 : 요구사항 분석 및 인프라 구조 설계&lt;/li&gt;
&lt;li&gt;코드 작성 : 인프라를 코드로 정의&lt;/li&gt;
&lt;li&gt;버전 관리 : 작성된 코드를 Git 등의 버전 관리 시스템에 저장 및 이력 관리&lt;/li&gt;
&lt;li&gt;테스트 : 테스트 환경에서 코드 실행 및 결과 검증&lt;/li&gt;
&lt;li&gt;적용 : 검증된 코드를 실제 환경에 배포&lt;/li&gt;
&lt;li&gt;모니터링, 관리 : 배포된 인프라 모니터링 및 수정, 업데이트&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;장점&#34;&gt;장점
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;신속한 배포 : 자동화된 프로세스를 통해 신속하게 배포&lt;/li&gt;
&lt;li&gt;효율성 : 반복적인 작업을 자동화&lt;/li&gt;
&lt;li&gt;일관성 : 모든 환경에서 동일한 설정 적용&lt;/li&gt;
&lt;li&gt;복구 능력 : 코드 기반 인프라는 장애 시 빠르게 복구 가능&lt;/li&gt;
&lt;li&gt;확장성 : 필요에 따라 쉽게 확장 및 축소 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;terraform&#34;&gt;Terraform
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;인프라를 코드로 관리하는 도구, HashiCorp에서 개발&lt;/li&gt;
&lt;li&gt;인프라를 선언적으로 정의 및 관리&lt;/li&gt;
&lt;li&gt;대부분 인프라를 테라폼해서 배포, 진짜 중요한 사업인 경우 손으로 배포&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징-1&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;프로바이더 : AWS, Azure, GCP 등 다양한 클라우드 서비스 제공자 지원&lt;/li&gt;
&lt;li&gt;인프라 코드화 : JSON과 유사한 HCL(HashiCorp Configuration Language) 사용&lt;/li&gt;
&lt;li&gt;실행 계획 : 변경사항 적용 전 계획 미리 확인&lt;/li&gt;
&lt;li&gt;모듈화 : 재사용 가능한 모듈 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;워크플로우-1&#34;&gt;워크플로우
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;init : 프로젝트 디렉토리 초기화 및 필요한 플러그인 다운로드&lt;/li&gt;
&lt;li&gt;plan : 변경 사항 시뮬레이션 및 계획서 제출&lt;/li&gt;
&lt;li&gt;apply : 계획된 변경 사항 실제 인프라 적용&lt;/li&gt;
&lt;li&gt;state : 인프라 상태 확인 및 관리&lt;/li&gt;
&lt;li&gt;destroy : 인프라 자원 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;예제&#34;&gt;예제
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# CSP 설정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;provider &lt;span class=&#34;s2&#34;&gt;&amp;#34;aws&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 할당 지역 설정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;region&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ap-northeast-2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 변수 설정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;variable &lt;span class=&#34;s2&#34;&gt;&amp;#34;instance_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 기본 값 설정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# CSP 내부에서 사용할 리소스 명칭&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;resource &lt;span class=&#34;s2&#34;&gt;&amp;#34;aws_instance&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;ami&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ami-123456&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;instance_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;t2.micro&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 오브젝트의 특정 항목을 파일로 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;output &lt;span class=&#34;s2&#34;&gt;&amp;#34;instance_ip&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; aws_instance.example.public_ip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;ansible&#34;&gt;Ansible
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;IT 자동화 도구로 서버 구성 관리, 애플리케이션 배포, 작업 자동화 지원&lt;/li&gt;
&lt;li&gt;원격에서 수백, 수천대 까지 명령어를 한번에 실행해 모든 자동화 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징-2&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Agentless : SSH를 통해 연결 진행&lt;/li&gt;
&lt;li&gt;모듈 기반 : 모듈을 통해 다양한 작업 수행&lt;/li&gt;
&lt;li&gt;YAML : 가독성 높은 YAML 포맷 사용&lt;/li&gt;
&lt;li&gt;확장성 : 커뮤니티 모듈 및 플러그인을 통해 기능 확장 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;구성요소&#34;&gt;구성요소
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Inventory : 관리할 호스트 목록 정의&lt;/li&gt;
&lt;li&gt;Playbook : 작업 정의서(YAML 포맷 사용), 실질적인 명령 수행 부분&lt;/li&gt;
&lt;li&gt;Modules : 특정 작업을 수행하는 코드 블록&lt;/li&gt;
&lt;li&gt;Roles : 관련 작업을 그룹화하여 재사용&lt;/li&gt;
&lt;li&gt;Tasks : 실행할 작업 정의&lt;/li&gt;
&lt;li&gt;Handlers : 특정 조건에 따라 실행되느 작업&lt;/li&gt;
&lt;li&gt;Templates : Jinja2 템플릿을 통해 설정 파일 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;워크플로우-2&#34;&gt;워크플로우
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;인벤토리 작성 : 호스트 목록 작성&lt;/li&gt;
&lt;li&gt;플레이북 작성 : 수행할 작업을 정의한 YAML 파일 작성&lt;/li&gt;
&lt;li&gt;작업 실행 : 플레이북 실행&lt;/li&gt;
&lt;li&gt;상태 확인 : 호스트 상태 및 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;실습&#34;&gt;실습
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;유저 생성(AdminstratorAccess)&lt;/li&gt;
&lt;li&gt;액세스키 생성(CLI)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 액세스 키 등록&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 액세스키, 비밀 액세스 키, 리전, 타입 - json 추천 입력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws configure
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 설정 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat ~/.aws/credentials
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# main.tf 파일 생성 후 붙여넣기(키 위치 밑 ip 변경)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vi main.tf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 현재 디렉토리에 있는 Terraform 구성 파일 초기화 및 필요한 플러그인, 모듈 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;terraform init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 현재 구성 파일 기반으로 실행 계획 생성 및 적용될 변경 사항 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;terraform plan
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 실행 계획을 실제로 적용하여 인프라 생성 혹은 업데이트&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;terraform apply
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# hosts.ini 파일에 문구 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;[webservers]&amp;#34;&lt;/span&gt; &amp;gt; hosts.ini
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Terraform 출력 값에서 인스턴스 IP를 json 형식으로 가져와 hosts.ini 파일에 적용&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;terraform output -json instance_ips &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;.[]&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hosts.ini
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# playbook.yml 파일 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vi playbook.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ansible.cfg 파일 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vi ansible.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# hosts.ini 파일을 인벤토리로 사용하여 Ansible 플레이북 실행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ansible-playbook -i hosts.ini playbook.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ssh 접속&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -i &amp;lt;key&amp;gt; &amp;lt;os&amp;gt;@&amp;lt;ip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 실행 중인 모든 프로세서 중 nginx 필터링&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ps -ef &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Terraform 구성을 기반으로 인프라를 제거&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;terraform destroy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>aws에 EBS, Lambda와 efs</title>
        <link>https://choiseungwoo98.github.io/p/aws%EC%97%90-ebs-lambda%EC%99%80-efs/</link>
        <pubDate>Wed, 17 Jul 2024 11:42:15 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/aws%EC%97%90-ebs-lambda%EC%99%80-efs/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 EBS, 람다와 EFS에 대해 배웠다 &lt;br&gt;
잊지 않기 위해 복습 또 복습&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ebselastic-block-storage&#34;&gt;EBS(Elastic Block Storage)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AWS 블록 스토리지 서비스로 EC2 인스턴스에 사용되는 지속적인 스토리지&lt;/li&gt;
&lt;li&gt;DB, 파일 시스템, 로그 스토리지, 애플리케이션 데이터 등 사용&lt;/li&gt;
&lt;li&gt;데이터를 블록 단위로 저장하며 개별적으로 다루어 질 수 있다.&lt;/li&gt;
&lt;li&gt;지속성이 보장되며 중지 또는 종료해도 데이터 유지&lt;/li&gt;
&lt;li&gt;주로 자주 접근하지 않는 데이터를 저렴하게 저장할 때 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;탄력성 : 필요에 따라 크기 조정, 스냅샷을 통해 백업 및 복원 가능(용량을 늘리는 건 쉬우나 줄이는 건 힘들어 충분히 고려 후 증설)&lt;/li&gt;
&lt;li&gt;고성능 : 다양한 선능 옵션 제공&lt;/li&gt;
&lt;li&gt;내구성 : 데이터 복제 및 높은 가용성 제공&lt;/li&gt;
&lt;li&gt;보안 : IAM 정책을 통한 접근 제어 가능&lt;/li&gt;
&lt;li&gt;스냅샷 : 볼륨의 시점 복사본 생성 가능 S3에 저장되며 복구 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습볼륨-확장&#34;&gt;실습(볼륨 확장)
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;인스턴스 생성&lt;/li&gt;
&lt;li&gt;보안 그룹 권한 변경&lt;/li&gt;
&lt;li&gt;볼륨 늘림&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 인스턴스 접근&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -i &amp;lt;aws key&amp;gt; &amp;lt;os&amp;gt;@&amp;lt;ip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 루트 권한으로 변경&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo su
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 파일 시스템 디스크 사용량 노출&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;df -hT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 시스템 블록 장치 나열&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lsblk
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 지정된 파티션의 크기 확장&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;growpart /dev/xvda &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# XFS 파일 시스템 크기 확장&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xfs_growfs /dev/xvda1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 증설 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lsblk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;aws-efselastic-filesystem&#34;&gt;AWS EFS(Elastic FileSystem)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;여러 EC2 인스턴스가 동시에 데이터를 읽고 쓰며, 파일 시스템의 확장성과 고가용성 보장&lt;/li&gt;
&lt;li&gt;같은 VPC 내에서 여러 인스턴스가 같은 파일 시스템에 접근해 읽기, 쓰기 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징-1&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;확장성 : 파일 시스템 크기 자동 조절 및 필요에 따른 확장, 축소 가능&lt;/li&gt;
&lt;li&gt;고가용성 및 내구성 : 여러 가용 영역(AZ)에 데이터 자동 복제해 높은 가용성 및 내구성 제공&lt;/li&gt;
&lt;li&gt;동시 엑세스 : 여러 EC2 인스턴스에서 동시에 엑세스 할 수 있으며 공유 파일 시스템이 필요한 워크 로드에 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습볼륨-확장-1&#34;&gt;실습(볼륨 확장)
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;EFS 생성&lt;/li&gt;
&lt;li&gt;보안그룹 수정&lt;/li&gt;
&lt;li&gt;연결&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 인스턴스 접근&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -i &amp;lt;aws key&amp;gt; &amp;lt;os&amp;gt;@&amp;lt;ip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 루트 권한으로 변경&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo su
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ip 복사&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /mnt 디렉토리 안에 efs 폴더 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /mnt &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir efs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 복사한 ip 주소 입력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;df -hT &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep efs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;aws-s3simple-storage-serive&#34;&gt;AWS S3(Simple Storage Serive)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;객체 스토리지 서비스로 데이터를 객체 단위로 저장&lt;/li&gt;
&lt;li&gt;객체는 파일 데이터와 메타 데이터로 구성되며 인터넷을 통해 접근 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징-2&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;내구성 및 가용성 : S3는 99.99% 내구성 제공 및 여러 가용 영역의 복제되어 높은 가용성 보장&lt;/li&gt;
&lt;li&gt;확장성 : 거의 무한대로 확장 가능&lt;/li&gt;
&lt;li&gt;보안 : 데이터 암호화 후 저정 및 전송하며 IAM 정책, 버킷 정책, ACL을 통해 엑세서 권한 제어&lt;/li&gt;
&lt;li&gt;비용과 효율성 : 저장한 데이터 양과 사용한 리소스에 따라 지용 지불&lt;/li&gt;
&lt;li&gt;데이터 관리 기능 : 버전 관리, 수명 주기 정책, 객체 잠금, 이벤트 알림 등 데이터를 효울적으로 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용-예시&#34;&gt;사용 예시
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;중요한 데이터 백업 및 복원에 사용&lt;/li&gt;
&lt;li&gt;오랫동안 보관해야 하지만 자주 접근하지 않는 데이터의 아카이빙에 적합&lt;/li&gt;
&lt;li&gt;정적 웹 사이트 호스팅에 사용&lt;/li&gt;
&lt;li&gt;미디어 콘텐츠 저장 후 배포 시 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습볼륨-확장-2&#34;&gt;실습(볼륨 확장)
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;S3 생성(모든 퍼블릭 허용)&lt;/li&gt;
&lt;li&gt;권한 추가&lt;/li&gt;
&lt;li&gt;파일 업로드&lt;/li&gt;
&lt;li&gt;url 클릭 후 확인&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;aws-lambda&#34;&gt;AWS Lambda
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서버를 프로비저닝하거나 관리할 필요 없이 코드를 실행 할 수 있는 컴퓨팅 서비스&lt;/li&gt;
&lt;li&gt;코드를 업로드하고 실행 조건을 설정하면, 나머지 인프라 관리는 AWS에서 자동으로 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징-3&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;서버를 프로비저닝, 관리, 확장할 필요가 없이 AWS에서 모든 인프라 관리&lt;/li&gt;
&lt;li&gt;Lambda 함수는 요청에 따라 자동 확장&lt;/li&gt;
&lt;li&gt;다양한 프로그래밍 언어 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용-예시-1&#34;&gt;사용 예시
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;파일 업로드 이벤트 발생 시 트리거하여 파일 처리&lt;/li&gt;
&lt;li&gt;실시간 데이터 처리 및 로그 분석, 필터링, 알람 트리거 수행&lt;/li&gt;
&lt;li&gt;백업, 보고서 생성, 시스템 유지보수 작업 자동화&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습볼륨-확장-3&#34;&gt;실습(볼륨 확장)
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Lambda 생성&lt;/li&gt;
&lt;li&gt;코드 수정&lt;/li&gt;
&lt;li&gt;테스트 클릭 및 모니터링 로그 확인&lt;/li&gt;
&lt;li&gt;트리거 추가&lt;/li&gt;
&lt;li&gt;파일 업로드&lt;/li&gt;
&lt;li&gt;모니터링 확인&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;aws-cloudwatch&#34;&gt;AWS CloudWatch
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;인프라와 애플리케이션의 상태를 모니터링하고 관리하는 서비스&lt;/li&gt;
&lt;li&gt;다양한 AWS 서비스와 통합되어 메트릭 수집, 경보 설정, 로그 모니터링 및 분석&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;특징-4&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;EC2, RDS, S3, DynamoDB 등 다양한 AWS 서비스에서 메트릭 자동 수집&lt;/li&gt;
&lt;li&gt;특정 조건 충족 시 알람 생성해 SNS 및 함수 트리거, auto Scaling 조치&lt;/li&gt;
&lt;li&gt;대시보드를 사용해 모니터링&lt;/li&gt;
&lt;li&gt;시스템 이벤트 감지 및 지정된 대상으로 알림 전송&lt;/li&gt;
&lt;li&gt;임계값 초과 시 경보 설정 및 자동 대응 조치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습볼륨-확장-4&#34;&gt;실습(볼륨 확장)
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;IAM 역할 생성(AWSLambdaBasicExecutionRole, CloudWatchEventsFullAccess)&lt;/li&gt;
&lt;li&gt;lambda 생성&lt;/li&gt;
&lt;li&gt;구성 - 권한 - 편집 - 역할 변경&lt;/li&gt;
&lt;li&gt;이벤트 브리지 규칙 생성(aws , cloudWatch, Alarm, kakao)&lt;/li&gt;
&lt;li&gt;cloudWatch 대시보드 - 경보상태 - 경보 생성&lt;/li&gt;
&lt;li&gt;지표 선택 - 인스턴스 - cpu - 지표  선택&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>AWS IAM을 이용한 S3 실습</title>
        <link>https://choiseungwoo98.github.io/p/aws-iam%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-s3-%EC%8B%A4%EC%8A%B5/</link>
        <pubDate>Mon, 15 Jul 2024 15:01:46 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/aws-iam%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-s3-%EC%8B%A4%EC%8A%B5/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 AWS 첫번째 실습 시간이다.&lt;br&gt;
IAM에 대해 공부 후&lt;br&gt;
S3를 통해 제어하는 실습&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;iam&#34;&gt;IAM
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;클라우드 서비스에서 사용자의 리소스 접근을 제어하는 웹 서비스&lt;/li&gt;
&lt;li&gt;사용자 및 그룹을 생성해 리소스 권한 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iam-user&#34;&gt;IAM User
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Aws 리소스에 접근하기 위해 생성되는 개별 엔터티&lt;/li&gt;
&lt;li&gt;고유한 자격 증명(로그인 정보)과 함께 제공, 권한을 부여받아 작업 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iam-group&#34;&gt;IAM Group
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;공통적인 권한을 부여하기 위해 사요되는 논리적 단위&lt;/li&gt;
&lt;li&gt;사용자별 권한을 할당하는 대신 그룹에 권한 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습&#34;&gt;실습
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;IAM User 생성&lt;/li&gt;
&lt;li&gt;IAM User Group 생성&lt;/li&gt;
&lt;li&gt;생성한 유저 로그인 후 권한 확인&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;iam-정책policy&#34;&gt;IAM 정책(Policy)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AWS 리소스에 대한 접근 권한을 정의하는 JSON 문서&lt;/li&gt;
&lt;li&gt;권한을 세부적으로 제어&lt;/li&gt;
&lt;li&gt;보안과 권한 관리를 위해 필수적인 구성 요소&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;관리형-정책managed-policies&#34;&gt;관리형 정책(Managed Policies)
&lt;/h4&gt;&lt;p&gt;미리 정의된 정책으로 사용자가 쉽게 권한을 부여할 수 있도록 설계&lt;/p&gt;
&lt;h4 id=&#34;인라인-정책inline-policies&#34;&gt;인라인 정책(Inline Policies)
&lt;/h4&gt;&lt;p&gt;특정 사용자, 그룹 또는 역할에 직접 연결된 정책&lt;br&gt;
다른 엔터티와 공유되지 않고 연결된 엔터티 삭제 시 정책도 삭제&lt;br&gt;
권한을 좀 더 세밀하게 제어하고자 할 때 사용&lt;/p&gt;
&lt;h4 id=&#34;구성요소&#34;&gt;구성요소
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;statement : 정책의 주요 내용이 포함된 부분, 다중 statement 가능&lt;/li&gt;
&lt;li&gt;Effect : 권한 효과를 정의(허용 혹은 거부)&lt;/li&gt;
&lt;li&gt;Action : 허용, 거부할 작업 정의&lt;/li&gt;
&lt;li&gt;Resource : 작업이 적용되는 리소스 정의&lt;/li&gt;
&lt;li&gt;Condition : 조건을 추가해 세부적인 적용 제어&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습-1&#34;&gt;실습
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;정책 추가&lt;/li&gt;
&lt;li&gt;버킷 생성&lt;/li&gt;
&lt;li&gt;권한 정책 연결 후 테스트&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;iam-역할role&#34;&gt;IAM 역할(Role)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;역할(Role) : 특정 AWS 서비스나 다른 계정의 사용자등이 AWS 리소스에 접근할 수 있도록 임시 보안 자격 증명을 제공&lt;/li&gt;
&lt;li&gt;정책(Policy) : 권한을 정의하는 JSON 문서&lt;/li&gt;
&lt;li&gt;신뢰정책(Trust Policy) : 역할을 맡을 수 있는 엔터티 정의 정책&lt;/li&gt;
&lt;li&gt;역할 전환(Role Assumption) : 역할을 맡는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;정책-종류&#34;&gt;정책 종류
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;권한 정책(Permission Policy) : 역할을 맡은 엔터티가 수행할 수 있는 작업 정의&lt;/li&gt;
&lt;li&gt;신뢰 정책(Trust Policy) : 어떤 엔터티가 역할을 맡을 수 있는지 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용-방식&#34;&gt;사용 방식
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;AWS 서비스 간의 권한 부여 : EC2 인스턴스가 S3 버킷에 접근 가능하도록 역할 사용&lt;/li&gt;
&lt;li&gt;계정 간 권한 부여 : 사용자가 다른 AWS 계정의 리소스에 접근 할 수 있도록 역할 사용&lt;/li&gt;
&lt;li&gt;단기 자격 증명 : 임시 자격 증명을 사용해 특정 기간 동안 접근 권한 부여&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습-2&#34;&gt;실습
&lt;/h4&gt;&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 인스턴스 접속&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -i &amp;lt;key&amp;gt; &amp;lt;os&amp;gt;@&amp;lt;ip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# aws 설치 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;asw --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# S3에 파일 업로드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws s3 cp &amp;lt;파일명&amp;gt; s3://&amp;lt;버킷이름&amp;gt;/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# S3에 업로드된 파일 내려받기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws s3 cp &amp;lt;파일명&amp;gt; s3://&amp;lt;버킷이름&amp;gt;/&amp;lt;버킷내 파일명&amp;gt; &amp;lt;로컬 파일명&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# S3에 업로드된 파일 리스트&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws s3 ls &amp;lt;파일명&amp;gt; s3://&amp;lt;버킷이름&amp;gt;/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# S3에 업로드된 파일 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws s3 rm &amp;lt;파일명&amp;gt; s3://&amp;lt;버킷이름&amp;gt;/&amp;lt;버킷내 파일명&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>AWS와 LB 실습</title>
        <link>https://choiseungwoo98.github.io/p/aws%EC%99%80-lb-%EC%8B%A4%EC%8A%B5/</link>
        <pubDate>Mon, 15 Jul 2024 15:01:46 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/aws%EC%99%80-lb-%EC%8B%A4%EC%8A%B5/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 AWS 첫번째 실습 시간이다.&lt;br&gt;
EC2에서 VPC를 사용하고 public이랑 private를 열어&lt;br&gt;
public은 LB를 테스트하고&lt;br&gt;
private은 NAT를 이용한 인터넷 연결을 실습했다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cspcloud-service-provider&#34;&gt;CSP(Cloud Service Provider)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;클라우드 컴퓨팅 서비스를 제공하는 회사(Ex. AWS, Azure, GCP, NCP 등)&lt;/li&gt;
&lt;li&gt;인프라 서비스(IaaS), 플랫폼 서비스(PaaS), 소프트웨어 서비스(SaaS) 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;awsamazon-web-services&#34;&gt;AWS(Amazon Web Services)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;아마존에서 제공하는 클라우드 컴퓨팅 플랫폼&lt;/li&gt;
&lt;li&gt;현재 높은 점유율로 클라우드 시장에서 강세를 보이고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;클라우드-컴퓨팅&#34;&gt;클라우드 컴퓨팅
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;내용&#34;&gt;내용
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;온프레미스(On-premise) 환경과 반대의 의미로 많이 사용
&lt;ul&gt;
&lt;li&gt;IT 인프라를 조직 내부에 직접 설치하고 운영하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;장점&#34;&gt;장점
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;비용 절감 : 필요한 만큼 컴퓨팅 자원과 스토리지 대여를 통해 비용 절감&lt;/li&gt;
&lt;li&gt;속도와 민첩성 : 시스템 자체에 대한 확정을지원하는 클라우드 특성상 빠르게 확장을 진행 할 수 있다.&lt;/li&gt;
&lt;li&gt;글로벌 서비스 : 특정 지역에 한정되는 온프레미스와 달리 전세계적인 데이터 센터를 통해 사용&lt;/li&gt;
&lt;li&gt;탄력성 : 모든 CSP에서는 리소스 사용량 증가로 인한 서비스 장애 방지를 위해 탄력적으로 사용 가능한 리소스 조절&lt;/li&gt;
&lt;li&gt;보안 : 네트워크 방화벽, WAF 등을 통해 강력한 보안 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;azavailability-zone&#34;&gt;AZ(Availability Zone)
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;내용-1&#34;&gt;내용
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;하나의 Region 내에 위치한 데이터 센터 그룹&lt;/li&gt;
&lt;li&gt;고가용성과 내결함성을 위해 여러 AZ에 걸쳐 앱 배포&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;region&#34;&gt;Region
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;지리적으로 분리되어 여러 위치로 구분&lt;/li&gt;
&lt;li&gt;리전끼리 통신 시 별도 비용이 추가될 수 있다.&lt;/li&gt;
&lt;li&gt;글로벌 서비스 특성상 빠른 서비스를 제공하기 위해 여러 리전에 걸쳐 앱 배포&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;vpcvirtual-private-cloud&#34;&gt;VPC(Virtual Private Cloud)
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;내용-2&#34;&gt;내용
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개인 네트워크를 구성하는 요소&lt;/li&gt;
&lt;li&gt;서브넷, 라우팅 테이블, 보안 그룹, 인터넷 게이트웨이, NAT 게이트웨이&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;이점&#34;&gt;이점
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;격리성 : 격리된 환경에서 구성하기 때문에 다른 네트워크에 간섭을 받지 않는다.&lt;/li&gt;
&lt;li&gt;보안성 : 세부적인 보안 설정 가능&lt;/li&gt;
&lt;li&gt;확장성 : 필요에 따라 서브넷 추가 구성, 라우팅 테이블, 보안 그룹 등 쉽게 추가&lt;/li&gt;
&lt;li&gt;유연성 : 요구에 따라 온프레미스와 혼합해 하이브리드 클라우드 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;vpc-요소&#34;&gt;VPC 요소
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;서브넷&#34;&gt;서브넷
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;실제 VM이 올라갈 네트워크 대역을 설정&lt;/li&gt;
&lt;li&gt;private와 public은 인터넷 게이트웨이 유무와 라우팅 테이블에 인터넷 게이트웨이 추가 여부&lt;/li&gt;
&lt;li&gt;private는 NAT 게이트웨이를 통하지 않는 이상 인터넷 통신 불가 public은 기본적으로 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;라우팅-테이블&#34;&gt;라우팅 테이블
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;서브넷에서 사용되는 네트워크 네비게이션 같은 존재&lt;/li&gt;
&lt;li&gt;CIDR 기반으로 동작, 각각의 대역에 대해 경로 설정 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;보안-그룹&#34;&gt;보안 그룹
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ACL(Access Control List)처럼 출발 IP, Port에 따라 출입 여부 결정&lt;/li&gt;
&lt;li&gt;아웃바운드는 보통 통신의 원활함을 위해 열어두는 편&lt;/li&gt;
&lt;li&gt;인바운드는 접속 및 통신용 포트를 제외한 나머지 통제&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;인터넷-게이트웨이&#34;&gt;인터넷 게이트웨이
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;퍼블릭 서브넷을 결정하는 요소&lt;/li&gt;
&lt;li&gt;라우팅 테이블과 조합하여 특정 대역만 인터넷이 가능하도록 설정(대부분 관리 비용이 때문에 다 열어둔다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;natnetwork-address-translation-게이트웨어&#34;&gt;NAT(Network Address Translation) 게이트웨어
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;private에서도 인터넷 사용 가능&lt;/li&gt;
&lt;li&gt;모든 경로를 다 열지 않고 특정 포트만 보안 그룹을 통해 연다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;aws-ec2elastic-cloud-computer&#34;&gt;AWS EC2(Elastic Cloud Computer)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;UTM을 통해 VM을 생성하던 것과 비슷한 구조&lt;/li&gt;
&lt;li&gt;CPU, Memory, 저장소 용량 등을 미리 정하고 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;lbload-balancer&#34;&gt;LB(Load Balancer)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AWS에서 네트워크 트래픽을 여러 대상으로 분산시켜 가용성과 탄력성을 높이는 서비스&lt;/li&gt;
&lt;li&gt;ALB(Application Load Balance)
&lt;ul&gt;
&lt;li&gt;HTTP 및 HTTPS 트래픽에 최적화된 7 단계 로드 밸런서&lt;/li&gt;
&lt;li&gt;CloudWatch와 통합되어 다양한 지표와 로그 모니터링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLB(Network Load Balancer)
&lt;ul&gt;
&lt;li&gt;고성능을 요구하는 TCP, UDP 및 TLS 트래픽에 최적화된 4계층 로드 밸런서&lt;/li&gt;
&lt;li&gt;매우 낮은 지연 시간, 고가용성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CLB(Classic Load Balancer)
&lt;ul&gt;
&lt;li&gt;구형 로드 밸런서로 4계층 + 7계층 로드 밸런서&lt;/li&gt;
&lt;li&gt;설정이 간단하고 직관적&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;실습&#34;&gt;실습
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;LB 생성 순서&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VPC 생성&lt;/li&gt;
&lt;li&gt;서브넷 생성(여러개)&lt;/li&gt;
&lt;li&gt;공통 보안 그룹 생성&lt;/li&gt;
&lt;li&gt;인터넷 게이트웨이 생성&lt;/li&gt;
&lt;li&gt;nat 게이트웨이 생성&lt;/li&gt;
&lt;li&gt;인스턴스 생성(여러개)&lt;/li&gt;
&lt;li&gt;라우팅 테이블 생성(public, private)&lt;/li&gt;
&lt;li&gt;LB 생성
&lt;ul&gt;
&lt;li&gt;타겟 그룹 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 양쪽 서버에서 똑같이 진행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 퍼블릭 서버 접속&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -i &amp;lt;key 파일 명&amp;gt; &amp;lt;OS 명&amp;gt;@&amp;lt;ip 주소&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 파이썬 실행을 위한 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;yum&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;yum&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; install -y python3-flask
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 파이썬 파일 작성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vi app.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 파일 실행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo python3 app.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# LB DNS를 활용해 접근&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# private 접근 하기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# public 서버에 접근 한 후 tem 파일 복사 후 파일 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vi key.tem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# private 접속 - 같은 네트워크 대역이라 접속이 가능하다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -i key.tem &amp;lt;OS&amp;gt;@&amp;lt;IPv4&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# private 접속 후 apt(yum) update&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 인터넷 연결이 없기 때문에 update 되지 않음&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;yum&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# NAT 연결 후 인터넷 연결 테스트&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;yum&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>네트워크 복습</title>
        <link>https://choiseungwoo98.github.io/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%B3%B5%EC%8A%B5/</link>
        <pubDate>Sat, 13 Jul 2024 22:42:04 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%B3%B5%EC%8A%B5/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 주말이라 여태까지 배운 네트워크에 대해&lt;br&gt;
정리하면서 복습을 진행해보고자 한다.&lt;br&gt;
다시 기억하기 위해 화이팅!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;네트워크&#34;&gt;네트워크
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;둘 이상의 컴퓨터와 연결하는 링크의 조합&lt;/li&gt;
&lt;li&gt;물리적 네트워크, 논리적 네트워크 형성
&lt;ul&gt;
&lt;li&gt;물리적 네트워크 : 어댑터, 케이블, 전화선&lt;/li&gt;
&lt;li&gt;논리적 네트워크 : 소프트웨어, 개념 모델&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;osi-7-4-layer&#34;&gt;OSI 7, 4 Layer
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;osiopen-system-interconnection--개방형-시스템-상호-연결&#34;&gt;OSI(Open System Interconnection : 개방형 시스템 상호 연결)
&lt;/h4&gt;&lt;p&gt;다양한 통신 시스템이 통신 할 수 있도록 국제 표준화 기구에서 만든 개념 모델&lt;/p&gt;
&lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/osi_7_layers.png&#34;&gt;
&lt;h4 id=&#34;osi-7-layer&#34;&gt;OSI 7 Layer
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;응용 프로그램 계층(Application Layer) : 사용자가 사용하는 응용 프로그램과 인터페이스 제공&lt;/li&gt;
&lt;li&gt;프레젠테이션 계층(Presentation Layer) : 데이터 형식 변환 밑 표준화
&lt;ul&gt;
&lt;li&gt;데이터 형식 변환 : 컴퓨터 시스템 간 데이터 송수신 시 공통된 형식으로 변환(Ex. 이미자나 동영상 같은 파일을 보낼 때 컴퓨터가 이해할 수 있도록 변환)&lt;/li&gt;
&lt;li&gt;데이터 암호화 : 데이터를 안전하게 전송하기 위해 암호화 진행(Ex. 애플리케이션 내 암호화(PDF, Word 등), 파일 암호화(Zip 압축 시 암호 설정))&lt;/li&gt;
&lt;li&gt;데이터 압축 : 데이터의 효율적인 전송을 위해 압축&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세션 계층(Session Layer) : 두 컴퓨터 간의 통신이 원할하기 위한 설정, 유지, 관리를 도와주며 동기화를 보장하기 때문에 효율성과 안정성이 보장된다.
&lt;ul&gt;
&lt;li&gt;동기화 : 데이터 전송 중 오류가 발생하거나 중단된 경우 재시작 할 수 있는 지점 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전송 계층(Transport Layer) : 데이터를 신뢰성 있게 전송, 속도 조절, 데이터가 손실되지 않도록 하는 중요한 역할
&lt;ul&gt;
&lt;li&gt;데이터 분할 및 재조립 : 큰 데이터 전송 시 작은 조각으로 나눈 후 수신자가 복원&lt;/li&gt;
&lt;li&gt;데이터 전송의 신뢰성 : 데이터가 손실되거나 손상되지 않고 정확히 도착했는지 확인&lt;/li&gt;
&lt;li&gt;흐름 제어 : 데이터를 너무 빠르게 보내서 수신자가 처리하지 못하는 상황을 방지하기 위해 속도 조절&lt;/li&gt;
&lt;li&gt;혼잡 제어 : 네트워크 혼잡 시 데이터 전송 속도를 조절해 혼잡을 줄인다.&lt;/li&gt;
&lt;li&gt;TCP : 신뢰성 있는 전송 보장(Ex. 웹페이지 로드, 이메일 전송 등), UDP : 빠른 데이터 전송 시 사용(Ex. 실시간 스트리밍, 게임 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네트워크 계층(Network Layer) : 데이터를 가장 효율적으로 전달, 패킷(데이터 조각)을 주고 받으며 라우팅을 담당
&lt;ul&gt;
&lt;li&gt;라우팅(Routing) : 데이터가 전송될 때 최적의 경로를 찾는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터 링크 계층(Data Link Layer) : 네트워크 장비간에 데이터 송수신 과정에 데이터 오류를 검출하고 수정하는 역할, 물리적 네트워크(이더넷, Wi-Fi)를 통해 올바르게 전달 될 수 있도록 함&lt;/li&gt;
&lt;li&gt;물리 계층(Physical Layer) : 실제 물리적인 매체를 통해 데이터가 전기적 혹은 광신호 형태로 전송되는 과정을 담당
&lt;ul&gt;
&lt;li&gt;물리적 연결 : 케이블, 스위치, 허브 등의 물리적인 장비 연결&lt;/li&gt;
&lt;li&gt;전송 매체 : 구리선 케이블, 광섬유, 무선 주파수 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;osi-4-layer&#34;&gt;OSI 4 Layer
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;단계가 많고 복잡한 구조를 갖고 있어 인터넷 서비스에 적합안 4계층 모델이 나왔다.&lt;/li&gt;
&lt;li&gt;응용 계층(Application Layer) : 사용자와 직접 상호작용 하는 애플리케이션 서비스 제공&lt;/li&gt;
&lt;li&gt;전송 계층(Transport Layer) :데이터 전송의 신뢰성과 순서 보장(TCP, UDP Protocol)&lt;/li&gt;
&lt;li&gt;인터넷 계층(Internet Layer) : 데이터를 패킷 단위로 나누고 목적지 IP 주소를 통해 경로 결정 후 전달&lt;/li&gt;
&lt;li&gt;네트워크 인터페이스 계층(Network Interface Layer) : 물리적 네트워크 연결 및 데이터 전송 담당&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/osi7_osi4.png&#34;&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;계층별-장비&#34;&gt;계층별 장비
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;리피터repeater&#34;&gt;리피터(Repeater)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;물리 계층&lt;/li&gt;
&lt;li&gt;신호를 멀리 보내기 위한 증폭 장치&lt;/li&gt;
&lt;li&gt;신호 감쇠 방지 및 전송 거리 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;허브hub&#34;&gt;허브(Hub)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;데이터 링크 계층&lt;/li&gt;
&lt;li&gt;여러 장치를 하나의 네트워크로 연결시켜주는 장치&lt;/li&gt;
&lt;li&gt;여러 컴퓨터 연결하지만 데이터 충돌 가능성이 있으며 Mac 주소를 인식하지 못한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;브리지bridge&#34;&gt;브리지(Bridge)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;데이터 링크 계층&lt;/li&gt;
&lt;li&gt;두 개의 세그먼트를 연결 및 Mac 주소를 사용해 데이터 프레임 필터링&lt;/li&gt;
&lt;li&gt;세그먼트 간의 트래픽 필터링 및 브로드캐스트 도메인 분할하려 충돌 감소&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;스위치&#34;&gt;스위치
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;데이터 링크 계층&lt;/li&gt;
&lt;li&gt;여러 장치를 연결하고 Mac 주소를 사용하여 프레임을 특정 포트로 전송&lt;/li&gt;
&lt;li&gt;각 포트에 연결된 장치간 통신을 효율적으로 관리 및 충돌 도메인 분리해 성능 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;라우터&#34;&gt;라우터
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;네트워크 계층&lt;/li&gt;
&lt;li&gt;다른 네트워크 간 데이터 전송, IP주소를 사용해 경로 결정&lt;/li&gt;
&lt;li&gt;여러 네트워크를 연결해 데이터 패킷을 올바른 경로로 라우팅, 논리적 주소(IP 주소)를 기반으로 네트워크 트래픽 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;https와-ssl-tls&#34;&gt;HTTPs와 SSL, TLS
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;httpshypertext-transfer-protocol-over-secure-socket-layer&#34;&gt;HTTPs(Hypertext Transfer Protocol Over Secure Socket Layer)
&lt;/h4&gt;&lt;p&gt;HTTP는 암호화 없이 데이터를 전송하기 때문에 보안이 취약해 보안하기 위해 탄생&lt;/p&gt;
&lt;h4 id=&#34;sslsecure-sockets-layer&#34;&gt;SSL(Secure Sockets Layer)
&lt;/h4&gt;&lt;p&gt;인터넷 통신의 보안을 강화하기 위해 사용되는 암호화 프로토콜로 서버간 전송되는 데이트를 암호화해 제 3자가 도청 및 변조하지 못하도록 한 것&lt;br&gt;
HTTP가 SSL을 사용해 HTTPs가 되었다.&lt;/p&gt;
&lt;h4 id=&#34;tlstransport-layer-security&#34;&gt;TLS(Transport Layer Security)
&lt;/h4&gt;&lt;p&gt;SSL의 후속 버전으로 인터넷 통신의 보안을 강화하기 위해 사용되는 암호화 프로토콜(사실상 SSL이랑 같음)&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;네트워크-용어-정리&#34;&gt;네트워크 용어 정리
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;LAN(근거리 통신망) : 허브, 스위치로 연결하는 소큐모 네트워크, 주로 컴퓨터 장치와 연결된 네트워크를 말한다.&lt;/li&gt;
&lt;li&gt;MAN(대도시 통신망) : 도시와 도시의 통신망을 뜻하며 2개 이상의 LAN을 라우터, 브릿지로 연결, 고속 데이터 전송을 지원하며 통신사나 공공기관에서 운영한다.&lt;/li&gt;
&lt;li&gt;WAN(국가간 통신망) : 광역 네트워크로 지리적으로 넓은 영역에 걸쳐 여러 LAN, MAN을 연결하는 네트워크, 주로 Internet이라고 한다.&lt;/li&gt;
&lt;li&gt;WLAN(무선 근거리 통신망) : 라디오, 마이크로파(무선 랜 카드 등)를 이용해 데이터를 전송&lt;/li&gt;
&lt;li&gt;VPN(사설 통신망) : 가상 사설망으로 공중 네트워크를 암호화된 방법으로 접속할 수 있는 기술&lt;/li&gt;
&lt;li&gt;VPC : 퍼블릭 클라우드 환경에서 사용할 수 있는 고객 전용 사설 네트워크&lt;/li&gt;
&lt;li&gt;NAT : Private IP 주소로 외부와 통신할 수 없어 Public IP 주소로 변환(Ex : 공유기)&lt;/li&gt;
&lt;li&gt;IP : 네트워크 상의 장치들을 식별하는 고유한 주소&lt;/li&gt;
&lt;li&gt;Ethernet : 컴퓨터나 다른 장치들이 데이터를 물리적으로 주고 받을 수 있도록 연결하는 방식&lt;/li&gt;
&lt;li&gt;서브넷 : 큰 네트워크를 작은 네트워크로 나누는 것&lt;/li&gt;
&lt;li&gt;서브넷팅 : 네트워크를 서브넷으로 나누는 과정&lt;/li&gt;
&lt;li&gt;서브넷마스크 : IP 주소를 서브넷으로 나누기 위한 도구&lt;/li&gt;
&lt;li&gt;라우터 : 둘 이상의 패킷 전환 네트워크 또는 서브네트워크를 연결하는 장치, 네트워크 계층에서 동작한다.&lt;/li&gt;
&lt;li&gt;라우팅 : 다양한 네트워크 간에 데이터를 전송하는 역할, 네트워크에서 패킷을 받아 목적지까지 최적의 경로를 결정 후 데이터 전달&lt;/li&gt;
&lt;li&gt;패킷 : 네트워크에서 출발지와 목적지간에 라우팅되는 데이터 단위&lt;/li&gt;
&lt;li&gt;포트 : 소프트웨어 기반이며 OS에서 관리하는 네트워크 연결이 시작되고 끝나는 가상의 지점&lt;/li&gt;
&lt;li&gt;프로토콜 : 데이터 교환 방식을 정의하는 규칙 체계&lt;/li&gt;
&lt;li&gt;CIDR : 데이터 라우팅 효율성을 향상시키는 IP주소 할당 방법&lt;/li&gt;
&lt;li&gt;루프백 : localhost로 알려져 있으며 자신의 ip 스택을 통해 네트워크 인터페이스로 전송된 데이터를 동일한 시스템으로 다시 전송&lt;/li&gt;
&lt;li&gt;멀티캐스트 : 하나의 송신자가 여러 수신자에게 동시에 데이터를 전송하는 방식 주로 스트리밍, 주식 거래 등 대규모 수신자에게 동일한 데이터를 효율적으로 전달해야 하는 경우&lt;/li&gt;
&lt;li&gt;포트포워딩 : 외부 네트워크에서 특정 포트로 들어오는 트래필을 내부 네트워크의 특정 IP 주소와 포트로 전달하는 네트워크 설정&lt;/li&gt;
&lt;li&gt;보수표현법 : 컴퓨터에서 음수를 표현하는 데 사용하는 방법, 1의 보수는 반전(1010 -&amp;gt; 0101), 2의 보수는 반전 후 1을 더함(1010 -&amp;gt; 0110)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>네트워크 도메인, HTTPs</title>
        <link>https://choiseungwoo98.github.io/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%8F%84%EB%A9%94%EC%9D%B8-https/</link>
        <pubDate>Sat, 13 Jul 2024 16:42:04 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%8F%84%EB%A9%94%EC%9D%B8-https/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 주말이라 강좌로 올라와있는&lt;br&gt;
네트워크 개념 잡기를 수강하고 정리하고자 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;도메인&#34;&gt;도메인
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;IP는 숫자로만 이루어져 기억하기 어렵기 때문에 이름을 부여한 것&lt;/p&gt;
&lt;h4 id=&#34;ip&#34;&gt;IP
&lt;/h4&gt;&lt;p&gt;인터넷에 연결되어 있는 장치(컴퓨터, 스마트폰 등)을 식별할 수 있는 주소(Ex. 172.217.161.206)&lt;br&gt;
웹사이트 ip 주소 가져오는 방법 : nslookup google.com&lt;/p&gt;
&lt;h4 id=&#34;네임-스페이스&#34;&gt;네임 스페이스
&lt;/h4&gt;&lt;p&gt;도메인 이름을 계층적으로 구성하여 네트워크 상의 자원을 고유하게 식별 및 관리&lt;/p&gt;
&lt;h4 id=&#34;포트포워딩&#34;&gt;포트포워딩
&lt;/h4&gt;&lt;p&gt;외부 네트워크에서 특정 포트를 통해 들어오는 트래픽을 내부 네트워크의 특정 장치나 포트로 전달하는 네트워크 설정&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;https-ssl&#34;&gt;HTTPs, SSL
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;httpshypertext-transfer-protocol-over-secure-socket-layer&#34;&gt;HTTPs(Hypertext Transfer Protocol Over Secure Socket Layer)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;HTTP는 암호화되지 않은 방법으로 데이터를 전송하기 때문에 보안이 매우 취약하다. 이것을 보안하기 위해 탄생한 것
&lt;ul&gt;
&lt;li&gt;HTTP : HTML을 전송하기 위한 통신 규약
&lt;ul&gt;
&lt;li&gt;Hypertext : 문서와 문서가 링크로 연결 체계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPs : 보안이 강화된 HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sslsecure-sockets-layer&#34;&gt;SSL(Secure Sockets Layer)
&lt;/h4&gt;&lt;p&gt;인터넷 통신의 보안을 강화하기 위해 사용되는 암호화 프로토콜로 서버간 전송되는 데이트를 암호화해 제 3자가 도청 및 변조하지 못하도록 한 것&lt;br&gt;
HTTP가 SSL을 사용해 HTTPs가 되었다.&lt;/p&gt;
&lt;h4 id=&#34;tlstransport-layer-security&#34;&gt;TLS(Transport Layer Security)
&lt;/h4&gt;&lt;p&gt;SSL의 후속 버전으로 인터넷 통신의 보안을 강화하기 위해 사용되는 암호화 프로토콜(사실상 SSL이랑 같음)&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;https-ssl-디지털-인증서&#34;&gt;HTTPs, SSL 디지털 인증서
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;대칭키&#34;&gt;대칭키
&lt;/h4&gt;&lt;p&gt;암복호화에 동일한 키를 사용하는 방식으로 송수신자자가 동일한 키를 공유해 통신의 기밀성을 유지한다.&lt;br&gt;
대칭키를 수신자에게 전송할 때 대칭키가 유출될 수도 있는 치명적인 단점이 있다.&lt;/p&gt;
&lt;h4 id=&#34;공개키&#34;&gt;공개키
&lt;/h4&gt;&lt;p&gt;비대칭 암호화 방식 중 한 종류로 두 개의 키(공개키, 비밀키)를 사용해 데이터 암복호화 수행&lt;br&gt;
공개키로 암호화 후 전송하면 수신자는 비밀키로 복호화한다.&lt;br&gt;
반대로 비밀키로 암호화 하면 공개키로 복호화를 해야하는데 이것은 공개키를 갖고 있는 사람 모두가 복호화 할 수 있어 암호화에 의미가 없지만&lt;br&gt;
비밀키를 갖고 있는 사람이 암호화 했다는 것을 검증하는 것이라 신원을 확인 할 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;ssl-통신-과정&#34;&gt;SSL 통신 과정
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;악수(Handshake) : 클라이언트와 서버가 안전한 통신을 설정하기 위해 필요한 매개변수를 협상하는 과정
&lt;ul&gt;
&lt;li&gt;클라이언트 헬로 : 클라이언트가 서버 접속을 시도하고 메시지를 보낸다.(SSL/TLS 버전, 암호화 방식 등)&lt;/li&gt;
&lt;li&gt;서버 헬로 : 메시지 수신 및 응답(SSL/TLS 버전, 암호화 방식 등)&lt;/li&gt;
&lt;li&gt;서버 인증 및 키 교환 : 서버가 클라이언트에게 인증서를 보낸다.(CA에서 발급된 공개키를 포함, 메시지도 보낼 수 있다.)&lt;/li&gt;
&lt;li&gt;클라이언트 인증 및 키 교환 : 서버 인증서 검증, 프리마스터 시크릿을 생성하고 서버 공개키를 암호화하여 서버로 보낸다.
&lt;ul&gt;
&lt;li&gt;프리마스터 시크릿 :&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세션 키 생성 : 자신의 무작위 데이터와 프리마스터 시크릿을 사용한 동일한 세션키 생성&lt;/li&gt;
&lt;li&gt;암호화 통신 시작 : 클라이 언트는 핸드셰이크 완료라는 메시지를 보내고 서버는 핸드셰이크 완료 메시지로 응답(메시지는 세션키로 암호화 된다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터 전송(Data Transfer) : 클리이언트와 서버는 세션 키를 사용하여 데이터를 암호화하여 안전하게 주고 받을 수 있다.&lt;/li&gt;
&lt;li&gt;세션 종료(Session Termination) : 통신이 끝나면 클라이언트와 서버는 SSL 연결 종료
&lt;ul&gt;
&lt;li&gt;종료 요청 : 클라이언트 또는 서버가 연결을 종료하고자 하면 종료 요청 메시지를 보낸다.(메시지는 세션키로 암호화 된다.)&lt;/li&gt;
&lt;li&gt;연결 종료 : 연결을 정상적으로 종료 후 사용된 세션 키와 관련 데이터 폐기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Docker 이론</title>
        <link>https://choiseungwoo98.github.io/p/docker-%EC%9D%B4%EB%A1%A0/</link>
        <pubDate>Fri, 12 Jul 2024 14:25:27 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/docker-%EC%9D%B4%EB%A1%A0/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 실습보다 이론위주의 수업이었다.&lt;br&gt;
도커 보안에 대해 간단하게 설명하고 들었던 것들을 정리하고자 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-security&#34;&gt;Docker Security
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;rootless-mode&#34;&gt;Rootless Mode
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;Docker를 실행할 때 관리자 권한 없이 실행시키는 모드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;시스템 전체에 대한 권한 없이 사용할 수 있어 잠재적 보안 위험을 낮출 수 있다.&lt;/li&gt;
&lt;li&gt;모두 일반 사용자 권한으로 시스템 자원에 대한 접근 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linux-capabilities&#34;&gt;Linux Capabilities
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;리눅스 커널에서 제공하는 기능으로 시스템 관리 권한을 세분화하여 특정 작업에 대해 권한을 부여할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;컨테이너 생성 시 필요한 권한만 부여해 보안성 향상&lt;/li&gt;
&lt;li&gt;Privileged : 컨테이너가 호스트 시스템의 모든 권한을 갖고 있음.(보안 취약)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;share-namespace&#34;&gt;Share Namespace
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;리눅스 커널의 기능으로 프로세스와 자원(PID, 네트워크, IPC 등)을 격리 시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;Docker에서는 컨테이너 마다 별도의 네임스페이스를 할당해 다른 컨테이너나 호스트와 격리한다.&lt;/li&gt;
&lt;li&gt;PID Namespace : 호스트의 프로세스를 볼 수 있음, 프로세스 ID를 격리하여 각 컨테이너가 다른 프로세스를 보지 못하게 한다.&lt;/li&gt;
&lt;li&gt;IPC Namespace : 호스트의 , 인터이페스 통신을 격리한다.&lt;/li&gt;
&lt;li&gt;Network Namespace : 호스트의 , 네트워크 인터페이스를 격리해 컨테이너 간 네트워크 충돌을 방지한다.&lt;/li&gt;
&lt;li&gt;추가적인 내용 &lt;a class=&#34;link&#34; href=&#34;https://choiseungwoo98.github.io/linux_detail.html#namespace&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;리눅스 심화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;security-layer&#34;&gt;Security Layer
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;리눅스 커널에서 제공하는 보안 메커니즘으로 Docker 이미지에서 보안 패치를 적용한 레이어이다.&lt;/li&gt;
&lt;li&gt;시스템 호출 제어와 프로그램 동작 제한을 통해 보안을 강화하는데 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;Docker 이미지는 여러 레이어로 구성되며, 취약점 발견 시 해당 레이어만 업데이트 해 보안성 유지&lt;/li&gt;
&lt;li&gt;이미지 전체를 다시 빌드할 필요 없이 특정 레이어만 업데이트 할 수 있어 효율적이다.&lt;/li&gt;
&lt;li&gt;AppArmor : 리눅스 커널에서 제공하는 보안 모듈로 애플리케이션 접근할 수 있는 자원을 제어(강제적 접근 제한 chmod, chown, setuid 등보다 더 로우한 거)&lt;/li&gt;
&lt;li&gt;Seccomp : 리눅스 커널에서 제공하는 보안 기능으로 시스템 콜을 필터링해 애플리케이션을 실행할 수 있는 시스템 콜 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;privileged-container와-unprivileged-container&#34;&gt;Privileged Container와 UnPrivileged Container
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;privileged-container&#34;&gt;Privileged Container
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;컨테이너는 Host에서 독립된 namespace 영역을 가지고 있어 시스템의 주요자원에 접근할 수 있는 권한이 없음&lt;/li&gt;
&lt;li&gt;Privileged 옵션으로 Container를 생성하면 Host의 리눅스 커널 기능을 모두 사용할 수 있고 모든 Host 주요 자원에 접근할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;unprivileged-container&#34;&gt;UnPrivileged Container
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;시스템 주요 자원에 접근할 수 있는 권한이 부족해 네트워크 인터페이스 활성화/비활성화나 IP주소의 변경 불가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;capabilities&#34;&gt;Capabilities
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;모든 권한을 열어주게 되면, 보안적으로 위험할 수 있어 세분화하여 권한을 관리&lt;/li&gt;
&lt;li&gt;CAP_NET_ADMIN : 네트워크설정변경&lt;/li&gt;
&lt;li&gt;CAP_SYS_ADMIN : 시스템관리작업&lt;/li&gt;
&lt;li&gt;CAP_SYS_PTRACE : 다른프로세스추적&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;reverse-shell&#34;&gt;Reverse Shell
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;공격자가 타겟 시스템에 접속하여 원격으로 명령을 실행할 수 있도록 하는 공격 기법 중 하나&lt;/li&gt;
&lt;li&gt;외부에서 내부로 접속을 가능하게 해 방화벽을 우회하는 데 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;작동-원리&#34;&gt;작동 원리
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;공격자 준비 : 자신의 시스템에서 특정 포트를 열어 리스닝 상태로 대기(공격자 시스템)&lt;/li&gt;
&lt;li&gt;타겟 시스템 접속 : 타겟 시스템에 악성 코드 또는 스크립트를 실행시켜, 시스템으로 연결(타겟 시스템에서 공격 시스템 연결)&lt;/li&gt;
&lt;li&gt;연결 수립 : 연결을 통해 타겟 시스템에서 명령을 실행할 수 있는 쉘에 접근&lt;/li&gt;
&lt;li&gt;명령 실행 : 공격자가 타겟 시스템에서 원하는 명령을 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;방어-방법&#34;&gt;방어 방법
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;방화벽 설정 강화 : 내부에서 외부로의 불필요한 연결 제한, 중요한 시스템에서는 허용된 IP와 포트만 외부로 연결 설정&lt;/li&gt;
&lt;li&gt;네트워크 모니터링 : 이상한 네트워크 트래픽을 감지하기 위해 네트워크 트래픽을 지속적으로 모니터링&lt;/li&gt;
&lt;li&gt;IDS/IPS 사용 : 침입 탐지 시스템(IDS)이나 침입 방지 시스템(IPS)을 사용하여 의심스러운 활동을 실시간으로 탐지 및 차단합니다.&lt;/li&gt;
&lt;li&gt;보안 패치 적용 : 시스템과 애플리케이션의 보안 패치를 최신 상태로 유지하여 악성 코드가 실행될 수 있는 취약점을 최소화합니다.&lt;/li&gt;
&lt;li&gt;사용자 교육 : 소셜 엔지니어링 공격을 통해 리버스 셸이 설치될 수 있으므로, 사용자에게 피싱 이메일과 같은 공격 방법에 대한 교육 실시&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;linux-root-디렉토리-정보&#34;&gt;Linux root 디렉토리 정보
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;/proc : 시스템 상태, 하드웨어 정보, 프로세스 정보 등이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/proc/cpuinfo : CPU 정보&lt;/li&gt;
&lt;li&gt;/proc/meminfo : 메모리 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/etc : 시스템 및 애플리케이션의 설정 파일들이 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/passwd : 사용자 계정 정보&lt;/li&gt;
&lt;li&gt;/etc/fstab : 파일 시스템 마운트 정보&lt;/li&gt;
&lt;li&gt;/etc/hosts : 호스트명과 IP 매핑 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/bin : 시스템 부팅과 기본 운영에 필요한 실행 파일들이 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ls, cp, mv, rm 등의 명령어 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/sbin : 시스템 관리와 관련된 명령어들이 위치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reboot, ifconfig, iptables 등의 명령어가 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/usr : 사용자 애플리케이션, 라이브러리, 헤더 파일 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/usr/bin : 일반 사용자 명령어&lt;/li&gt;
&lt;li&gt;/usr/sbin : 시스템 관리자 명령어 위치&lt;/li&gt;
&lt;li&gt;/usr/lib : 라이브러리 파일 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/var : 로그 파일, 스풀 디렉토리, 캐시 파일 등이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/var/log : 로그 파일&lt;/li&gt;
&lt;li&gt;/var/spool : 프린터와 메일 스풀 파일들이 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/home : 각 사용자별 개인 파일과 설정 파일 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 user1의 홈 디렉토리는 /home/user1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/tmp : 시스템 사용 중 임시로 생성되는 파일들이 위치, 시스템 재부팅 시 대부분의 파일이 삭제됨.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/dev : 시스템 하드웨어와의 인터페이스를 제공하는 파일들이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/dev/sda1 : 첫 번째 하드 디스크의 첫 번째 파티션을 나타냄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/lib : 커널 모듈과 공유 라이브러리 파일들이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/lib/modules : 커널 모듈 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Docker_conpose</title>
        <link>https://choiseungwoo98.github.io/p/docker_conpose/</link>
        <pubDate>Thu, 11 Jul 2024 13:13:32 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/docker_conpose/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 docker compose에 대해 배웠습니다.&lt;br&gt;
이론이 많지는 않았지만&lt;br&gt;
앞으로 자주 사용할 것이란 생각이 들어 실습까지 다시 진행하며 복습하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;Docker compose
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;여러 Docker Continer를 정의하고 실행할 수 있도록 도와주는 도구&lt;/li&gt;
&lt;li&gt;docker-compose.yaml 파일을 사용해 서비스, 네트워크, 볼륨 등을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;기능&#34;&gt;기능
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;멀티 컨테이너 애플리케이션 정의 : docker-compose-yaml 파일을 통해 여러 컨테이너 정의&lt;/li&gt;
&lt;li&gt;서비스 간 의존성 관리 : 여러 컨테이너 간의 의존성을 정의하고, 필요한 순서에 따라 컨테이너 시작&lt;/li&gt;
&lt;li&gt;일관된 개발 환경 제공 : 동일한 docker-compose.yaml 파일을 사용해 로컬 개발환경과 프로덕션 환경을 일관되게 설정&lt;/li&gt;
&lt;li&gt;간편한 실행 및 종료 : docker compose up / down을 사용해 한번에 시작 및 종료 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;기능-설명&#34;&gt;기능 설명
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;build
&lt;ul&gt;
&lt;li&gt;context : Dockerfile이 있는 디렉토리 지정&lt;/li&gt;
&lt;li&gt;dockerfile : Dockerfile 경로 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;image : 기존에 존재하는 이미지를 사용할 때 사용할 이미지 지정&lt;/li&gt;
&lt;li&gt;ports : 호스트와 컨테이너 간의 포트 매핑 지정&lt;/li&gt;
&lt;li&gt;environment : 컨테이너 내에서 사용할 환경 변수 지정&lt;/li&gt;
&lt;li&gt;volumes : 호스트와 컨테이너 간의 파일 시스템 마운트를 지정&lt;/li&gt;
&lt;li&gt;depends_on : 컨테이너 간의 의존성 지정(Ex : db 서비스 시작 후 web 서비스 시작)&lt;/li&gt;
&lt;li&gt;networks : 서비스가 연결될 네트워크 지정&lt;/li&gt;
&lt;li&gt;restart : 컨테이너 재시작 정책&lt;/li&gt;
&lt;li&gt;(전역)volumes : 네트워크 정의, 서비스에서 네트워크 사용 전 전역에 정의&lt;/li&gt;
&lt;li&gt;(전역)networks : 서비스에서 네트워크 사용 전 전역에 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;실습&#34;&gt;실습
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 이미지를 내려받는다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull &amp;lt;이미지명&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Docker 이미지를 백그라운드에 무한히 실행되는 컨테이너 시작&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d &amp;lt;이미지명&amp;gt; sleep infinity
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 실행한 이미지 접속&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;lt;컨테이너명&amp;gt; /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Docker 내부 파일 로컬에 복사&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker cp &amp;lt;컨테이너명&amp;gt;:/&amp;lt;복사할 파일명&amp;gt; &amp;lt;복사할 위치&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Docker compose를 백그라운드로 실행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose -f &amp;lt;실행할 yaml명&amp;gt; up -d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 현재 디렉토리의 Docker-compose.yaml로 정의된 모든 컨테이너 표시&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose ps -a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Docker compose 종료&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose down
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Dockerfile 기초</title>
        <link>https://choiseungwoo98.github.io/p/dockerfile-%EA%B8%B0%EC%B4%88/</link>
        <pubDate>Wed, 10 Jul 2024 16:16:44 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/dockerfile-%EA%B8%B0%EC%B4%88/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제는 도커의 개념과 동작 방식에 대해 정리하였습니다.&lt;br&gt;
오늘은 docker를 실질적으로 사용해보면서 필요한 내용을 정리해보고자 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dockerfile&#34;&gt;Dockerfile
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념&#34;&gt;개념
&lt;/h4&gt;&lt;p&gt;이미지 생성 목적으로 작성되는 파일&lt;/p&gt;
&lt;h4 id=&#34;특징&#34;&gt;특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;환경 일관성 : 개발, 테스트, 운영 등 모든 환경에서 동일한 설정 유지&lt;/li&gt;
&lt;li&gt;이식성 : 다양한 운영체제에서 동일하게 동작&lt;/li&gt;
&lt;li&gt;자동화 : CI/CD 파이프라인 과정에서 빌드 및 배포 과정 자동화&lt;/li&gt;
&lt;li&gt;반복 가능성 : 동일한 방식으로 이미지를 빌드해 반복 가능한 환경 제공&lt;/li&gt;
&lt;li&gt;확장성 : 마이크로 아키텍처를 이용해 쉽게 확장&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;지시자&#34;&gt;지시자
&lt;/h4&gt;&lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/docker/dockerfile-지시자.png&#34;&gt;
&lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/docker/dockerfile-지시자2.png&#34;&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;dockerfile-만들기&#34;&gt;Dockerfile 만들기
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;이미지-크기-최적화&#34;&gt;이미지 크기 최적화
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;멀티 스테이지 빌드 사용 : 불필요한 빌드 종속성 제거&lt;/li&gt;
&lt;li&gt;불필요한 파일 제외 : .dockerignore을 사용해 빌드에 포함되지 않아도 되는 파일 제외&lt;/li&gt;
&lt;li&gt;불필요한 패키지 설치 X&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; golang:1.16 as builder WORKDIR /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; go build -o myapp&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; alpine-latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; --from&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;builder /app/myapp . CMD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./myapp&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;레이어-캐싱-활용&#34;&gt;레이어 캐싱 활용
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;변경이 적은 레이어 위에 변경이 잦은 레이어 위치 : 자주 변경되는 파일보다 덜 변경되는 파일을 추가해 빌드 캐시 최대한 활용&lt;/li&gt;
&lt;li&gt;OverayFS(Upperdir, Lowerdir, Workdir, Merged)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; package*.json ./ RUN npm install&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;보안-고려&#34;&gt;보안 고려
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;최소 권한 원칙 : 루트 권한이 아닌 사용자로 애플리케이션 실행&lt;/li&gt;
&lt;li&gt;최신 베이스 이미지 사용 : 보안 패치가 적용된 상태 유지&lt;/li&gt;
&lt;li&gt;비밀 정보 제외 : 환경 변수나 소스 코드에 비밀 정보가 포함되지 않도록 주의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;성능-최적화&#34;&gt;성능 최적화
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;적절한 베이스 이미지 선택 : 필요에 맞는 가장 작은 베이스 이미지 선택&lt;/li&gt;
&lt;li&gt;의존성 최소화 : 필요한 라이브러리, 도구만 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;유지-관리-용이성&#34;&gt;유지 관리 용이성
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;명확하고 일관된 Dockerfile 작성 : 주석 추가 및 지사자의 목적을 설명하고 일관된 코드 스타일 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 베이스 이미지 설정&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; node:14&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 작업 디렉토리 설정&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 의존성 설치&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; package*.json ./ RUN npm install&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 애플리케이션 소스 코드 복사&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 컨테이너 시작 명령어&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;npm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;유지-관리-용이성-1&#34;&gt;유지 관리 용이성
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;명확하고 일관된 Dockerfile 작성 : 주석 추가 및 지사자의 목적을 설명하고 일관된 코드 스타일 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 베이스 이미지 설정&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; node:14&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 작업 디렉토리 설정&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 의존성 설치&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; package*.json ./ RUN npm install&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 애플리케이션 소스 코드 복사&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 컨테이너 시작 명령어&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;npm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;환경-변수-사용&#34;&gt;환경 변수 사용
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ENV 지시자나 ARG 지시자를 사용해 환경 변수 설정
&lt;ul&gt;
&lt;li&gt;ARG
&lt;ul&gt;
&lt;li&gt;Docker build 시간에 사용되는 변수로 빌드 할 때만 유효하며 컨테이너가 실행될 때는 사용 불가&lt;/li&gt;
&lt;li&gt;사용방법
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; alpine&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ARG&lt;/span&gt; MY_ARG&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Build-time argument: &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MY_ARG&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MY_ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MY_ARG&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ARG&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DEFAULT_ARG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default_value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Default argument: &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DEFAULT_ARG&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;```&lt;/span&gt;shell&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;docker build --build-arg &lt;span class=&#34;nv&#34;&gt;MY_ARG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my_value -t my_image .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 빌드할 때 MY_ARG의 값을 넘겨준다.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;docker build --build-arg &lt;span class=&#34;nv&#34;&gt;MY_ARG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my_value -t my_image .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ENV : 컨테이너 실행 시간에 사용할 환경 변수
&lt;ul&gt;
&lt;li&gt;사용방법
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# ENV 사용 예시&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; alpine&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MY_ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my_value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Environment variable: &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MY_ENV&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MY_ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;another_value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Overridden environment variable: &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MY_ENV&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -e &lt;span class=&#34;nv&#34;&gt;MY_ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;runtime_value my_image
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;dorkerfile-deepdive&#34;&gt;Dorkerfile DeepDive
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;multi-stage-build&#34;&gt;Multi-Stage Build
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Dockerfile 작성 시 여러 단계를 사용해 이미지를 빌드하는 기법&lt;/li&gt;
&lt;li&gt;빌드에만 필요한 툴, 라이브러리 또는 불필요한 파일, 도구는 최종 이미지에서 제거해 보안 강화 및 크기 감소 효과&lt;/li&gt;
&lt;li&gt;여러 단계로 빌드를 나누어 관리 용이&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Go 언어 이미지를 기반으로 설정 (golang:1.16)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; golang:1.16 AS builder&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 작업 디렉토리 설정 (/app).&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 소스 코드 복사.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 애플리케이션 빌드 (go build).&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; go build -o myapp .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 경량의 Alpine Linux 이미지를 기반으로 설정&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; alpine:latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 작업 디렉토리 설정 (/app).&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# builder 스테이지에서 빌드된 애플리케이션 복사.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; --from&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;builder /app/myapp .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Expose port 8080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 8080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 애플리케이션 실행 (CMD [&amp;#34;./myapp&amp;#34;]).&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./myapp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;layer-caching&#34;&gt;Layer Caching
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;이전에 빌드된 레이어를 캐시하여 빌드 속도 향상시키는 기술&lt;/li&gt;
&lt;li&gt;각 레이어가 해시를 사용해 동일한 명령어와 결과를 생성하면 이전에 빌드된 레이어 재사용&lt;/li&gt;
&lt;li&gt;Dockerfile에 명령어가 변경되면 그 이후 모든 레이어 다시 빌드&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Node.js 이미지를 기반으로 설정.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; node:14&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#  package.json 파일을 복사. 이 레이어는 종속성을 설치하는 데 사용됩니다.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; package.json /app/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 작업 디렉토리 설정 (/app).&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 종속성을 설치. package.json이 변경되지 않으면 이 레이어는 캐시됩니다.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; npm install&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 나머지 소스 코드를 복사. 이 명령어가 변경되면 이후 레이어는 다시 빌드됩니다.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . /app&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 애플리케이션을 빌드.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; npm run build&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 애플리케이션 시작&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;npm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;최적화&#34;&gt;최적화
&lt;/h4&gt;&lt;p&gt;이전에 작성해 놓은 부분 참고 &lt;a class=&#34;link&#34; href=&#34;https://choiseungwoo98.github.io/docker_basic.html#%ec%b5%9c%ec%a0%81%ed%99%94-%eb%b0%a9%eb%b2%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker 개론&lt;/a&gt;&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;docker-저장소&#34;&gt;Docker 저장소
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;docker-hub&#34;&gt;Docker Hub
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;이미지 호스팅 서비스 : 개인이 이미지를 만들어 배포 가능, 공식 저장소의 소프트웨어 포함&lt;/li&gt;
&lt;li&gt;Docker Local Registry : 로컬 환경에서 관리 및 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;오늘의-실습&#34;&gt;오늘의 실습
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;dockerfile을 통해 이미지를 만들고 Docker Hub에 repository 생성하기 및 내려받기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 테스트 폴더 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir dockerfile-test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Dockerfile 파일, 간단한 테스트용 Python 파일, 필요한 패키지와 버전을 명시하는 requirements 파일 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;touch Dockerfile app.py requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 파일 내용 수정(상황에 맞게 작성)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat Dockerfile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Docker 로그인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker login
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 이미지 빌드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker -f Dockerfile -t &amp;lt;user-name&amp;gt;/&amp;lt;repo-name&amp;gt; .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 내 레포지토리에 이미지 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker push &amp;lt;user-name&amp;gt;/&amp;lt;repo-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 실행 및 컨테이너 접속&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -it &amp;lt;Container&amp;gt; /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Docker 객체에 대한 자세한 정보 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker inspect &amp;lt;Container_id or name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 이미지 실행 반복적으로&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d &amp;lt;image&amp;gt; sleep infinity
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 실행되고 있는 컨테이너의 모든 아이디 값 가져오기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker ps -q
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 실행되고 있는 컨테이너 전체 종료&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker stop &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker ps -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 생성한 레포지토리에서 이미지 내려받기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull &amp;lt;user-name&amp;gt;/&amp;lt;repo-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Docker 기초</title>
        <link>https://choiseungwoo98.github.io/p/docker-%EA%B8%B0%EC%B4%88/</link>
        <pubDate>Tue, 09 Jul 2024 22:16:44 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/docker-%EA%B8%B0%EC%B4%88/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;기존에 혼자 Docker에 대해 잠깐 공부한 적 있지만 심도있게 다루지는 않았습니다.&lt;br&gt;
카카오 테크 부트캠프를 시작하면서 클라우드 수업을 듣기 시작했고&lt;br&gt;
docker는 매우 중요한 부분이라 생각해 다시 정리하면서 복습하고자 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념&#34;&gt;개념
&lt;/h4&gt;&lt;p&gt;컨테이너 기반의 오픈소스 가상화 플랫폼으로 애플리케이션을 소프트웨어의 실행 환경과 함께 패키징해 손쉽게 배포, 실행 할 수 있도록 도와준다.&lt;/p&gt;
&lt;h4 id=&#34;주요-개념&#34;&gt;주요 개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Image : 애플리케이션과 필요한 모든 종속성(라이브러리, 설정 파일 등)을 포함하는 읽기 전용 템플릿, 컨테이너를 만드는데 사용&lt;/li&gt;
&lt;li&gt;Container : 이미지를 실행한 상태로 격리된 애플리케이션 실행 환경 제공, 독립적으로 실행되며 호스트 시스템 리소스 공유&lt;/li&gt;
&lt;li&gt;Dockerfile : 이미지 정의하는 설정 파일, 이미지를 빌드하는데 필요한 명령어 포함&lt;/li&gt;
&lt;li&gt;DockerHub : Docker 이미지 중앙 저장소로 공개 또는 개인 저장소로 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;동작-방식&#34;&gt;동작 방식
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Docker Daemon : Docker에 핵심 프로세스로 컨테이너 생성 및 관리&lt;/li&gt;
&lt;li&gt;Client : 사용자와 데몬 간의 인터페이스 역할 수행&lt;/li&gt;
&lt;li&gt;이미지 생성 : Dockerfile을 이용해 이미지 생성, 각 명령어는 새로운 레이어 생성&lt;/li&gt;
&lt;li&gt;컨테이너 실행 : 이미지를 사용해 컨테이너 실행, 이미지의 읽기 전용 레이어 위에 쓰기 가능한 레이어 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;최적화-방법&#34;&gt;최적화 방법
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;다단계 빌드 사용 : 여러 단계에 걸쳐 빌드해 중간 산출물을 제거를 통해 불필요한 빌드 단계와 종속성을 제거하여 경량화&lt;/li&gt;
&lt;li&gt;캐시 활용 : Dockerfile 명령어 순서를 최적화하여 빌드 속도 개선&lt;/li&gt;
&lt;li&gt;불필요한 파일 제거 : 이미지에 포함되지 않아도 되는 파일을 .dockerignore 파일에 추가해 경량화&lt;/li&gt;
&lt;li&gt;경량 베이스 이미지 사용 : alpine과 같은 이미지 사용&lt;/li&gt;
&lt;li&gt;컨테이너 리소스 제한 : CPU와 메모리를 제한하여 시스템 리소스를 효율적으로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;container&#34;&gt;Container
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념-1&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;애플리케이션과 그 애플리케이션이 실행되는 환경을 패키징하는 가벼운, 독립적인 실행 환경이다.&lt;/li&gt;
&lt;li&gt;가상머신과 비슷하지만 훨씬 가볍고 빠르다.&lt;/li&gt;
&lt;li&gt;운영체제 수준에서 CPU, 메모리, 스토리지, 네트워크 등 리소스를 쉽게 공유하고 별도의 실행 환경을 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;주요-특징&#34;&gt;주요 특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;경량성 : 호스트 운영 체제의 커널을 공유하기 때문에 가상머신보다 가볍고 빠른 실행이 가능하다.&lt;/li&gt;
&lt;li&gt;이식성 : 어디서나 동일하게 실행된다.&lt;/li&gt;
&lt;li&gt;격리성 : 컨테이너는 서로 독립적으로 실행된다. 각 컨테이너는 자체 파일 시스템, 네트워크, 프로세스 공간 소유&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;동작-원리&#34;&gt;동작 원리
&lt;/h4&gt;&lt;p&gt;Docker 컨테이너는 Docker 이미지로 부터 생성되며 이미지는 컨테이너를 실행하기 위한 모든 파일과 설정이 포함된 불변 템플릿이다.&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;가상머신virtual-machine-vs-docker&#34;&gt;가상머신(Virtual Machine) vs Docker
&lt;/h2&gt;&lt;hr&gt;
&lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/docker/VMvsDocker.png&#34;&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;docker-탄생-배경&#34;&gt;Docker 탄생 배경
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;전통적인-배포-방식&#34;&gt;전통적인 배포 방식
&lt;/h4&gt;&lt;p&gt;소프트웨어 개발과 배포 과정에서 발생하는 다양한 문제점을 해결하기 위해 등장했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;환경 불일치 : 개발 환경과 운영 환경이 서로 다르다면 정상 작동하지 않을 수 있다.&lt;/li&gt;
&lt;li&gt;복잡한 설정 : 배포 시 수 많은 설정들을 하나하나 설정 하다보면 실수를 발생시킬수 있고 시간이 오래걸린다.&lt;/li&gt;
&lt;li&gt;리소스 낭비 : 각 애플리케이션 마다 별도의 운영 체제를 실행하고 이는 CPU와 메모리 같은 자원을 많이 소비한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;도커&#34;&gt;도커
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;일관된 환경 제공 : 개발, 테스트, 배포 환경을 모두 동일하게 만들어 준다.&lt;/li&gt;
&lt;li&gt;간편한 설정 : 애플리케이션이 실행되는 환경을 코드로 정의&lt;/li&gt;
&lt;li&gt;리소스 효율성 : 호스트 운영 체제의 커널을 공유해 가볍고 빠르다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-명령어-정리&#34;&gt;Docker 명령어 정리
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;run: 이미지에서 새로운 컨테이너 생성 및 실행&lt;/li&gt;
&lt;li&gt;exec: 실행 중인 컨테이너 내에서 명령어 실행&lt;/li&gt;
&lt;li&gt;ps: 현재 실행 중인 컨테이너 목록 표시&lt;/li&gt;
&lt;li&gt;build: Dockerfile을 기반으로 이미지 빌드&lt;/li&gt;
&lt;li&gt;pull: 레지스트리에서 이미지 다운로드&lt;/li&gt;
&lt;li&gt;push: 이미지를 레지스트리에 업로드&lt;/li&gt;
&lt;li&gt;images: 로컬에 저장된 이미지 목록 표시&lt;/li&gt;
&lt;li&gt;login: 레지스트리에 로그인&lt;/li&gt;
&lt;li&gt;logout: 레지스트리에서 로그아웃&lt;/li&gt;
&lt;li&gt;search: Docker Hub에서 이미지 검색&lt;/li&gt;
&lt;li&gt;version: Docker 버전 정보 표시&lt;/li&gt;
&lt;li&gt;info: 시스템 전체 정보 표시&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Linux 심화</title>
        <link>https://choiseungwoo98.github.io/p/linux-%EC%8B%AC%ED%99%94/</link>
        <pubDate>Mon, 08 Jul 2024 22:32:35 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/linux-%EC%8B%AC%ED%99%94/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;리눅스에 대해 배웠다.&lt;br&gt;
오늘은 실습이 주를 이뤘다.
각각의 명령어가 무슨 일을 하는지 모르다 보니
사실상 한컴타자연습 느낌..
이렇구나 하고 넘어가는 정도라 다시 정리&amp;hellip;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cgroupcontrol-group&#34;&gt;CGroup(Control Group)
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;프로세서가 사용하는 자원(CPU, 메모리, 디스크, I/O, 네트워크 대역폭 등) 관리 및 제한&lt;/li&gt;
&lt;li&gt;애플리케이션의 성능 최적화 및 제어&lt;/li&gt;
&lt;li&gt;프로세스를 그룹으로 묶고 사용할 수 있는 자원을 제한, 제어하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;주요-기능&#34;&gt;주요 기능
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;리소스 제한 : 자원을 제한해 안정성 보장&lt;/li&gt;
&lt;li&gt;리소스 우선순위 : 중요도에 따른 자원을 할당 및 제한&lt;/li&gt;
&lt;li&gt;리소스 계정 : 그룹 별 자원 사용량 모니터링 및 통계 정보 제공&lt;/li&gt;
&lt;li&gt;리소스 격리 : 다른 프로세서 그룹 간의 자원 사용을 격리하여 타 그룹에 영향이 미치지 않도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;구조&#34;&gt;구조
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;cpu : 사용량 제한 및 보장
&lt;ul&gt;
&lt;li&gt;cpuacct : 사용량 모니터링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;memory : 사용량 제한 및 통계 제공&lt;/li&gt;
&lt;li&gt;blkio : 블록(디스크) I/O 사용량 제한 및 모니터링&lt;/li&gt;
&lt;li&gt;net_cls : 네트워크 트래픽 분류 및 제한&lt;/li&gt;
&lt;li&gt;freezer: 프로세스 중단, 재개&lt;/li&gt;
&lt;li&gt;devices: 장치 접근 제어&lt;/li&gt;
&lt;li&gt;hugetlb: 큰 페이지 메모리 사용량 제한&lt;/li&gt;
&lt;li&gt;perf_event: 성능 이벤트 모니터링&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용법&#34;&gt;사용법
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cgroup 실습 환경 세팅&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install cgroup-tools-stress
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cpu 제한 실습&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cpulimit이라는 이름으로 cgroup 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cgcreate -g cpu:/cpulimit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 생성 여부 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lscgroup &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep cpulimit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cpu 제한 설정(50000을 출력 후 출력 값을 cpu.max 파일에 기록)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;50000&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /sys/fs/cgroup/cpulimit/cpu.max
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cpu 실행(cgroup의 cpu 서브시스템을 사용하는데 stress 도구를 사용해 부하를 준다)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cpulitmit을 실행하는데 cpu는 2개 vm(메모리 작업)은 1개를 작업 시작하고 30초 후 작업 종료 이 과정을 백그라운드에서 실행하고 작업 상태를 실시간으로 보여줘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cgexec -g cpu:/cpulimit stress --cpu &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --vm &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --timeout 30s &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; top
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cgroup 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cgdelete -g cpu:/cpulimit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# memory 제한 실습&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# memorylimit 이름의 그룹 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cgcreate -g memory:/memorylimit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 512MB로 메모리 제한 설정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /sys/fs/cgroup/memorylimit/memory.max
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 메모리 시스템 부하 주기 및 0.5초 마다 memory.current 파일 내용 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo eegexec -g memory:/memorylimit stress --vm-byte 1024M --vm &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --timeout 30s &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; watch -n 0.5 cat /sys/fs/cgroup/memorylimit/memory.current
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cgroup 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cgdelete -g memory:/memorylimit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;namespace&#34;&gt;NameSpace
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념-1&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;프로세스가 시스템 리소스를 격리하여 독립된 환경에서 실행되도록 하는 기술&lt;/li&gt;
&lt;li&gt;컨테이너 기술에서 중요하게 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;종류&#34;&gt;종류
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Mount Namespace : 파일 시스템 마운트를 격리하여 각각 독립적인 파일 시스템 트리를 갖고 있다.&lt;/li&gt;
&lt;li&gt;Process ID Namespace : 프로세스 ID 격리하고 독립된 프로세스 ID 공간을 가지므로, 네임스페이스 마다 동일한 PID를 가질수 있다.&lt;/li&gt;
&lt;li&gt;Network Namespace(net) : 네트워크 장치, IP 주소, 포트 번호 등을 격리하여 독립적인 네트워크 스택을 가지며 네임스페이스 간 장치를 독립적으로 사용 가능&lt;/li&gt;
&lt;li&gt;User Namespace : 사용자와 그룹 ID를 격리하여 비루트 사용자가 네임스페이스 내에 루트 권한을 가질수 있다.&lt;/li&gt;
&lt;li&gt;IPC Namespace(ipc) : 프로세스간 통신(메시지, 큐, 세마포어, 공유 메모리 등)을 격리하여 타 네임스페이스와 충돌 없이 사용 가능하다.&lt;/li&gt;
&lt;li&gt;UTS Namespace(uts) : 호스트와 도메인 이름을 격리하여 독립적으로 사용 가능, 이는 컨테이너화 된 시스템 식별 정보를 별도 설정하기 유용하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용법-1&#34;&gt;사용법
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Namespace 실습 환경 세팅&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install -y util-linux
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 새 마운트 네임스페이스 에서 관리자 권한으로 새로운 bash 셸 실행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo unshare --mount /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 셸 안에 /mnt/test 디렉토리 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir /mnt/test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# tmpfs 타임의 임시 파일 시스템을 /mnt/test 에 마운트(운영체제에서 파일 시스템을 특정 디렉토리에 연결하여 사용할 수있도록 하는 과정)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mount -t tmpfs none /mnt/test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;#34;Hello from Mount Namespace&amp;#34;라는 텍스트를 /mnt/test/hello.txt 파일에 작성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello from Mount Namespace&amp;#34;&lt;/span&gt; &amp;gt; /mnt/test/hello.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 방금 작성 hello.txt의 내용 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat /mnt/test/hello.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 새롭게 만든 마운트 네임스페이스(현재 셸) 종료&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 호스트 네임스페이스에서 /mnt/test 디렉토리의 내용 나열&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls /mnt/test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# PID Namespace 실습&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# PID 네임 스페이스 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo unshare -pid -fork /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 생성된 PID 네임 스페이스 안에 실행 중인 모든 프로세스 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ps -none
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 현재 bash 쉘의 프로세스 id 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#PID 네임 스페이스 bash 쉘 종료&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 기존 PID 네임스페이스로 위 동작과 동일&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ps -e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# User(UID, GID) Namespace 실습&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# USER 네임 스페이스 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo unshare --user /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 현재 id 정보 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;id
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# root_test_file이라는 이름으로 빈 파일 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;touch /root_test_file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 생성한 빈 파일 정보 출력 및 나가기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls -l /root_test_file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 관리자 권한으로 root_test_file 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo rm /root_test_file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# UTS Namespace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 현재 시스템 호스트명 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hostname
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 새로운 UTS 네임스페이스 생성 후 bash 쉘 실행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo unshare --uts /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 새로운 UTS 안에 호스트 명을 kakao로 변경 후 출력 후 나가기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hostname kakao
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hostname
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 기존 호스트 네임 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hostname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;chrootchange-root&#34;&gt;Chroot(Change Root)
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념-2&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;특정 디렉토리를 시스템의 루트 디렉토리로 설정하여 그 안에서 실행되는 프로그램이 해당 디렉토리를 루트로 인식(chroot jail)&lt;/li&gt;
&lt;li&gt;시스템 일부를 격리하여 제한된 환경에서 테스트나 보안 목적으로 사용&lt;/li&gt;
&lt;li&gt;특정 디렉토리를 빠져나가지 못하기 때문에 감옥 이라고도 부른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;주요-기능-1&#34;&gt;주요 기능
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;보안 : 사용자가 시스템의 다른 부분에 접근하지 못하도록 한다.&lt;/li&gt;
&lt;li&gt;테스트 : 새로운 소프트웨어나 설정을 격리된 환경에서 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용법-2&#34;&gt;사용법
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /mychroot 디렉토리 아래에 여러 디렉토리를 한번에 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mkdir -p /mychroot/&amp;lt;bin,lib,lib64,dev,etc,proc,sys&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /bin 디렉토리의 모든 파일과 /bin/bash, /bin/ls, /bin/cat이 의존하는 모든 라이브러리 파일을 디렉토리 구조를 유지한 채 /mychroot로 복사&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cp /bin/* /mychroot/bin/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; lib in &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ldd /bin/bash /bin/ls /bin/cat &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -o &lt;span class=&#34;s1&#34;&gt;&amp;#39;/lib[^ ]*&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; sudo cp --parents &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$lib&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; /mychroot&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# mychroot 환경에서 proc, sys, dev를 사용할 수 있도록 마운트 하는 작업을 수행한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mount -t proc proc /mychroot/proc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mount -t sysfs sys /mychroot/sys
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mount --bind /dev /mychroot/dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# mychroot 디렉토리로 변경하고 쉘을 실행해 root 인 것처럼 동작하게 하는 작업&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo chroot /mychroot /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 현재 루트 디렉토리의 내용 나열&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls /
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /etc/kakao에 파일 저장 후 출력 및 쉘 종료&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello from chroot&amp;#34;&lt;/span&gt; &amp;gt; /etc/kakao
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat /etc/kakao
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 마운트한 proc, sys, dev를 언마운트 한 후 mychroot 디렉토리 및 하위 모든 내용 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo umount /mychroot/proc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo umount /mychroot/sys
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo umount /mychroot/dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo rm -rf /mychroot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;udsunix-domain-socket&#34;&gt;UDS(Unix Domain Socket)
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념-3&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;동일한 컴퓨터 내의 프로세스 간 통신(Inter-Process Communication, IPC)를 위한 매커니즘 중 하나&lt;/li&gt;
&lt;li&gt;TCP/IP 네트워크 소켓과 유사하지만 로컬 파일 시스템을 통해 통신&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;주요-특징&#34;&gt;주요 특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;로컬 통신 : 호스트 내에세 실행되는 프로세스 간의 통신을 지원해 네트워크 소켓에 비해 성능 우수&lt;/li&gt;
&lt;li&gt;파일 시스템을 이용한 주소 지정 : 파일 시스템 경로를 사용해 소켓을 식별하며 /tmp/mysocket과 같은 파일 경로 사용&lt;/li&gt;
&lt;li&gt;데이터 전송 속도 : 네트워크 계층을 거치지 않아 빠른 데이터 전송 가능(네트워크 스택의 오버헤드를 줄이기 때문)&lt;/li&gt;
&lt;li&gt;보안 : 파일 시스템 권한 설정을 통해 접근 제어, 특정 사용자나 프로세스만 소켓에 접근하도록 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용법-3&#34;&gt;사용법
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# file name : server.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;SOCKET_FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/mysocket&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCKET_FILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCKET_FILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCKET_FILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;서버가 클라이언트를 기다리고 있습니다...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;클라이언트 연결 수락&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;클라이언트로부터 받은 데이터:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# file name : client.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;SOCKET_FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/mysocket&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCKET_FILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;안녕하세요, 서버!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;서버로부터 받은 데이터:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 하나의 터미널에서 작업 시 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 server.py &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 client.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;overlayfs&#34;&gt;OverlayFS
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념-4&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;여러 디렉토리를 하나의 계층적 파일 시스템으로 병합 후 제공&lt;/li&gt;
&lt;li&gt;읽기 전용 파일 시스템에 쓰기 가능한 레이어를 추가해 기본 파일 시스템을 변경 없이 수정, 추가 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;주요-특징-1&#34;&gt;주요 특징
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;파일 시스템 계층화 : 읽기 전용 및 쓰기 가능한 계층을 병합 후 사용&lt;/li&gt;
&lt;li&gt;스냅샷 및 버전관리 : 파일 시스템의 상태를 스냅샷으로 저장 필요 시 복원&lt;/li&gt;
&lt;li&gt;컨테이너 : Docker와 같은 컨테이너 기술에서 이미지 레이어링을 위해 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;구조-1&#34;&gt;구조
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Lowerdir : 읽기 전용 파일 시스템&lt;/li&gt;
&lt;li&gt;Upperdir : 쓰기 전용 파일 시스템&lt;/li&gt;
&lt;li&gt;Workdir : Lowerdir과 Upperdir의 변경사항 추적을 위한 디렉토리, Docker에서 해당 디렉토리가 없으면 동작x&lt;/li&gt;
&lt;li&gt;Merged : Lowerdir과 Upperdir을 합쳐서 만든 현재 상태의 파일 시스템 디렉토리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;작동방식&#34;&gt;작동방식
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;새로운 파일 생성 : Upperdir에 파일 생성&lt;/li&gt;
&lt;li&gt;기존 파일 읽기 : 파일이 Upperdir에 있으면 Upperdir에서 읽고 없으면 Lowerdir에서 읽음&lt;/li&gt;
&lt;li&gt;기존 파일 수정 : 파일이 Upperdir에 없으면 Lowerdir에서 Upperdir로 복사 후 수정&lt;/li&gt;
&lt;li&gt;파일 삭제 : 파일이 Upperdir에 있으면 삭제, Lowerdir에 있으면 Upperdir에 삭제 마커 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사용법-4&#34;&gt;사용법
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mkdir -p /lower /upper /work /merged
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /lower, /upper, /work, /merged 디렉토리를 생성합니다. (필요시 부모 디렉토리도 함께 생성)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Lowerdir 입니다&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /lower/lowerfile.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;#34;Lowerdir 입니다&amp;#34;라는 문자열을 /lower/lowerfile.txt 파일에 씁니다. (파일이 없으면 생성)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Upperdir 입니다&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /upper/upperfile.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;#34;Upperdir 입니다&amp;#34;라는 문자열을 /upper/upperfile.txt 파일에 씁니다. (파일이 없으면 생성)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo mount -t overlay overlay -o &lt;span class=&#34;nv&#34;&gt;lowerdir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/lower,upperdir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/upper,workdir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/work /merged
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# lowerdir로 /lower, upperdir로 /upper, workdir로 /work를 사용하여 /merged에 overlay 파일 시스템을 마운트합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls /merged
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /merged 디렉토리의 내용을 나열합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; merged에서 lowerfile.txt와 upperfile.txt 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat /merged/lowerfile.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /merged 디렉토리 안의 lowerfile.txt 파일의 내용을 출력합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat /merged/upperfile.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /merged 디렉토리 안의 upperfile.txt 파일의 내용을 출력합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mergeddir 입니다&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /merged/mergedfile.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;#34;Mergeddir 입니다&amp;#34;라는 문자열을 /merged/mergedfile.txt 파일에 씁니다. (파일이 없으면 생성)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls /upper
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /upper 디렉토리의 내용을 나열합니다. (mergedfile.txt가 여기에 나타납니다)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo umount /merged
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /merged 디렉토리에 마운트된 파일 시스템을 언마운트합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo rm -rf /lower /upper /merged /work
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /lower, /upper, /merged, /work 디렉토리와 그 안의 모든 파일을 강제로 삭제합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux 기초</title>
        <link>https://choiseungwoo98.github.io/p/linux-%EA%B8%B0%EC%B4%88/</link>
        <pubDate>Fri, 05 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/linux-%EA%B8%B0%EC%B4%88/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;리눅스에 대해 배웠다.&lt;br&gt;
처음 알게된 명령어도 많았지만&lt;br&gt;
하다보면 외워지겠지&amp;hellip;&lt;br&gt;
일단 정리정리..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;리눅스&#34;&gt;리눅스
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;유닉스 계열의 OS 중 하나로 전 세계적으로 널리 사용되고 있는 오픈 소스 소프트웨어이다.&lt;/li&gt;
&lt;li&gt;다양한 시스템에서 동작하며 특히 서버, 데스크탑, 모바일 기기에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;오픈소스&#34;&gt;오픈소스
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;오픈 소스 소프트웨어(OOS : Open Source Software)로 누구나 열람, 수정, 배포가 가능한 소프트웨어이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;중요성
&lt;ul&gt;
&lt;li&gt;투명성 : 공개 소스로 동작 방식 확인 가능&lt;/li&gt;
&lt;li&gt;협업과 혁신 : 누구나 수정, 배포가 가능해 빠른 소프트웨어 개선&lt;/li&gt;
&lt;li&gt;비용 절감 : 라이센스 비용이 없거나 저렴함&lt;/li&gt;
&lt;li&gt;자유와 통제 : 자유롭게 수정할 수 있는 권한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;gpl-license&#34;&gt;GPL License
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;자유 소프트웨어 재단에서 만든 라이선스로 자유롭게 사용할 수 있고 수정, 배포 할 수 있는 권리 보장&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;자유-소프트웨어-운동&#34;&gt;자유 소프트웨어 운동
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;사용, 수정, 공유의 자유를 보장하는 소프트웨어&lt;/li&gt;
&lt;li&gt;소프트웨어는 사용자의 자유와 권리를 침해하지 않아야 한다는 철학&lt;/li&gt;
&lt;li&gt;자유와 접근성을 증진하고 독점 소프트웨어에 대한 대안을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;리눅스-구조&#34;&gt;리눅스 구조
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션
&lt;ul&gt;
&lt;li&gt;사용자가 직접 상호작용하는 단계로 빌드된 앱, 바이너리, 명령어, 빌드된 파일을 통틀어 어플리케이션이라고 한다.&lt;/li&gt;
&lt;li&gt;주요 기능
&lt;ul&gt;
&lt;li&gt;사용자가 상호작용할 수 있는 인터페이스 제공&lt;/li&gt;
&lt;li&gt;커널을 통한 시스템 리소스(CPU, Memory, I/O 장치 등)을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;쉘
&lt;ul&gt;
&lt;li&gt;어플리케이션이 커널에서 사용하는 명령어를 가려주고 쉘을 사용해 스크립트도 만들 수 있다.&lt;/li&gt;
&lt;li&gt;주요 기능
&lt;ul&gt;
&lt;li&gt;명령어 해석 : 사용자가 입력한 명령어 해석, 실행하기 위해 시스템 콜&lt;/li&gt;
&lt;li&gt;스크립트 실행 : 쉘 스크립트를 통해 여러 명령어 조합이나 여러 명령어를 일괄 실행&lt;/li&gt;
&lt;li&gt;환경 관리 : 환경 변수 설정 및 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커널
&lt;ul&gt;
&lt;li&gt;OS의 핵심 부분으로 하드웨어와 상호작용하는 단계&lt;/li&gt;
&lt;li&gt;주요 기능
&lt;ul&gt;
&lt;li&gt;프로세스 관리 : 프로세스 생성, 스케줄링, 종료 등을 관리&lt;/li&gt;
&lt;li&gt;메모리 관리 : 가상 메모리, 페이징, 스왑 메모리등을 통해 효율적인 메모리 관리&lt;/li&gt;
&lt;li&gt;가상 메모리  : 보조기억장치를 이용해 실제 사용 가능한 메모리보다 더 많은 메모리를 사용가능하게 하는 기법&lt;/li&gt;
&lt;li&gt;페이징  : 메모리를 좀 더 효율적으로 사용하기 위해 고안된 기법으로 메모리를 일정 크기만큼 잘라서 사용하는 기법&lt;/li&gt;
&lt;li&gt;스왑 메모리  : 실제로 사용하지 않는 나머지 부분(페이지)을 보조기억장치의 특정 영역(스왑 영역)으로 옮겨서 공간을 확보하는 기법&lt;/li&gt;
&lt;li&gt;파일 시스템 관리 : 파일의 저장, 접근, 조작을 지원하는 파일 시스템 관리&lt;/li&gt;
&lt;li&gt;장치 관리 : 하드웨어 장치와의 상호작용을 관리하고 장치 드라이버를 통한 추상화&lt;/li&gt;
&lt;li&gt;보안및접근제어 : 사용자와 시스템 자원 간의 보안정책을 관리하고 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하드웨어
&lt;ul&gt;
&lt;li&gt;물리적인 컴퓨터 구성요소로 CPU, Memory, SSD, HDD, Network Interface 등&lt;/li&gt;
&lt;li&gt;직접 통제하지 않고 커널의 추상화를 통해 관리할 수 있도록 간접적으로 접근&lt;/li&gt;
&lt;li&gt;주요 기능
&lt;ul&gt;
&lt;li&gt;CPU: 명령어 처리 및 프로그램을 실행&lt;/li&gt;
&lt;li&gt;Memory: 실행 중인 프로그램과 데이터를 저장&lt;/li&gt;
&lt;li&gt;저장 장치: 데이터를 (반)영구적으로 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;대표적인-linux-배포판&#34;&gt;대표적인 Linux 배포판
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu
&lt;ul&gt;
&lt;li&gt;Debian 계열중에 가장 유명한 배포판&lt;/li&gt;
&lt;li&gt;쉬운 설계 및 직관적인 GUI 제공&lt;/li&gt;
&lt;li&gt;방대한 레퍼런스&lt;/li&gt;
&lt;li&gt;2년 단위의 버전 출시 및 5년간 유지보수로 보안성이 강하고 안정적&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CentOS
&lt;ul&gt;
&lt;li&gt;RHEL(RedHat Enterprise Linux)계열로 안정성과 보안이 뛰어나 주로 기업에서 많이 사용하는 OS&lt;/li&gt;
&lt;li&gt;방대한 레퍼런스&lt;/li&gt;
&lt;li&gt;CentOS 7까지는 무료였으나 CentOS 8부터는 유료로 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arch Linux
&lt;ul&gt;
&lt;li&gt;경량화, 커스터마이징에 특화된 OS&lt;/li&gt;
&lt;li&gt;자체 용량이 굉장히 작다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/linux/linux배포판.png&#34;&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;패키지-매니저&#34;&gt;패키지 매니저
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;APT
&lt;ul&gt;
&lt;li&gt;Demian 계열에서 주로 사용하는 패키지 매니저
&lt;ul&gt;
&lt;li&gt;Demian : 여러 파생 배포판의 기반(Ex : Ubuntu, Linux Mint 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;패키지 설치 시 의존성 패키지도 자동 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;YUM/DNF
&lt;ul&gt;
&lt;li&gt;RHEL 계열에서 주로 사용하는 패키지
&lt;ul&gt;
&lt;li&gt;RHEL(Red Hat Enterprise Linux) : 레드햇이 개발한 상용 리눅스 배포판, 주로 기업환경에서 사용되며 고성능, 안정성, 보안, 지원 서비스 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;플러그인 시스템을 통해 기능 확장 가능&lt;/li&gt;
&lt;li&gt;YUM보다 DNF를 사용하는 추세&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/linux/패키지매니저.png&#34;&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;권한-및-소유자&#34;&gt;권한 및 소유자
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;모든 파일 및 디렉토리는 사용자(User)와 그룹(Group)에 의해 소유(Ex : colton:KTB 라면 colton과 KTB에 속한 그룹의 소유)&lt;/li&gt;
&lt;li&gt;사용자와 그룹 말고도 접근 권한을 지정 할 수 있다.
&lt;ul&gt;
&lt;li&gt;R(Read) : 읽기 권한, cat으로 파일 내용 확인 가능&lt;/li&gt;
&lt;li&gt;W(Write) : 쓰기 권한, vim, echo, sed 명령어 등으로 수정 가능&lt;/li&gt;
&lt;li&gt;X(eXecute) : 실행 권한, sh, bash에 의해 실행될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;파일의 부여할 수 있는 권한은 Bit로 관리되며 Read 4, Write 2, Execute 1로 설정&lt;/li&gt;
&lt;li&gt;한 파일이 갖는 모든 권한은 User, Group, Others(Ex : 754 라면 유저는 모든 권한, 그룹은 읽기 및 실행, 그 외는 읽기의 권한)&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;디렉토리-구조&#34;&gt;디렉토리 구조
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Root Directory(/) : 시스템의 모든 디렉토리는 루트 하위에서 관리&lt;/li&gt;
&lt;li&gt;bin(/bin) : 사용자 명령어가 저장되는 디렉토리(ls, cd, mv, rm, bash 등)&lt;/li&gt;
&lt;li&gt;lib(/lib) : 시스템, 어플리케이션의 공유 라이브러리가 저장&lt;/li&gt;
&lt;li&gt;usr(/usr) : 앞서 설명한 디렉토리들이 모두 포함(앞선 디렉토리가 바라보고 있음)&lt;/li&gt;
&lt;li&gt;dev(/dev) : 장치 파일들이 저장되는 디렉토리(터미널, 널 장치 등 포함), 모든 장치가 파일 형태로 표시&lt;/li&gt;
&lt;li&gt;etc(/etc) : 전반적인 시스템 설정 파일이 저장, 사용자 계정 정보, 암호정보, 호스트 네임/IP 매핑 파일 등&lt;/li&gt;
&lt;li&gt;opt(/opt) : CLI 보다 GUI에서 자주 사용되는 디렉토리, 설치 매니저를 통해 설치된 어플리케이션이 주로 포함&lt;/li&gt;
&lt;li&gt;proc(/proc) : 커널과 프로세스에 대한 가상 파일 시스템 저장(/proc/cpuinfo : CPU 정보, /proc/meminfo : 메모리 정보), 시스템 상태와 커널 정보등을 제공하며 동적으로 생성되는 파일들로 구성&lt;/li&gt;
&lt;li&gt;home(/home) : 개인 디렉토리가 저장되는 위치, 기본적으로 권한과 소유자가 해당 유저에 맞게 설정&lt;/li&gt;
&lt;li&gt;root(/root) : root 계정의 홈 디렉토리&lt;/li&gt;
&lt;li&gt;tmp(/tmp) : 삭제되어도 문제 없는 파일이나 디렉토리와 같은 임시파일을 저장하는 디렉토리&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;명령어-정리&#34;&gt;명령어 정리
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;sudo : root(다른 사용자)의 명령 실행(sudo apt-get update)&lt;/li&gt;
&lt;li&gt;su : 사용자 변경(su &lt;userName&gt;)&lt;/li&gt;
&lt;li&gt;adduser : 사용자 추가(adduser &lt;userName&gt;)&lt;/li&gt;
&lt;li&gt;cat : 파일 내용 출력, 파일 연결 후 출력(cat &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;usermod : 사용자 속성 변경(usermod -aG &lt;groupName&gt; &lt;userName&gt;)&lt;/li&gt;
&lt;li&gt;addgroup : 새로운 그룹 추가(addgroup &lt;groupName&gt;)&lt;/li&gt;
&lt;li&gt;vim : 강력한 텍스트 편집기(vim &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;echo : 문자열 출력(echo &amp;ldquo;Hello world!&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;cd(change Directory) : 디렉토리 변경(cd ..)&lt;/li&gt;
&lt;li&gt;chmod : 권한 변경(chmod &amp;lt;775 : 권한&amp;gt; &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;ls -al(ll) : 자세한 내용을 포함한 목록 표시&lt;/li&gt;
&lt;li&gt;ls : 디렉토리 내용 나열&lt;/li&gt;
&lt;li&gt;mv : 파일, 디렉토리 이름 변경 혹은 이동(mv &amp;lt;temp2 : 기존이름&amp;gt; &amp;lt;temp : 바꿀 이름&amp;gt;)&lt;/li&gt;
&lt;li&gt;rm : 파일, 디렉토리 삭제(rm &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;bash : bash 셀 실행&lt;/li&gt;
&lt;li&gt;exit : 현재 스크립트 종료&lt;/li&gt;
&lt;li&gt;passwd : 사용자 비밀번호 변경&lt;/li&gt;
&lt;li&gt;shadow : /etc/shadow 파일에 저장된 암호화된 비밀번호 관리&lt;/li&gt;
&lt;li&gt;hosts : /etc/hosts 파일 관리&lt;/li&gt;
&lt;li&gt;apt-get : 데비안 기반 시스템에서 패키지 관리(apt-get &amp;lt;install : 동작&amp;gt; &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;export : 셸 환경 변수 설정(export PATH=$PATH:&amp;lt;/new/path&amp;gt;)&lt;/li&gt;
&lt;li&gt;lsblk : 블록 장치 목록 표시&lt;/li&gt;
&lt;li&gt;df -TH : 파일 시스템의 디스크 공간 사용량 표사&lt;/li&gt;
&lt;li&gt;mkdir : 디렉토리 생성(mkdir &lt;directoryName&gt;)&lt;/li&gt;
&lt;li&gt;rmdir : 빈 디렉토리 삭제(rmdir &lt;directoryName&gt;)&lt;/li&gt;
&lt;li&gt;touch : 빈 파일 생성 or 기존 파일 타임 스탬프 변경(touch &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;head : 파일의 처음 몇 줄 출력(head &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;tail : 파일의 마지막 몇 줄 출력(tail &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;pwd : 현재 경로 출력&lt;/li&gt;
&lt;li&gt;whoami : 현재 사용자 이름 출력&lt;/li&gt;
&lt;li&gt;top : 실시간 시스템 상태 모니터링&lt;/li&gt;
&lt;li&gt;df -h : 디스크 사용량을 읽기 쉽게 표시&lt;/li&gt;
&lt;li&gt;du -h : 디렉토리 사용량을 읽기 쉽게 표시(du -h &lt;directoryName&gt;)&lt;/li&gt;
&lt;li&gt;ping : 네트워크 연결 상태 체크(ping &lt;a class=&#34;link&#34; href=&#34;https://www.google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.google.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;curl : 데이터 전송 및 가져오기(curl &lt;a class=&#34;link&#34; href=&#34;https://www.google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.google.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ifconfig : 네트워크 인터페이스 구성 표시 및 변경&lt;/li&gt;
&lt;li&gt;ps : 현재 실행중인 프로세스 목록 표시&lt;/li&gt;
&lt;li&gt;find : 파일 시스템에서 파일과 디렉토리 검색(find &lt;path&gt; -name &lt;fileName&gt;)&lt;/li&gt;
&lt;li&gt;service : 서비스 시작, 중지, 재시작, 상태 확인 등을 수행(service &lt;serviceName&gt; &amp;lt;start / stop / restart / status / &amp;ndash;status-all&amp;gt;)&lt;/li&gt;
&lt;li&gt;ip addr : 네트워크 인터페이스와 IP 주소 관리 및 사용&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>네트워크 개념</title>
        <link>https://choiseungwoo98.github.io/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B0%9C%EB%85%90/</link>
        <pubDate>Thu, 04 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B0%9C%EB%85%90/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;네트워크에 대해 배웠는데 너무 모르겠다&amp;hellip;&lt;br&gt;
잘 따라 가려면 더욱 공부해야겠다..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;네트워크&#34;&gt;네트워크
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;둘 이상의 컴퓨터와 연결하는 링크의 조합이다.&lt;/li&gt;
&lt;li&gt;물리적 네트워크는 어댑터, 케이블 및 전화선과 같은 장비이고 소프트웨어 및 개념 모델이 논리적 네트워크를 형성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;네트워크를-알아야-하는-이유&#34;&gt;네트워크를 알아야 하는 이유
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;통신 및 데이터 교환(컴퓨터와 다른 장치들이 서로 통신하고 데이터를 교환할 수 있게 한다.)&lt;/li&gt;
&lt;li&gt;분산 시스템 및 클라우드 컴퓨팅(여러 컴퓨터가 네트워크를 통해 하나의 시스템 처럼 작동, 대규모 데이터 처리 및 저장 분석 등)&lt;/li&gt;
&lt;li&gt;해킹, 데이터유출 등 다양한 공격으로 부터 보호하기 위해&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;osi-7-layer-osi-4-layer&#34;&gt;OSI 7 Layer, OSI 4 Layer
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;OSI(Open System Interconnection : 개방형 시스템 상호 연결) : 다양한 통신 시스템이 통신 할 수 있도록 국제표준화기구에서 만든 개념 모델&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;OSI 7 Layer&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/osi_7_layers.png&#34;&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OSI 7 Layer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;응용 프로그램 계층(Application) - 데이터
&lt;ul&gt;
&lt;li&gt;사용자 사용하는 응용프로그램과 인터페이스를 제공하는 계층&lt;/li&gt;
&lt;li&gt;네트워크 서비스에 접근 할 수 있는 인터페이스 제공&lt;/li&gt;
&lt;li&gt;주요 프로토콜 : HTTP, FTP, SMTP, DNS, Telnet, SSH등&lt;/li&gt;
&lt;li&gt;주요 프로토콜 포트: FTP(20 : 전송, 21 : 제어), SSH(22), SMTP(25), DNS(53), HTTP(80), POP3(110), NTP(123), HTTPS(443)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;Application Layer&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/application_layer.png&#34;&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;프레젠테이션 계층(Presentation) - 데이터
&lt;ul&gt;
&lt;li&gt;데이터 표현 방식 정의 및 압축, 암호화, 인코딩 수행&lt;/li&gt;
&lt;li&gt;데이터 형식 변환, 암호화, 압축 기능 제공&lt;/li&gt;
&lt;li&gt;주요 프로토콜 : JPEG, MPEG, ASCII&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;Presentation Layer&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/presentation_layer.png&#34;&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;세션 계층(Session) - 데이터
&lt;ul&gt;
&lt;li&gt;양 끝단의 애플리케이션 간의 대화 관리와 동기화를 담당&lt;/li&gt;
&lt;li&gt;세션 설정, 유지, 종료 관리 및 데이터 동기화 보장&lt;/li&gt;
&lt;li&gt;주요 프로토콜 : RPC, NetBIOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;Session Layer&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/session_layer.png&#34;&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;전송 계층(Transport) - 세그먼트
&lt;ul&gt;
&lt;li&gt;데이터 전송의 신뢰성과 흐름 제이를 담당&lt;/li&gt;
&lt;li&gt;데이터 분할, 재조립, 오류 복구등을 처리&lt;/li&gt;
&lt;li&gt;예 : TCP(Transmission Control Protocol), UDP(User Datagram Protocol&lt;/li&gt;
&lt;li&gt;주요 프로토콜 : TCP, UDP, SCTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;Transport Layer&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/transport_layer.png&#34;&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;네트워크 계층(Network) - 패킷
&lt;ul&gt;
&lt;li&gt;데이터를 목적지까지 전달하는 경로 선택 및 패킷 라우팅&lt;/li&gt;
&lt;li&gt;라우팅, 패킷 전달, 트래픽 제어등을 수행&lt;/li&gt;
&lt;li&gt;예 : 라이터, IP 주소&lt;/li&gt;
&lt;li&gt;주요 프로토콜 : IP, ICMP, ARP, OSPF, BGP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;Network Layer&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/network_layer.png&#34;&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;데이터 링크 계층(Data Link) - 프레임
&lt;ul&gt;
&lt;li&gt;물리 계층에서 받은 데이터를 프레임 형태로 만들어 네트워크 계층으로 전달&lt;/li&gt;
&lt;li&gt;에러 검출, 흐름제어, 접근 제어 기능 수행&lt;/li&gt;
&lt;li&gt;예: 이더넷 스위치, MAC 주소&lt;/li&gt;
&lt;li&gt;주요 프로토콜 : Ethernet, PPP(Point-to-Point Protocol), HDLC, WI-FI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;Data Link Layer&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/data_link_layer.png&#34;&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;물리 계층(Physical) - 비트
&lt;ul&gt;
&lt;li&gt;데이터 전송을 위한 물리적 매체를 이용해 비트 스트림, 전송하는 계층&lt;/li&gt;
&lt;li&gt;전기적, 기계적, 기능적 틍성을 정의 및 데이터 송수신 담당&lt;/li&gt;
&lt;li&gt;예: 케이블, 허브, 리피트 등&lt;/li&gt;
&lt;li&gt;주요 프로토콜 : Ethernet, RS-232, USB 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;Physical Layer&lt;/summary&gt;
  &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/physical_layer.png&#34;&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7 Layer vs 4 Layer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단계가 많고 구조가 복잡해서 간단하고 인터넷 서비스에 적합한 4계층 모델이 개발됐다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 30px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;차이&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/osi7_osi4.png&#34;&gt;
&lt;/details&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;계층별-장비&#34;&gt;계층별 장비
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;리피터(Repeater)
&lt;ul&gt;
&lt;li&gt;물리 계층&lt;/li&gt;
&lt;li&gt;신호를 멀리 보내기 위한 증폭 장치&lt;/li&gt;
&lt;li&gt;신호 감쇠 방지 및 전송 거리 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;허브(Hub)
&lt;ul&gt;
&lt;li&gt;데이터 링크 계층&lt;/li&gt;
&lt;li&gt;여러 장치를 하나의 네트워크로 연결시켜주는 장치&lt;/li&gt;
&lt;li&gt;여러 컴퓨터 연결하지만 데이터 충돌 가능성이 있으며 Mac 주소를 인식하지 못한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;브리지(Bridge)
&lt;ul&gt;
&lt;li&gt;데이터 링크 계층&lt;/li&gt;
&lt;li&gt;두 개의 세그먼트를 연결 및 Mac 주소를 사용해 데이터 프레임 필터링&lt;/li&gt;
&lt;li&gt;세그먼트 간의 트래픽 필터링 및 브로드캐스트 도메인 분할하려 충돌 감소&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스위치
&lt;ul&gt;
&lt;li&gt;데이터 링크 계층&lt;/li&gt;
&lt;li&gt;여러 장치를 연결하고 Mac 주소를 사용하여 프레임을 특정 포트로 전송&lt;/li&gt;
&lt;li&gt;각 포트에 연결된 장치간 통신을 효율적으로 관리 및 충돌 도메인 분리해 성능 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;라우터
&lt;ul&gt;
&lt;li&gt;네트워크 계층&lt;/li&gt;
&lt;li&gt;다른 네트워크 간 데이터 전송, IP주소를 사용해 경로 결정&lt;/li&gt;
&lt;li&gt;여러 네트워크를 연결해 데이터 패킷을 올바른 경로로 라우팅, 논리적 주소(IP 주소)를 기반으로 네트워크 트래픽 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;주요-기술&#34;&gt;주요 기술
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Ethernet
&lt;ul&gt;
&lt;li&gt;가장 많이 사용되는 유선 네트워크, LAN(Local Area Network)에서 데이터 전송을 위해 사용&lt;/li&gt;
&lt;li&gt;데이터를 프레임 단위로 나누어 전송(Mac 주소, 데이터 오류 검출 코드 등을 포함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP(Internet Protocol)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;네트워크에서 어떤 정보를 송수신하는 통신 규약, 호스트 주소를 지정 및 패킷 분할, 조립 기능 담당&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주소지정 : 고유한 IP 할당(IPv4, IPv6)&lt;/li&gt;
&lt;li&gt;패킷 분할 및 재조립 : 큰 데이터 패킷을 분할 후 전송, 수신 측에서 재조립&lt;/li&gt;
&lt;li&gt;경로 선택 : 패킷의 목적지까지 최적의 경로 선택&lt;/li&gt;
&lt;li&gt;비연결형 : 패킷 전송 시 연결 설정 없이 독립적으로 전송&lt;/li&gt;
&lt;li&gt;오류처리 : 패킷 전송 중 발생한 오류 처리 및 필요 시 재전송&lt;/li&gt;
&lt;li&gt;생존시간 : 패킷의 수명을 설정해 네트워크가 무한정으로 떠돌지 않게함, 라우터를 거칠 때 마다 TTL 감소&lt;/li&gt;
&lt;li&gt;프로토콜 식별 : 상위 계층 프로토콜 식별을 위해 헤더에 프로토콜 번호 포함&lt;/li&gt;
&lt;li&gt;헤더 체크섬 : IP 헤더의 오류 검출을 위한 체크섬 필드 포함&lt;/li&gt;
&lt;li&gt;패킷 형식 및 구조 : 헤더와 데이터로 구성되며 헤더는 목적지, 출발지 주소, TTL, 프로토콜 정보 등이 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPv4 구조&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실습(WireShark)&lt;/li&gt;
&lt;/ul&gt;
&lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/ipv4_header_format.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;IPv4 구성 및 헤더
&lt;ul&gt;
&lt;li&gt;32비트로 이루어져 있으며 최근 주소 부족으로 개별적으로 부여할 수 없다.&lt;/li&gt;
&lt;li&gt;IPv4 주소 부족 현상을 해결하기 위해 네트워크 클래스가 등장했다.&lt;/li&gt;
&lt;li&gt;네트워크 클래스
&lt;ul&gt;
&lt;li&gt;A Class : 1.0.0.1   ~ 126.255.255.254&lt;/li&gt;
&lt;li&gt;B Class : 128.0.0.1 ~ 191.255.255.254&lt;/li&gt;
&lt;li&gt;C Class : 192.0.0.1 ~ 223.255.255.254&lt;/li&gt;
&lt;li&gt;D Class : 224.0.0.0 ~ 239.255.255.255&lt;/li&gt;
&lt;li&gt;E Class : 240.0.0.0 ~ 254.255.255.254&lt;/li&gt;
&lt;li&gt;특수 용도
&lt;ul&gt;
&lt;li&gt;0.0.0.0/8 : 자체 네트워크&lt;/li&gt;
&lt;li&gt;10.0.0.0/8 : 사설 네트워크&lt;/li&gt;
&lt;li&gt;127.0.0.0/8 : 루프백(자기자신)&lt;/li&gt;
&lt;li&gt;169.254.0.0/16 : 링크 로컬(link local)&lt;/li&gt;
&lt;li&gt;172.16.0.0/12 : 사설 네트워크&lt;/li&gt;
&lt;li&gt;192.0.2.0/24 : 예제 등 문서에서 사용&lt;/li&gt;
&lt;li&gt;192.88.99.0/24 : 6to4 릴레이 애니캐스트&lt;/li&gt;
&lt;li&gt;192.168.0.0/16 : 사설 네트워크&lt;/li&gt;
&lt;li&gt;198.18.0.0/15 : 네트워크 장비 벤치마킹 테스트&lt;/li&gt;
&lt;li&gt;224.0.0.0/4 : 멀티캐스트&lt;/li&gt;
&lt;li&gt;240.0.0.0/4 : 미래 사용 용도로 예약&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;서브넷-서브넷팅-서브넷마스크&#34;&gt;서브넷, 서브넷팅, 서브넷마스크
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서브넷
&lt;ul&gt;
&lt;li&gt;IP 네트워크 보다 더 작은 네트워크&lt;/li&gt;
&lt;li&gt;네트워크에 효율성을 높이고 쉽게 만들기 위해 사용, 분할로 인해 트래픽을 줄이고 보안을 강화 할 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서브넷팅
&lt;ul&gt;
&lt;li&gt;IP 주소 공간을 여러 개의 작은 서브넷으로 나누는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서브넷마스크
&lt;ul&gt;
&lt;li&gt;IP에 네트워크와 호스트 부분을 구분하기 위해 사용되는 비트 패턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;전송-계층&#34;&gt;전송 계층
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;TCP
&lt;ul&gt;
&lt;li&gt;인터넷 같은 네트워크에서 데이터를 신뢰성 있게 전송하기 위해 설계된 연결 지향형 프로토콜&lt;/li&gt;
&lt;li&gt;구조
&lt;ul&gt;
&lt;li&gt;3-way handshak : TCP 연결 설정 과정(SYN -&amp;gt; SYN-ACK -&amp;gt; ACK)&lt;/li&gt;
&lt;li&gt;흐름제어 : 데이터 전송 속도 조절, 수신자 버퍼 오버플로우 방지(슬라이딩 윈도우)&lt;/li&gt;
&lt;li&gt;혼잡제어 : 네트워크 혼잡 방지 및 해결, 패킷 손실과 지연 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP
&lt;ul&gt;
&lt;li&gt;데이터를 빠르고 효율적으로 전송하기 위해 설계된 비연결형 프로토콜&lt;/li&gt;
&lt;li&gt;전송 순서와 신뢰성은 보장되지 않지만 속도와 효율성이 필요한 부분에 적합(ex : 실시간 스트리밍)
&lt;ul&gt;
&lt;li&gt;구조
&lt;ul&gt;
&lt;li&gt;데이터그램 : 비연결형 데이터 전송 단위, 순서 보장 x&lt;/li&gt;
&lt;li&gt;스트리밍 : 실시간 연속 데이터 전송 방식, 주로 멀티 콘텐츠에 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/TCP_UDP.png&#34;&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;http-https&#34;&gt;HTTP, HTTPs
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서버/클라이언트 모델에 따라 데이터를 주고 받기 위한 프로토콜, TCP/IP 위에서 동작&lt;/li&gt;
&lt;li&gt;연결 상태를 유지하지는 않는다.(비연결형) -&amp;gt; 요청/응답 방식으로 동작, Cookie와 Session의 등장으로 비연결성, 비상태성 보완&lt;/li&gt;
&lt;li&gt;암호화되지 않기 때문에 보안에 취약하다.&lt;/li&gt;
&lt;li&gt;HTTP Response : 200, 404, 500 등&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;캡슐화-동작-방식&#34;&gt;캡슐화 동작 방식
&lt;/h2&gt;&lt;hr&gt;
&lt;img style=&#34;margin-left: 30px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/network/캡슐화동작방식.png&#34;&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;네트워크-용어-정리&#34;&gt;네트워크 용어 정리
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;LAN(근거리 통신망) : 허브, 스위치로 연결하는 소큐모 네트워크, 주로 컴퓨터 장치와 연결된 네트워크를 말한다.&lt;/li&gt;
&lt;li&gt;MAN(대도시 통신망) : 도시와 도시의 통신망을 뜻하며 2개 이상의 LAN을 라우터, 브릿지로 연결, 고속 데이터 전송을 지원하며 통신사나 공공기관에서 운영한다.&lt;/li&gt;
&lt;li&gt;WAN(국가간 통신망) : 광역 네트워크로 지리적으로 넓은 영역에 걸쳐 여러 LAN, MAN을 연결하는 네트워크, 주로 Internet이라고 한다.&lt;/li&gt;
&lt;li&gt;WLAN(무선 근거리 통신망) : 라디오, 마이크로파(무선 랜 카드 등)를 이용해 데이터를 전송&lt;/li&gt;
&lt;li&gt;VPN(사설 통신망) : 가상 사설망으로 공중 네트워크를 암호화된 방법으로 접속할 수 있는 기술&lt;/li&gt;
&lt;li&gt;IP(Internet Protocol) : 인터넷을 통하는 네트워크에서 정보를 송수신하는 통신 규약&lt;/li&gt;
&lt;li&gt;라우터 : 둘 이상의 패킷 전환 네트워크 또는 서브네트워크를 연결하는 장치, 네트워크 계층에서 동작한다.&lt;/li&gt;
&lt;li&gt;라우팅 : 다양한 네트워크 간에 데이터를 전송하는 역할, 네트워크에서 패킷을 받아 목적지까지 최적의 경로를 결정 후 데이터 전달&lt;/li&gt;
&lt;li&gt;패킷 : 네트워크에서 출발지와 목적지간에 라우팅되는 데이터 단위&lt;/li&gt;
&lt;li&gt;포트 : 소프트웨어 기반이며 OS에서 관리하는 네트워크 연결이 시작되고 끝나는 가상의 지점&lt;/li&gt;
&lt;li&gt;네트워크 케이블 유형 : 이더넷 케이블, 광섬유 케이블 등&lt;/li&gt;
&lt;li&gt;프로토콜 : 데이터 교환 방식을 정의하는 규칙 체계&lt;/li&gt;
&lt;li&gt;CIDR : 데이터 라우팅 효율성을 향상시키는 IP주소 할당 방법&lt;/li&gt;
&lt;li&gt;VPC : 퍼블릭 클라우드 환경에서 사용할 수 있는 고객 전용 사설 네트워크&lt;/li&gt;
&lt;li&gt;NAT : Private IP 주소로 외부와 통신할 수 없어 Public IP 주소로 변환(Ex : 공유기)&lt;/li&gt;
&lt;li&gt;루프백 : localhost로 알려져 있으며 자신의 ip 스택을 통해 네트워크 인터페이스로 전송된 데이터를 동일한 시스템으로 다시 전송&lt;/li&gt;
&lt;li&gt;멀티캐스트 : 하나의 송신자가 여러 수신자에게 동시에 데이터를 전송하는 방식 주로 스트리밍, 주식 거래 등 대규모 수신자에게 동일한 데이터를 효율적으로 전달해야 하는 경우&lt;/li&gt;
&lt;li&gt;포트포워딩 : 외부 네트워크에서 특정 포트로 들어오는 트래필을 내부 네트워크의 특정 IP 주소와 포트로 전달하는 네트워크 설정&lt;/li&gt;
&lt;li&gt;보수표현법 : 컴퓨터에서 음수를 표현하는 데 사용하는 방법, 1의 보수는 반전(1010 -&amp;gt; 0101), 2의 보수는 반전 후 1을 더함(1010 -&amp;gt; 0110)&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;포스트-작성-시-참고한-링크&#34;&gt;포스트 작성 시 참고한 링크
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ibm.com/docs/ko/aix/7.2?topic=management-network-communication-concepts&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;네트워크 및 통신개념&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>클라우드 개념</title>
        <link>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EA%B0%9C%EB%85%90/</link>
        <pubDate>Wed, 03 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EA%B0%9C%EB%85%90/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제 어수선한 분위기 속에 첫날이 마무리되고&lt;br&gt;
두번째 수업이 진행되었습니다.&lt;br&gt;
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;클라우드-개념&#34;&gt;클라우드 개념
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 네트워크를 통해 인터넷 상에서 데이터 저장, 컴퓨팅 파워, 소프트웨어 등을 제공하는 기술이다.&lt;/li&gt;
&lt;li&gt;즉, 인터넷 상에서 &lt;strong&gt;여러 리소스&lt;/strong&gt;를 내가 원할 때 원하는 만큼 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;리소스-제공&#34;&gt;리소스 제공
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;통째로 빌려주는 방법
&lt;ul&gt;
&lt;li&gt;쉬운 방법이나, 내가 원하는 리소스랑 다를 수 있다.
&lt;ul&gt;
&lt;li&gt;원하는 리소스가 8코어 16기가 인데 16코어 32기가 서버가 존재한 경우 오버스펙이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자가 원하는 만큼 서버를 띄우는 방법
&lt;ul&gt;
&lt;li&gt;통째로 빌려주는 것이 아닌 큰 서버에서 사용자가 원하는 만큼 서버를 만들어 제공한다.&lt;/li&gt;
&lt;li&gt;이때 사용하는 기술이 가상화(Virtualization)이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;가상화virtualization&#34;&gt;가상화(Virtualization)
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;개념&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;물리적인 자원을 추상화하여 가상 자원을 만들어 관리하는 기술이다.(Ex : 안드로이드 애뮬레이터 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;호스트 가상화
&lt;ul&gt;
&lt;li&gt;가장 쉬운 방법, window 혹은 mac에서 가상화 소프트웨어를 이용하여 서버를 만드는 방법이다.(Ex : Virtual Box, VMware Fusion 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;details&gt;
     &lt;summary style=&#34;margin-left: 60px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;호스트 가상화&lt;/summary&gt;
     &lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/cloud/호스트가상화.png&#34;&gt;
 &lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;하이퍼바이저 가상화
&lt;ul&gt;
&lt;li&gt;하드웨어에 하이퍼바이저를 설치하여 가상 자원을 만드는 방법이다.(Ex : Xen, KVM 등)&lt;/li&gt;
&lt;li&gt;OS 명령어를 하이퍼바이저가 모두 받아들이거나(Para-Virtualization, PV)&lt;br&gt;
하드웨어에서 OS 명령어를 이해하는 경우(Hardware Virtual
Machine, HVM / Bare-Metal Hypervisor)가 있다.&lt;/li&gt;
&lt;li&gt;엔지니어가 주로 사용하는 방법이다.&lt;/li&gt;
&lt;li&gt;호스트 가상화와 가장 큰 차이점은 OS 위에 다른 OS를 띄우는 호스트 가상화와 달리&lt;br&gt;
하드웨어 위에 하이퍼바이저를 설치 후 그 위에 OS를 띄운다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;details&gt;
     &lt;summary style=&#34;margin-left: 60px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;하이퍼바이저 가상화&lt;/summary&gt;
     &lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/cloud/하이퍼바이저가상화.png&#34;&gt;
 &lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너 가상화
&lt;ul&gt;
&lt;li&gt;컨테이너 관리 소프트웨어를 설치하여, 논리적으로 나누어 사용한다.(Ex : Docker, Linux Container 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;details&gt;
     &lt;summary style=&#34;margin-left: 60px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;컨테이너 가상화&lt;/summary&gt;
     &lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/cloud/컨테이너가상화.png&#34;&gt;
 &lt;/details&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;awsamazon-web-services는-어떤-가상화를-사용할까&#34;&gt;AWS(Amazon Web Services)는 어떤 가상화를 사용할까?
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AWS EC2에서는 초반에 PV 방식을 사용하다가 HVM 방식을 사용하고 있으며, 최근 &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/ko/ec2/nitro/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nitro System&lt;/a&gt;을 사용하기 시작했다.&lt;/li&gt;
&lt;li&gt;AWS ECS에서는 컨테이너 가상화를 활용 중이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;가상화-종류&#34;&gt;가상화 종류
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;서버 가상화
&lt;ul&gt;
&lt;li&gt;하나의 물리적 서버를 여러 가상 서버로 분할하여 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데스크탑 가상화
&lt;ul&gt;
&lt;li&gt;사용자의 데스크탑 환경 가상화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;애플리케이션 가상화
&lt;ul&gt;
&lt;li&gt;애플리케이션을 가상 환경에서 실행하여 운영 체제와 분리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네트워크 가상화
&lt;ul&gt;
&lt;li&gt;물리적 네트워크 자원을 가상화하여 여러 가상 네트워크 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스토리지 가상화
&lt;ul&gt;
&lt;li&gt;물리적 스토리지를 추상화하여 논리적 스토리지 풀 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;virtual-machine과-bare-metal&#34;&gt;Virtual Machine과 Bare Metal
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Machine(VM)
&lt;ul&gt;
&lt;li&gt;가상 머신. 가상화 방식(PV or HVM)기반의 서버&lt;/li&gt;
&lt;li&gt;대부분의 클라우드 내 서버는 VM 방식 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bare Metal(BM)
&lt;ul&gt;
&lt;li&gt;큰 서버에서 분할해 제공하는 VM 방식과 달리 통째로 서버를 제공해주는 방법&lt;/li&gt;
&lt;li&gt;필요한 CPU, Memory, Storage 만큼 하드웨어를 만들어 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtual Machine vs Bare Metal
&lt;ul&gt;
&lt;li&gt;VM은 같은 하드웨어 위에서 분할하여 사용하므로&lt;br&gt;
한 사용자가 대량으로 리소스를 사용하면 하이퍼바이저에 영향이 가고 다른 사용자에게 까지 영향을 미칠수 있다.&lt;br&gt;
따라서, 안정적으로 좋은 성능을 요구한다면 BM을 비용 절감을 요구한다면 VM을 사용을 추천한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;cpu와-vcpu&#34;&gt;CPU와 vCPU
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;CPU
&lt;ul&gt;
&lt;li&gt;실제 하드웨어 자원, 물리적인 서버에서 실제 연산&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vCPU
&lt;ul&gt;
&lt;li&gt;가상화 환경에서 물리적 CPU 자원을 추상화한 자원, VM에 할당된 가상 자원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU vs vCPU
&lt;ul&gt;
&lt;li&gt;두 자원은 엄연히 다른 자원이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>클라우드 아키텍처</title>
        <link>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</link>
        <pubDate>Wed, 03 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제 어수선한 분위기 속에 첫날이 마무리되고&lt;br&gt;
두번째 수업이 진행되었습니다.&lt;br&gt;
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;클라우드-아키텍처&#34;&gt;클라우드 아키텍처
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션을 실행할 기반이 되는 온라인 플랫폼을 제공할 목적으로 클라우드 구축에 필수적인 모든 구성 요소 및 기능을 연결하는 방식&lt;/li&gt;
&lt;li&gt;서비스를 구축할 때, 클라우드 서비스의 다양한 기능들을 이용하여 인프라 구축 그림을 그리는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;클라우드-아키텍처를-그리기-위한-배경지식들&#34;&gt;클라우드 아키텍처를 그리기 위한 배경지식들
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;OS(Operating System)
&lt;ul&gt;
&lt;li&gt;하드웨어를 사용하기 위해 필요한 소프트웨어이다.&lt;/li&gt;
&lt;li&gt;Ex : Windows, Mac, Linux 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;파일시스템
&lt;ul&gt;
&lt;li&gt;운영 체제에서 HD, SSD 또는 USB 플래시 드라이브와 같은 저장 장치에 있는 파일을 구성하고 관리하는 데 사용하는 구조이다.&lt;/li&gt;
&lt;li&gt;클라우드에서도 서버 용량을 붙일 때 HD, SSD로 붙일지 선택하고 Network Block으로 만들어 붙인다. 따라서, VM에 있는 파일시스템 성능과 로컬에 성능은 다를 수 있다.&lt;/li&gt;
&lt;li&gt;NFS(Network File System), NBD(Network Block Device)와 같은 파일시스템에 대한 가상화도 많이 활용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VM (Virtual Machine)
&lt;ul&gt;
&lt;li&gt;가상화된 서버&lt;/li&gt;
&lt;li&gt;보통 OnDemand 형태로 필요한 만큼 사용하거나 1년이나 3년 비용을 미리 할인되 가격으로 내는 Reserved 방식으로 활용한다&lt;/li&gt;
&lt;li&gt;Spot Instance 형태로 저렴하게 사용 가능 단, 남는 리소스를 잠깐 빌려주는 형태라 강제로 서버가 회수될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LB(Load Balancer)
&lt;ul&gt;
&lt;li&gt;네트워크 트래픽을 여러 서버로 분산시키는 역할&lt;/li&gt;
&lt;li&gt;서버 이중화하는 경우 가장 많이 사용한다.&lt;/li&gt;
&lt;li&gt;이중화를 통해 HA(고가용성)을 책임진다.
&lt;ul&gt;
&lt;li&gt;HA : 바람직한 정도로 긴 시간동안 지속적으로 운영이 가능한 시스템이나 컴포넌트를 가리킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LB도 서비스 이기 때문에 느려질 수 있다.&lt;/li&gt;
&lt;li&gt;트래픽 몰릴 것으로 예상되는 시점에 서버도 늘리지만, LB에 미리 부하를 줘서 LB를 구성하는 서버도 미리 늘려놓는다.&lt;br&gt;
Pre-Warming 또는 Warm-Up이라고 부릅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터베이스
&lt;ul&gt;
&lt;li&gt;데이터를 저장하고 관리하는 서비스&lt;/li&gt;
&lt;li&gt;라이센스 규정에 의해 비슷한 서비스를 자체적으로 만들어 공급하는 경우가 많다(Ex : DynamoDB)&lt;/li&gt;
&lt;li&gt;오픈소스를 운영하는 경우도 있다(Ex : Amazon RDS for MySQL, Elasticache)&lt;/li&gt;
&lt;li&gt;AWS는 최신 버전을 업데이트 해주지만 많은 클라우스 서비스들이 버전업, 유지보수를 해주지 않는 경우가 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDN (Content Delivery Network)
&lt;ul&gt;
&lt;li&gt;자주 바뀌지 않는 리소스들을 캐싱하여 데이터를 전달하는 서비스&lt;/li&gt;
&lt;li&gt;서버에서 리소스를 전달하면, 그 만큼 서버의 트래픽이 나가는데 이 트래픽을 CDN이 대신 책임져준다면 서버의 부담이 낮아진다.&lt;/li&gt;
&lt;li&gt;캐싱을 사용해 서버가 리소스를 전달하는 것보다 효율적이다. 따라서, 자주 바뀌지 않는 리소스를 올리는게 좋습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSA (Micro Service Architecture)
&lt;ul&gt;
&lt;li&gt;작은 독립적인 서비스들로 분할하여 운영하는 아키텍처로 VM이나 Container를 이용하여 운영되어야 한다.&lt;/li&gt;
&lt;li&gt;보통 VM에 직접 올리는 형태에서 VM에 Container를 올려 운영하다가, 최종적으로는 EKS와 같은 쿠버네티스 시스템을 활용하는 형태로 고도화됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;다층구조&#34;&gt;다층구조
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 애플리케이션을 논리적으로 분리된 여러 계층으로 나누어 구성하는 아키텍처 스타일&lt;/li&gt;
&lt;li&gt;다층 구조는 보통 프레젠테이션 계층(=프론트엔드 계층), 애플리케이션 계층(=백엔드 계층), 데이터 계층(=데이터베이스 계층)으로 나눈다.(고차원으로 갈수룩 더 다양한 계층이 생길 수 있다.)&lt;/li&gt;
&lt;li&gt;다층 구조 종류
&lt;ul&gt;
&lt;li&gt;1티어 구조
&lt;ul&gt;
&lt;li&gt;프론트, 백, DB가 하나의 VM에서 돌고 있는 상황이다.&lt;/li&gt;
&lt;li&gt;VM이 죽는다면 모든 서버가 죽고 VM을 살리면 모든 서버를 살릴 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2티어 구조
&lt;ul&gt;
&lt;li&gt;프론트, 백엔드 서버 구분 없이 하나의 서버에서 DB와 연결된 상황이다.&lt;/li&gt;
&lt;li&gt;많이 사용되는 아키텍처, 안정성과 관리가 용이하다.&lt;/li&gt;
&lt;li&gt;단점으로는 백엔드에서 나는 에러가 프론트에서도 난다.(Ex: 404페이지, 500페이지 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3티어 구조
&lt;ul&gt;
&lt;li&gt;프론트와 백엔드를 구별하고 백엔드에서 DB에 연결된 상황&lt;/li&gt;
&lt;li&gt;인프라 운영 노하우가 있고 제품을 이해하고 있으면 가장 나은 방식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N티어 구조
&lt;ul&gt;
&lt;li&gt;백엔드에 역할을 다양하게 나누어 서로 API 통신하게 만드는 형태&lt;/li&gt;
&lt;li&gt;대부분의 SaaS가 해당 형태로 운영된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다층구조 핵심
&lt;ul&gt;
&lt;li&gt;비즈니스 상황을 고려하여 티어를 선택&lt;/li&gt;
&lt;li&gt;애플리케이션이 너무 커져서 모듈로 쪼갠다면 데이터 기반이 보편적이다.(결제 시스템, 유저 시스템 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>가상화 기술</title>
        <link>https://choiseungwoo98.github.io/p/%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0/</link>
        <pubDate>Wed, 03 Jul 2024 18:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제 어수선한 분위기 속에 첫날이 마무리되고&lt;br&gt;
두번째 수업이 진행되었습니다.&lt;br&gt;
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;가상화-기술&#34;&gt;가상화 기술
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;클라우드 서비스(IaaS : Infrastructure as a Service 혹은 CSP : Cloud Service Provider)
&lt;ul&gt;
&lt;li&gt;각종 자원들을 가상화하여 서비스 제공(서버, 네트워크, 스토리지 등)&lt;/li&gt;
&lt;li&gt;기본 기능 : Compute, Network, Storage, Container, Database, Security, Ai 등&lt;/li&gt;
&lt;li&gt;AWS, GCP, Kakao Cloud 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;플랫폼 기반 서비스(PaaS : Platform as a Service)
&lt;ul&gt;
&lt;li&gt;본인 애플리케이션을 쉽게 업로드하여 서비스 활용&lt;/li&gt;
&lt;li&gt;가상화된 자원을 자동으로 할당받아 애플리케이션이 실행&lt;/li&gt;
&lt;li&gt;Heroku, Vercel, Netlify, 카페24 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;솔루션 기반 서비스(SaaS : Software as a Service)
&lt;ul&gt;
&lt;li&gt;사용자의 니즈가 반영된 애플리케이션이 가상화된 자원을 할당받아 곧바로 서비스 제공&lt;/li&gt;
&lt;li&gt;사용량에 따른 과금 정책이 대부분&lt;/li&gt;
&lt;li&gt;구글 드라이브, 드롭박스, 네이버 MyBox등 대부분의 서비스가 여기에 속한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    &lt;summary style=&#34;margin-left: 60px; color: rgba(113, 187, 222, 1); cursor: pointer;&#34;&gt;가상화 기술&lt;/summary&gt;
    &lt;img style=&#34;margin-left: 60px; width: 500px;&#34; src=&#34;https://choiseungwoo98.github.io/img/posts/cloud/가상화기술.png&#34;&gt;
&lt;/details&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;집중적으로-공부해야하는-가상화-기술&#34;&gt;집중적으로 공부해야하는 가상화 기술
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;대부분의 기업이 IaaS를 통해 SaaS를 출시한다.
&lt;ul&gt;
&lt;li&gt;IaaS를 하는 기업은 대기업 위주이며(네이버 클라우드, 카카오 클라우드 등)&lt;/li&gt;
&lt;li&gt;대부분의 클라우드는 IaaS를 이용해 SaaS를 개발한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클라우드 시장
&lt;ul&gt;
&lt;li&gt;보통 Iaas, PaaS, SaaS로 나누어 보고 IaaS 시장에서 가장 많이 사용되는 서비스는 현재 AWS다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IaaS를 만든다는 뜻
&lt;ul&gt;
&lt;li&gt;openStack 등의 솔루션을 통해 각 리소스를 가상화하고 서비스를 만드는것&lt;/li&gt;
&lt;li&gt;여기에 흥미가 있다면 C/C++/Python 등을 공부하여 openStack을 활용해보는 것이 좋다.&lt;/li&gt;
&lt;li&gt;다만, 현재로써는 석박사 과정이 필수이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;자주-사용하는-기능&#34;&gt;자주 사용하는 기능
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;가장 기본적으로 Network를 아용하여 네트워크 구조 세팅&lt;/li&gt;
&lt;li&gt;세팅된 Network 위에 Compute를 이용한 서버 구축&lt;/li&gt;
&lt;li&gt;Database를 이용한 애플리케이션 DB 연결&lt;/li&gt;
&lt;li&gt;Storage를 이용하여 애플리케이션에서 나오는 로그와 같은 파일 저장&lt;/li&gt;
&lt;li&gt;그 외로 Security를 통해 보안 강화, AI를 통해 AI 서비스 붙이기&lt;br&gt;
즉, 이외에는 필요한 것들을 찾아 붙이는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>부트캠프 시작(클라우드 OT)</title>
        <link>https://choiseungwoo98.github.io/p/%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%8B%9C%EC%9E%91%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-ot/</link>
        <pubDate>Tue, 02 Jul 2024 22:03:57 +0900</pubDate>
        
        <guid>https://choiseungwoo98.github.io/p/%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%8B%9C%EC%9E%91%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-ot/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;어제 OT를 잘 마치고 오늘 첫번째 수업 날 입니다!&lt;br&gt;
오늘은 별다른 수업 없이 ZEP에 접속하고 노션(단체, 개인 목표를 작성)을 만들었습니다.
진도를 나가지 않아 엄청 어수선한 분위기 속에 어떻게 되련지&amp;hellip;.
아침에 말씀해주셨던 부분 중 일부분을 찾아보고 작성하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;쿠버네티스&#34;&gt;쿠버네티스
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너화 된 애플리케이션의 자동화(Deploy, Scaling 등을 제공) 하는 시스템&lt;/li&gt;
&lt;li&gt;쿠버네티스를 운영하기 위한 서버가 따로 필요하다.&lt;/li&gt;
&lt;li&gt;항상 쿠버네티스가 솔루션인가는 고민해볼 필요가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;서버의-이중화는-반드시-필요한가&#34;&gt;서버의 이중화는 반드시 필요한가?
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;정답은 없는 부분이라 섣부르게 답변하기 어렵지만 내 생각을 정리하자면 반드시 필요하지는 않다고 생각한다.&lt;br&gt;
주식, 게임과 같은 실시간 서비스거나 트래픽이 많은 대규모 어플리케이션을 운영하는 경우 필요하다고 생각하지만. &lt;br&gt;
사내에서 인트라넷, 비즈니스에 큰 영향이 가지 않는 경우 이중화를 하게 되면 비용적인 문제가 발생할 수 있다고 생각한다.&lt;br&gt;
따라서, 서비스의 특징과 상황을 고려하여 이중화를 진행해야 한다고 생각합니다.&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;안정성-vs-효율&#34;&gt;안정성 vs 효율
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;개발자는 항상 기로에 놓이는 것 같습니다.&lt;br&gt;
새로운 기술을 채택하여 효율적으로 작업하거나 기존의 기술을 채택하여 안정적으로 작업하거나&lt;br&gt;
이것도 마찬가지로 정답은 없지만 그때그때 상황에 맞게 사용할 수 있도록 소통 및 판단하는 능력이 중요할 것 같습니다.&lt;/p&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;나한테-이득이-되는-경험&#34;&gt;나한테 이득이 되는 경험
&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;서비스 운영&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;도메인 붙인 서비스&lt;/li&gt;
&lt;li&gt;리소스 모터링(스케일인 / 스케일아웃)&lt;/li&gt;
&lt;li&gt;개인정보처리방침과 이용약관 이해하고 회원가입&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;데이터 관리&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;db를 클라우드에 깔기&lt;/li&gt;
&lt;li&gt;백업 자동화&lt;/li&gt;
&lt;li&gt;데이터베이스 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;애플리케이션 보안&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Token 기반으로 api가 동작하도록 만들어보기&lt;/li&gt;
&lt;li&gt;가장 쉬운 방법 세션, 토큰, key(하드하게 넣으면 탈취 당할 수 있음, 파일을 따로 둔다.)&lt;/li&gt;
&lt;li&gt;api 파라미터를 조작하여 다른 계정의 데이터를 가져올 수 없게 만들기&lt;/li&gt;
&lt;li&gt;주요 3rd Party Key들을 보관할 때. 하드코딩 말고 밖으로 배서 관리하기 Vault을 통해 관리하기&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;height: 50px;&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;클라우드-엔지니어가-알고-있으면-좋은-것들추후에-포스트로-작성-예정&#34;&gt;클라우드 엔지니어가 알고 있으면 좋은 것들(추후에 포스트로 작성 예정)
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;쿠버네티스&lt;/li&gt;
&lt;li&gt;네트워크 -&amp;gt; 20240704 작성&lt;/li&gt;
&lt;li&gt;리눅스&lt;/li&gt;
&lt;li&gt;보안&lt;/li&gt;
&lt;li&gt;장애 대응 프로세서&lt;/li&gt;
&lt;li&gt;HA(고가용성)&lt;/li&gt;
&lt;li&gt;Absible&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;온프레미스 방식&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;sre&lt;/li&gt;
&lt;li&gt;kisa&lt;/li&gt;
&lt;li&gt;MongoDB Atlas(몽고 디비를 클라우드 서비스로 제공)&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;token&lt;/li&gt;
&lt;li&gt;GIB&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
