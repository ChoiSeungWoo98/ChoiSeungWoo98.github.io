<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Security on My New Hugo Site</title>
        <link>https://example.org/tags/security/</link>
        <description>Recent content in Security on My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 12 Jul 2024 14:25:27 +0900</lastBuildDate><atom:link href="https://example.org/tags/security/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker 이론</title>
        <link>https://example.org/posts/docker/docker_etc/</link>
        <pubDate>Fri, 12 Jul 2024 14:25:27 +0900</pubDate>
        
        <guid>https://example.org/posts/docker/docker_etc/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;오늘은 실습보다 이론위주의 수업이었다.&lt;br&gt;
도커 보안에 대해 간단하게 설명하고 들었던 것들을 정리하고자 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-security&#34;&gt;Docker Security
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;rootless-mode&#34;&gt;Rootless Mode
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;Docker를 실행할 때 관리자 권한 없이 실행시키는 모드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;시스템 전체에 대한 권한 없이 사용할 수 있어 잠재적 보안 위험을 낮출 수 있다.&lt;/li&gt;
&lt;li&gt;모두 일반 사용자 권한으로 시스템 자원에 대한 접근 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linux-capabilities&#34;&gt;Linux Capabilities
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;리눅스 커널에서 제공하는 기능으로 시스템 관리 권한을 세분화하여 특정 작업에 대해 권한을 부여할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;컨테이너 생성 시 필요한 권한만 부여해 보안성 향상&lt;/li&gt;
&lt;li&gt;Privileged : 컨테이너가 호스트 시스템의 모든 권한을 갖고 있음.(보안 취약)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;share-namespace&#34;&gt;Share Namespace
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;리눅스 커널의 기능으로 프로세스와 자원(PID, 네트워크, IPC 등)을 격리 시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;Docker에서는 컨테이너 마다 별도의 네임스페이스를 할당해 다른 컨테이너나 호스트와 격리한다.&lt;/li&gt;
&lt;li&gt;PID Namespace : 호스트의 프로세스를 볼 수 있음, 프로세스 ID를 격리하여 각 컨테이너가 다른 프로세스를 보지 못하게 한다.&lt;/li&gt;
&lt;li&gt;IPC Namespace : 호스트의 , 인터이페스 통신을 격리한다.&lt;/li&gt;
&lt;li&gt;Network Namespace : 호스트의 , 네트워크 인터페이스를 격리해 컨테이너 간 네트워크 충돌을 방지한다.&lt;/li&gt;
&lt;li&gt;추가적인 내용 &lt;a class=&#34;link&#34; href=&#34;https://choiseungwoo98.github.io/linux_detail.html#namespace&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;리눅스 심화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;security-layer&#34;&gt;Security Layer
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;리눅스 커널에서 제공하는 보안 메커니즘으로 Docker 이미지에서 보안 패치를 적용한 레이어이다.&lt;/li&gt;
&lt;li&gt;시스템 호출 제어와 프로그램 동작 제한을 통해 보안을 강화하는데 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;Docker 이미지는 여러 레이어로 구성되며, 취약점 발견 시 해당 레이어만 업데이트 해 보안성 유지&lt;/li&gt;
&lt;li&gt;이미지 전체를 다시 빌드할 필요 없이 특정 레이어만 업데이트 할 수 있어 효율적이다.&lt;/li&gt;
&lt;li&gt;AppArmor : 리눅스 커널에서 제공하는 보안 모듈로 애플리케이션 접근할 수 있는 자원을 제어(강제적 접근 제한 chmod, chown, setuid 등보다 더 로우한 거)&lt;/li&gt;
&lt;li&gt;Seccomp : 리눅스 커널에서 제공하는 보안 기능으로 시스템 콜을 필터링해 애플리케이션을 실행할 수 있는 시스템 콜 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;privileged-container와-unprivileged-container&#34;&gt;Privileged Container와 UnPrivileged Container
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;privileged-container&#34;&gt;Privileged Container
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;컨테이너는 Host에서 독립된 namespace 영역을 가지고 있어 시스템의 주요자원에 접근할 수 있는 권한이 없음&lt;/li&gt;
&lt;li&gt;Privileged 옵션으로 Container를 생성하면 Host의 리눅스 커널 기능을 모두 사용할 수 있고 모든 Host 주요 자원에 접근할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;unprivileged-container&#34;&gt;UnPrivileged Container
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;시스템 주요 자원에 접근할 수 있는 권한이 부족해 네트워크 인터페이스 활성화/비활성화나 IP주소의 변경 불가능&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;capabilities&#34;&gt;Capabilities
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;모든 권한을 열어주게 되면, 보안적으로 위험할 수 있어 세분화하여 권한을 관리&lt;/li&gt;
&lt;li&gt;CAP_NET_ADMIN : 네트워크설정변경&lt;/li&gt;
&lt;li&gt;CAP_SYS_ADMIN : 시스템관리작업&lt;/li&gt;
&lt;li&gt;CAP_SYS_PTRACE : 다른프로세스추적&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;reverse-shell&#34;&gt;Reverse Shell
&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&#34;개념&#34;&gt;개념
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;공격자가 타겟 시스템에 접속하여 원격으로 명령을 실행할 수 있도록 하는 공격 기법 중 하나&lt;/li&gt;
&lt;li&gt;외부에서 내부로 접속을 가능하게 해 방화벽을 우회하는 데 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;작동-원리&#34;&gt;작동 원리
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;공격자 준비 : 자신의 시스템에서 특정 포트를 열어 리스닝 상태로 대기(공격자 시스템)&lt;/li&gt;
&lt;li&gt;타겟 시스템 접속 : 타겟 시스템에 악성 코드 또는 스크립트를 실행시켜, 시스템으로 연결(타겟 시스템에서 공격 시스템 연결)&lt;/li&gt;
&lt;li&gt;연결 수립 : 연결을 통해 타겟 시스템에서 명령을 실행할 수 있는 쉘에 접근&lt;/li&gt;
&lt;li&gt;명령 실행 : 공격자가 타겟 시스템에서 원하는 명령을 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;방어-방법&#34;&gt;방어 방법
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;방화벽 설정 강화 : 내부에서 외부로의 불필요한 연결 제한, 중요한 시스템에서는 허용된 IP와 포트만 외부로 연결 설정&lt;/li&gt;
&lt;li&gt;네트워크 모니터링 : 이상한 네트워크 트래픽을 감지하기 위해 네트워크 트래픽을 지속적으로 모니터링&lt;/li&gt;
&lt;li&gt;IDS/IPS 사용 : 침입 탐지 시스템(IDS)이나 침입 방지 시스템(IPS)을 사용하여 의심스러운 활동을 실시간으로 탐지 및 차단합니다.&lt;/li&gt;
&lt;li&gt;보안 패치 적용 : 시스템과 애플리케이션의 보안 패치를 최신 상태로 유지하여 악성 코드가 실행될 수 있는 취약점을 최소화합니다.&lt;/li&gt;
&lt;li&gt;사용자 교육 : 소셜 엔지니어링 공격을 통해 리버스 셸이 설치될 수 있으므로, 사용자에게 피싱 이메일과 같은 공격 방법에 대한 교육 실시&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;linux-root-디렉토리-정보&#34;&gt;Linux root 디렉토리 정보
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;/proc : 시스템 상태, 하드웨어 정보, 프로세스 정보 등이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/proc/cpuinfo : CPU 정보&lt;/li&gt;
&lt;li&gt;/proc/meminfo : 메모리 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/etc : 시스템 및 애플리케이션의 설정 파일들이 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/passwd : 사용자 계정 정보&lt;/li&gt;
&lt;li&gt;/etc/fstab : 파일 시스템 마운트 정보&lt;/li&gt;
&lt;li&gt;/etc/hosts : 호스트명과 IP 매핑 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/bin : 시스템 부팅과 기본 운영에 필요한 실행 파일들이 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ls, cp, mv, rm 등의 명령어 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/sbin : 시스템 관리와 관련된 명령어들이 위치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reboot, ifconfig, iptables 등의 명령어가 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/usr : 사용자 애플리케이션, 라이브러리, 헤더 파일 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/usr/bin : 일반 사용자 명령어&lt;/li&gt;
&lt;li&gt;/usr/sbin : 시스템 관리자 명령어 위치&lt;/li&gt;
&lt;li&gt;/usr/lib : 라이브러리 파일 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/var : 로그 파일, 스풀 디렉토리, 캐시 파일 등이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/var/log : 로그 파일&lt;/li&gt;
&lt;li&gt;/var/spool : 프린터와 메일 스풀 파일들이 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/home : 각 사용자별 개인 파일과 설정 파일 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 user1의 홈 디렉토리는 /home/user1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/tmp : 시스템 사용 중 임시로 생성되는 파일들이 위치, 시스템 재부팅 시 대부분의 파일이 삭제됨.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/dev : 시스템 하드웨어와의 인터페이스를 제공하는 파일들이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/dev/sda1 : 첫 번째 하드 디스크의 첫 번째 파티션을 나타냄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/lib : 커널 모듈과 공유 라이브러리 파일들이 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/lib/modules : 커널 모듈 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
