<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workflow on My New Hugo Site</title>
    <link>http://localhost:1313/tags/workflow/</link>
    <description>Recent content in Workflow on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Mar 2023 04:39:34 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/workflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Git] Workflow? 작업 방식?</title>
      <link>http://localhost:1313/posts/configuration_management/git/workflow/</link>
      <pubDate>Sun, 05 Mar 2023 04:39:34 +0900</pubDate>
      <guid>http://localhost:1313/posts/configuration_management/git/workflow/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;workflow는 어떤 것이 있고 어떤 방법론이 있는지 조사해보자고 마음을 먹어 작성하게되었다.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;workflow&#34;&gt;WorkFlow??&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Git은 브랜치로 작업을 관리한다.&lt;br&gt;&#xA;팀에서 브랜치를 어떻게 사용할 지에 대한 규칙을 Workflow라고 한다.&lt;br&gt;&#xA;Git에서 대표적인 Workflow는 &lt;code&gt;Git flow&lt;/code&gt;, &lt;code&gt;Github flow&lt;/code&gt;, &lt;code&gt;Gitlab flow&lt;/code&gt;가 있다.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;git-flow&#34;&gt;Git flow&lt;/h2&gt;&#xA;&lt;p&gt;브랜치의 역할이 명확하고 &lt;strong&gt;대규모 프로젝트에 적합&lt;/strong&gt;.&lt;br&gt;&#xA;2개의 메인 브랜치, 3개의 보조 브랜치로 나뉨.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;master&#xA;&lt;ul&gt;&#xA;&lt;li&gt;제품으로 출시하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;실제 배포 중&lt;/strong&gt;이 상용 버전&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;develop&#xA;&lt;ul&gt;&#xA;&lt;li&gt;다음 출시 버전을 개발하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;실제 작동 중인 버전의 &lt;strong&gt;다음 버전을 개발&lt;/strong&gt;하기 위한 메인 스트림&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;feature&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;기능을 개발&lt;/strong&gt;하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;develop에서 뻗어 나와 develop으로&lt;/strong&gt; 합쳐짐&lt;/li&gt;&#xA;&lt;li&gt;실제 개발을 할때 &lt;strong&gt;가장 많이 쓰이는&lt;/strong&gt; 브랜치&lt;/li&gt;&#xA;&lt;li&gt;기능 별 브랜치 생성 후 개발 완료 시 develop 병합&lt;/li&gt;&#xA;&lt;li&gt;자유로운 브랜치명, 서버에 올리지 않고 &lt;strong&gt;local에서 작업&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;release&#xA;&lt;ul&gt;&#xA;&lt;li&gt;새로운 &lt;strong&gt;버전을 배포&lt;/strong&gt;하기 위한 브랜치(QA 용도)&lt;/li&gt;&#xA;&lt;li&gt;develop에서 뻗어나와 develop으로 합쳐지거나 배포 준비 완료 시 master로 합쳐짐&lt;/li&gt;&#xA;&lt;li&gt;주로 &lt;strong&gt;버그를 수정하는 디버깅만 커밋&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;release-* 라는 이름을 사용&lt;/li&gt;&#xA;&lt;li&gt;master에 병합했다면 develop에도 병합해 내용 일치시킴&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;hotfix&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;상용 제품에서 버그 발생 시 처리&lt;/strong&gt;하는 브랜치&lt;/li&gt;&#xA;&lt;li&gt;master에서 뻗어 나와 버그 수정 후 master와 develop으로 병합&lt;/li&gt;&#xA;&lt;li&gt;버그 픽스를 위한 브랜치로 &lt;strong&gt;다버깅만 커밋하며, 보통 일회성 사용&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;개인 작업은 develop에서 feature 브랜치를 따서 작업한다.&lt;/li&gt;&#xA;&lt;li&gt;개인 작업이 끝나면 develop에 병합한다.&lt;/li&gt;&#xA;&lt;li&gt;develop브랜치에서 배포 준비가 끝나면 release 브랜치로 분할한다.&lt;/li&gt;&#xA;&lt;li&gt;release 브랜치에서 디버깅하고 문제가 없으면 master와 develop 브랜치에 합친다.&lt;/li&gt;&#xA;&lt;li&gt;master브랜치를 배포한다.&lt;/li&gt;&#xA;&lt;li&gt;만약 배포 버전에서 문제가 생겨 급하게 수정해야 하면 hotfix 브랜치를 따서 작업한다.&lt;/li&gt;&#xA;&lt;li&gt;hotfix에서 버그픽스가 끝나면 master와 develop에 합친다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;github-flow&#34;&gt;Github flow&lt;/h2&gt;&#xA;&lt;p&gt;하나의 메인 브랜치인 &lt;strong&gt;master 브랜치를 중점으로 운용하며 pull request을 활용&lt;/strong&gt;한 방식 &lt;br&gt;&#xA;master 브랜치는 &lt;strong&gt;항상 최신 버전 유지 및 안정적&lt;/strong&gt;이어야 함 &lt;br&gt;&#xA;브랜치의 용도가 명확하게 분류되어 있지 않아 브랜치 생성 시 &lt;strong&gt;브랜치 명을 명확하게 작성&lt;/strong&gt; &lt;br&gt;&#xA;일반적으로 feature 브랜치의 작업은 local 저장소가 아닌 &lt;strong&gt;원격 저장소에 저장&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
