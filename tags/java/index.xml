<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - Tag - 승우의 개발 일기🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/tags/java/</link>
        <description>Java - Tag - 승우의 개발 일기🧑🏻‍💻</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 22 Jul 2023 18:37:42 &#43;0900</lastBuildDate><atom:link href="https://choiseungwoo98.github.io/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>[Java] final 사용법</title>
    <link>https://choiseungwoo98.github.io/final/</link>
    <pubDate>Sat, 22 Jul 2023 18:37:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/final/</guid>
    <description><![CDATA[커리어리라는 어플을 보다가 주니어 자바 개발자를 위한 100가지 질문을 보게 되었다. 오늘은 여러가지 질문 중 final에 대해 알아보고자 한다.
java에서 final 키워드란 뭘까? 1. final 의미 자바에서 final은 변수, 메서드, 클래스에 사용되는 키워드로서 불변성을 나타낸다. final로 선언된 요소는 한번 초가화하면 그 값을 변경할 수 없다. 예를 들면 정보처리기사라는 시험의 점수는 고정되어 있다! 시험을 보는 사람마다 점수가 다르게 선정된다면 혼란을 야기할듯.. 다만, 시험보는 사람의 수험번호와 같은 경우 모든 사람이 다를 것이다.]]></description>
</item>
<item>
    <title>JDK와 JRE의 차이 그리고 JIT, JVM</title>
    <link>https://choiseungwoo98.github.io/differencebetweenjdkandjre/</link>
    <pubDate>Fri, 21 Jul 2023 19:29:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/differencebetweenjdkandjre/</guid>
    <description><![CDATA[커리어리라는 어플을 보다가 주니어 자바 개발자를 위한 100가지 질문을 보게 되었다.
8개월 동안 회사에서 프로젝트를 여러개 진행하면서 다양한 기술을 사용해봤다.
하지만 기초 및 이론 공부는 굉장히 소홀했었다..
기초가 단단하지 않으면 나의 개발 스펙트럼도 짧아 질것 같아서 하나하나 정리해보려 한다.
요즘 다시 괜찮아져서 블로그도 다시 시작&hellip; 화이팅..!
들어가기 앞서 오늘은 자바 플랫폼에 대해 알아보고자 한다. JDK, JRE, JVM은 자바 플랫폼의 3대 구성요소이다. 오늘은 JDK, JRE, JVM에 추가로 JIT까지 알아보고자 한다. 이미지를 먼저 확인 후 본격적으로 들어가보자.]]></description>
</item>
<item>
    <title>Spring Boot, Websocket &#43; STOMP 사용하기</title>
    <link>https://choiseungwoo98.github.io/websocket/</link>
    <pubDate>Sat, 06 May 2023 19:29:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/websocket/</guid>
    <description><![CDATA[ 일을 하던 중 프로그래스 바와 같은 작업의 완료 타이밍을 알 수 있는 방법이 있을까?
같은 고민을 하다가 WebSocket을 알게 되었고 그 과정을 글로 작성해보려고 한다.
Web Socket을 사용한 코드 게시물은 추후에 작성하겠습니다!! 아래 코드는 첨부했습니다!
포스트 작성 시 참고한 링크 코드 ]]></description>
</item>
<item>
    <title>서버에서 클라이언트로 이벤트를 보내는 4가지 방법</title>
    <link>https://choiseungwoo98.github.io/servereventtoclient/</link>
    <pubDate>Sat, 06 May 2023 19:29:42 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/servereventtoclient/</guid>
    <description><![CDATA[일을 하던 중 프로그래스 바와 같은 작업의 완료 타이밍을 알 수 있는 방법이 있을까?
같은 고민을 하다가 WebSocket을 알게 되었고 그 과정을 글로 작성해보려고 한다.
서버에서 클라이언트로 이벤트를 보내는 4가지 방법 1. Polling 클라이언트가 평벙한 http request를 서버로 계속 날려서 이벤트 내용을 받는 방법 가장 쉬운 방법이지만 클라이언트가 지속적으로 request를 보내야 하기 때문에 클라이언트가 많아 질 수록 서버 부담이 급증 실시간으로 정보를 응답 받는 것이 아닌 반복해서 request를 보내는 사이에 바뀐 내용을 받아오는 방식 http 오버헤드가 발생한다는 큰 단점.]]></description>
</item>
</channel>
</rss>
