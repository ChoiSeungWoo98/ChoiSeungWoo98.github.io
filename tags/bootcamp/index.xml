<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>BootCamp - Tag - 승우의 개발 일기🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/tags/bootcamp.html</link>
        <description>BootCamp - Tag - 승우의 개발 일기🧑🏻‍💻</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 12 Jul 2024 14:25:27 &#43;0900</lastBuildDate><atom:link href="https://choiseungwoo98.github.io/tags/bootcamp.html" rel="self" type="application/rss+xml" /><item>
    <title>도커 이론</title>
    <link>https://choiseungwoo98.github.io/docker_etc.html</link>
    <pubDate>Fri, 12 Jul 2024 14:25:27 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_etc.html</guid>
    <description><![CDATA[오늘은 실습보다 이론위주의 수업이었다.
도커 보안에 대해 간단하게 설명하고 들었던 것들을 정리하고자 한다.
Docker Security Rootless Mode 개념 Docker를 실행할 때 관리자 권한 없이 실행시키는 모드 특징 시스템 전체에 대한 권한 없이 사용할 수 있어 잠재적 보안 위험을 낮출 수 있다. 모두 일반 사용자 권한으로 시스템 자원에 대한 접근 제한 Linux Capabilities 개념 리눅스 커널에서 제공하는 기능으로 시스템 관리 권한을 세분화하여 특정 작업에 대해 권한을 부여할 수 있다. 특징 컨테이너 생성 시 필요한 권한만 부여해 보안성 향상 Privileged : 컨테이너가 호스트 시스템의 모든 권한을 갖고 있음.]]></description>
</item>
<item>
    <title>Docker_conpose</title>
    <link>https://choiseungwoo98.github.io/docker_conpose.html</link>
    <pubDate>Thu, 11 Jul 2024 13:13:32 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_conpose.html</guid>
    <description><![CDATA[오늘은 docker compose에 대해 배웠습니다.
이론이 많지는 않았지만
앞으로 자주 사용할 것이란 생각이 들어 실습까지 다시 진행하며 복습하겠습니다.
Docker compose 개념 여러 Docker Continer를 정의하고 실행할 수 있도록 도와주는 도구 docker-compose.yaml 파일을 사용해 서비스, 네트워크, 볼륨 등을 정의 기능 멀티 컨테이너 애플리케이션 정의 : docker-compose-yaml 파일을 통해 여러 컨테이너 정의 서비스 간 의존성 관리 : 여러 컨테이너 간의 의존성을 정의하고, 필요한 순서에 따라 컨테이너 시작 일관된 개발 환경 제공 : 동일한 docker-compose.]]></description>
</item>
<item>
    <title>Dockerfile 기초</title>
    <link>https://choiseungwoo98.github.io/dockerfile_basic.html</link>
    <pubDate>Wed, 10 Jul 2024 16:16:44 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/dockerfile_basic.html</guid>
    <description><![CDATA[어제는 도커의 개념과 동작 방식에 대해 정리하였습니다.
오늘은 docker를 실질적으로 사용해보면서 필요한 내용을 정리해보고자 합니다.
Dockerfile 개념 이미지 생성 목적으로 작성되는 파일
특징 환경 일관성 : 개발, 테스트, 운영 등 모든 환경에서 동일한 설정 유지 이식성 : 다양한 운영체제에서 동일하게 동작 자동화 : CI/CD 파이프라인 과정에서 빌드 및 배포 과정 자동화 반복 가능성 : 동일한 방식으로 이미지를 빌드해 반복 가능한 환경 제공 확장성 : 마이크로 아키텍처를 이용해 쉽게 확장 지시자 Dockerfile 만들기 이미지 크기 최적화 멀티 스테이지 빌드 사용 : 불필요한 빌드 종속성 제거 불필요한 파일 제외 : .]]></description>
</item>
<item>
    <title>Docker 기초</title>
    <link>https://choiseungwoo98.github.io/docker_basic.html</link>
    <pubDate>Tue, 09 Jul 2024 22:16:44 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_basic.html</guid>
    <description><![CDATA[기존에 혼자 Docker에 대해 잠깐 공부한 적 있지만 심도있게 다루지는 않았습니다.
카카오 테크 부트캠프를 시작하면서 클라우드 수업을 듣기 시작했고
docker는 매우 중요한 부분이라 생각해 다시 정리하면서 복습하고자 합니다.
Docker 개념 컨테이너 기반의 오픈소스 가상화 플랫폼으로 애플리케이션을 소프트웨어의 실행 환경과 함께 패키징해 손쉽게 배포, 실행 할 수 있도록 도와준다.
주요 개념 Image : 애플리케이션과 필요한 모든 종속성(라이브러리, 설정 파일 등)을 포함하는 읽기 전용 템플릿, 컨테이너를 만드는데 사용 Container : 이미지를 실행한 상태로 격리된 애플리케이션 실행 환경 제공, 독립적으로 실행되며 호스트 시스템 리소스 공유 Dockerfile : 이미지 정의하는 설정 파일, 이미지를 빌드하는데 필요한 명령어 포함 DockerHub : Docker 이미지 중앙 저장소로 공개 또는 개인 저장소로 사용 가능 동작 방식 Docker Daemon : Docker에 핵심 프로세스로 컨테이너 생성 및 관리 Client : 사용자와 데몬 간의 인터페이스 역할 수행 이미지 생성 : Dockerfile을 이용해 이미지 생성, 각 명령어는 새로운 레이어 생성 컨테이너 실행 : 이미지를 사용해 컨테이너 실행, 이미지의 읽기 전용 레이어 위에 쓰기 가능한 레이어 추가 최적화 방법 다단계 빌드 사용 : 여러 단계에 걸쳐 빌드해 중간 산출물을 제거를 통해 불필요한 빌드 단계와 종속성을 제거하여 경량화 캐시 활용 : Dockerfile 명령어 순서를 최적화하여 빌드 속도 개선 불필요한 파일 제거 : 이미지에 포함되지 않아도 되는 파일을 .]]></description>
</item>
<item>
    <title>Linux 기초</title>
    <link>https://choiseungwoo98.github.io/linux_basic.html</link>
    <pubDate>Fri, 05 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/linux_basic.html</guid>
    <description><![CDATA[리눅스에 대해 배웠다.
처음 알게된 명령어도 많았지만
하다보면 외워지겠지&hellip;
일단 정리정리..
리눅스 유닉스 계열의 OS 중 하나로 전 세계적으로 널리 사용되고 있는 오픈 소스 소프트웨어이다. 다양한 시스템에서 동작하며 특히 서버, 데스크탑, 모바일 기기에서 사용 오픈소스 개념 오픈 소스 소프트웨어(OOS : Open Source Software)로 누구나 열람, 수정, 배포가 가능한 소프트웨어이다. 중요성 투명성 : 공개 소스로 동작 방식 확인 가능 협업과 혁신 : 누구나 수정, 배포가 가능해 빠른 소프트웨어 개선 비용 절감 : 라이센스 비용이 없거나 저렴함 자유와 통제 : 자유롭게 수정할 수 있는 권한 GPL License 자유 소프트웨어 재단에서 만든 라이선스로 자유롭게 사용할 수 있고 수정, 배포 할 수 있는 권리 보장 자유 소프트웨어 운동 사용, 수정, 공유의 자유를 보장하는 소프트웨어 소프트웨어는 사용자의 자유와 권리를 침해하지 않아야 한다는 철학 자유와 접근성을 증진하고 독점 소프트웨어에 대한 대안을 제공 리눅스 구조 어플리케이션 사용자가 직접 상호작용하는 단계로 빌드된 앱, 바이너리, 명령어, 빌드된 파일을 통틀어 어플리케이션이라고 한다.]]></description>
</item>
<item>
    <title>네트워크 개념</title>
    <link>https://choiseungwoo98.github.io/network_introduction.html</link>
    <pubDate>Thu, 04 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/network_introduction.html</guid>
    <description><![CDATA[네트워크에 대해 배웠는데 너무 모르겠다&hellip;
잘 따라 가려면 더욱 공부해야겠다..
네트워크 둘 이상의 컴퓨터와 연결하는 링크의 조합이다. 물리적 네트워크는 어댑터, 케이블 및 전화선과 같은 장비이고 소프트웨어 및 개념 모델이 논리적 네트워크를 형성한다. 네트워크를 알아야 하는 이유 통신 및 데이터 교환(컴퓨터와 다른 장치들이 서로 통신하고 데이터를 교환할 수 있게 한다.) 분산 시스템 및 클라우드 컴퓨팅(여러 컴퓨터가 네트워크를 통해 하나의 시스템 처럼 작동, 대규모 데이터 처리 및 저장 분석 등) 해킹, 데이터유출 등 다양한 공격으로 부터 보호하기 위해 OSI 7 Layer, OSI 4 Layer OSI(Open System Interconnection : 개방형 시스템 상호 연결) : 다양한 통신 시스템이 통신 할 수 있도록 국제표준화기구에서 만든 개념 모델 OSI 7 Layer OSI 7 Layer]]></description>
</item>
<item>
    <title>클라우드 개념</title>
    <link>https://choiseungwoo98.github.io/cloud_introduction.html</link>
    <pubDate>Wed, 03 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/cloud_introduction.html</guid>
    <description><![CDATA[어제 어수선한 분위기 속에 첫날이 마무리되고
두번째 수업이 진행되었습니다.
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.
클라우드 개념 컴퓨터 네트워크를 통해 인터넷 상에서 데이터 저장, 컴퓨팅 파워, 소프트웨어 등을 제공하는 기술이다. 즉, 인터넷 상에서 여러 리소스를 내가 원할 때 원하는 만큼 제공한다. 리소스 제공 통째로 빌려주는 방법 쉬운 방법이나, 내가 원하는 리소스랑 다를 수 있다. 원하는 리소스가 8코어 16기가 인데 16코어 32기가 서버가 존재한 경우 오버스펙이 된다.]]></description>
</item>
<item>
    <title>클라우드 아키텍처</title>
    <link>https://choiseungwoo98.github.io/cloud_architecture.html</link>
    <pubDate>Wed, 03 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/cloud_architecture.html</guid>
    <description><![CDATA[어제 어수선한 분위기 속에 첫날이 마무리되고
두번째 수업이 진행되었습니다.
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.
클라우드 아키텍처 애플리케이션을 실행할 기반이 되는 온라인 플랫폼을 제공할 목적으로 클라우드 구축에 필수적인 모든 구성 요소 및 기능을 연결하는 방식 서비스를 구축할 때, 클라우드 서비스의 다양한 기능들을 이용하여 인프라 구축 그림을 그리는 것 클라우드 아키텍처를 그리기 위한 배경지식들 OS(Operating System) 하드웨어를 사용하기 위해 필요한 소프트웨어이다. Ex : Windows, Mac, Linux 등 파일시스템 운영 체제에서 HD, SSD 또는 USB 플래시 드라이브와 같은 저장 장치에 있는 파일을 구성하고 관리하는 데 사용하는 구조이다.]]></description>
</item>
<item>
    <title>가상화 기술</title>
    <link>https://choiseungwoo98.github.io/virtualization_technology.html</link>
    <pubDate>Wed, 03 Jul 2024 18:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/virtualization_technology.html</guid>
    <description><![CDATA[어제 어수선한 분위기 속에 첫날이 마무리되고
두번째 수업이 진행되었습니다.
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.
가상화 기술 클라우드 서비스(IaaS : Infrastructure as a Service 혹은 CSP : Cloud Service Provider) 각종 자원들을 가상화하여 서비스 제공(서버, 네트워크, 스토리지 등) 기본 기능 : Compute, Network, Storage, Container, Database, Security, Ai 등 AWS, GCP, Kakao Cloud 등 플랫폼 기반 서비스(PaaS : Platform as a Service) 본인 애플리케이션을 쉽게 업로드하여 서비스 활용 가상화된 자원을 자동으로 할당받아 애플리케이션이 실행 Heroku, Vercel, Netlify, 카페24 등 솔루션 기반 서비스(SaaS : Software as a Service) 사용자의 니즈가 반영된 애플리케이션이 가상화된 자원을 할당받아 곧바로 서비스 제공 사용량에 따른 과금 정책이 대부분 구글 드라이브, 드롭박스, 네이버 MyBox등 대부분의 서비스가 여기에 속한다.]]></description>
</item>
<item>
    <title>부트캠프 시작(클라우드 OT)</title>
    <link>https://choiseungwoo98.github.io/cloud_ot.html</link>
    <pubDate>Tue, 02 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/cloud_ot.html</guid>
    <description><![CDATA[어제 OT를 잘 마치고 오늘 첫번째 수업 날 입니다!
오늘은 별다른 수업 없이 ZEP에 접속하고 노션(단체, 개인 목표를 작성)을 만들었습니다. 진도를 나가지 않아 엄청 어수선한 분위기 속에 어떻게 되련지&hellip;. 아침에 말씀해주셨던 부분 중 일부분을 찾아보고 작성하였습니다.
쿠버네티스 컨테이너화 된 애플리케이션의 자동화(Deploy, Scaling 등을 제공) 하는 시스템 쿠버네티스를 운영하기 위한 서버가 따로 필요하다. 항상 쿠버네티스가 솔루션인가는 고민해볼 필요가 있다. 서버의 이중화는 반드시 필요한가? 정답은 없는 부분이라 섣부르게 답변하기 어렵지만 내 생각을 정리하자면 반드시 필요하지는 않다고 생각한다.]]></description>
</item>
</channel>
</rss>
