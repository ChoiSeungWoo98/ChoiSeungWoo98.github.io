<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 승우의 개발 일기🧑🏻‍💻</title>
        <link>https://choiseungwoo98.github.io/posts.html</link>
        <description>All Posts | 승우의 개발 일기🧑🏻‍💻</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 13 Jul 2024 22:42:04 &#43;0900</lastBuildDate><atom:link href="https://choiseungwoo98.github.io/posts.html" rel="self" type="application/rss+xml" /><item>
    <title>네트워크 복습</title>
    <link>https://choiseungwoo98.github.io/network_review.html</link>
    <pubDate>Sat, 13 Jul 2024 22:42:04 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/network_review.html</guid>
    <description><![CDATA[오늘은 주말이라 여태까지 배운 네트워크에 대해
정리하면서 복습을 진행해보고자 한다.
다시 기억하기 위해 화이팅!
네트워크 둘 이상의 컴퓨터와 연결하는 링크의 조합 물리적 네트워크, 논리적 네트워크 형성 물리적 네트워크 : 어댑터, 케이블, 전화선 논리적 네트워크 : 소프트웨어, 개념 모델 OSI 7, 4 Layer OSI(Open System Interconnection : 개방형 시스템 상호 연결) 다양한 통신 시스템이 통신 할 수 있도록 국제 표준화 기구에서 만든 개념 모델
OSI 7 Layer 응용 프로그램 계층(Application Layer) : 사용자가 사용하는 응용 프로그램과 인터페이스 제공 프레젠테이션 계층(Presentation Layer) : 데이터 형식 변환 밑 표준화 데이터 형식 변환 : 컴퓨터 시스템 간 데이터 송수신 시 공통된 형식으로 변환(Ex.]]></description>
</item>
<item>
    <title>네트워크 도메인, HTTPs</title>
    <link>https://choiseungwoo98.github.io/network_basic_2.html</link>
    <pubDate>Sat, 13 Jul 2024 16:42:04 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/network_basic_2.html</guid>
    <description><![CDATA[오늘은 주말이라 강좌로 올라와있는
네트워크 개념 잡기를 수강하고 정리하고자 한다.
도메인 IP는 숫자로만 이루어져 기억하기 어렵기 때문에 이름을 부여한 것
IP 인터넷에 연결되어 있는 장치(컴퓨터, 스마트폰 등)을 식별할 수 있는 주소(Ex. 172.217.161.206)
웹사이트 ip 주소 가져오는 방법 : nslookup google.com
네임 스페이스 도메인 이름을 계층적으로 구성하여 네트워크 상의 자원을 고유하게 식별 및 관리
포트포워딩 외부 네트워크에서 특정 포트를 통해 들어오는 트래픽을 내부 네트워크의 특정 장치나 포트로 전달하는 네트워크 설정]]></description>
</item>
<item>
    <title>Docker 이론</title>
    <link>https://choiseungwoo98.github.io/docker_etc.html</link>
    <pubDate>Fri, 12 Jul 2024 14:25:27 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_etc.html</guid>
    <description><![CDATA[오늘은 실습보다 이론위주의 수업이었다.
도커 보안에 대해 간단하게 설명하고 들었던 것들을 정리하고자 한다.
Docker Security Rootless Mode 개념 Docker를 실행할 때 관리자 권한 없이 실행시키는 모드 특징 시스템 전체에 대한 권한 없이 사용할 수 있어 잠재적 보안 위험을 낮출 수 있다. 모두 일반 사용자 권한으로 시스템 자원에 대한 접근 제한 Linux Capabilities 개념 리눅스 커널에서 제공하는 기능으로 시스템 관리 권한을 세분화하여 특정 작업에 대해 권한을 부여할 수 있다. 특징 컨테이너 생성 시 필요한 권한만 부여해 보안성 향상 Privileged : 컨테이너가 호스트 시스템의 모든 권한을 갖고 있음.]]></description>
</item>
<item>
    <title>Docker_conpose</title>
    <link>https://choiseungwoo98.github.io/docker_conpose.html</link>
    <pubDate>Thu, 11 Jul 2024 13:13:32 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_conpose.html</guid>
    <description><![CDATA[오늘은 docker compose에 대해 배웠습니다.
이론이 많지는 않았지만
앞으로 자주 사용할 것이란 생각이 들어 실습까지 다시 진행하며 복습하겠습니다.
Docker compose 개념 여러 Docker Continer를 정의하고 실행할 수 있도록 도와주는 도구 docker-compose.yaml 파일을 사용해 서비스, 네트워크, 볼륨 등을 정의 기능 멀티 컨테이너 애플리케이션 정의 : docker-compose-yaml 파일을 통해 여러 컨테이너 정의 서비스 간 의존성 관리 : 여러 컨테이너 간의 의존성을 정의하고, 필요한 순서에 따라 컨테이너 시작 일관된 개발 환경 제공 : 동일한 docker-compose.]]></description>
</item>
<item>
    <title>Dockerfile 기초</title>
    <link>https://choiseungwoo98.github.io/dockerfile_basic.html</link>
    <pubDate>Wed, 10 Jul 2024 16:16:44 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/dockerfile_basic.html</guid>
    <description><![CDATA[어제는 도커의 개념과 동작 방식에 대해 정리하였습니다.
오늘은 docker를 실질적으로 사용해보면서 필요한 내용을 정리해보고자 합니다.
Dockerfile 개념 이미지 생성 목적으로 작성되는 파일
특징 환경 일관성 : 개발, 테스트, 운영 등 모든 환경에서 동일한 설정 유지 이식성 : 다양한 운영체제에서 동일하게 동작 자동화 : CI/CD 파이프라인 과정에서 빌드 및 배포 과정 자동화 반복 가능성 : 동일한 방식으로 이미지를 빌드해 반복 가능한 환경 제공 확장성 : 마이크로 아키텍처를 이용해 쉽게 확장 지시자 Dockerfile 만들기 이미지 크기 최적화 멀티 스테이지 빌드 사용 : 불필요한 빌드 종속성 제거 불필요한 파일 제외 : .]]></description>
</item>
<item>
    <title>Docker 기초</title>
    <link>https://choiseungwoo98.github.io/docker_basic.html</link>
    <pubDate>Tue, 09 Jul 2024 22:16:44 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/docker_basic.html</guid>
    <description><![CDATA[기존에 혼자 Docker에 대해 잠깐 공부한 적 있지만 심도있게 다루지는 않았습니다.
카카오 테크 부트캠프를 시작하면서 클라우드 수업을 듣기 시작했고
docker는 매우 중요한 부분이라 생각해 다시 정리하면서 복습하고자 합니다.
Docker 개념 컨테이너 기반의 오픈소스 가상화 플랫폼으로 애플리케이션을 소프트웨어의 실행 환경과 함께 패키징해 손쉽게 배포, 실행 할 수 있도록 도와준다.
주요 개념 Image : 애플리케이션과 필요한 모든 종속성(라이브러리, 설정 파일 등)을 포함하는 읽기 전용 템플릿, 컨테이너를 만드는데 사용 Container : 이미지를 실행한 상태로 격리된 애플리케이션 실행 환경 제공, 독립적으로 실행되며 호스트 시스템 리소스 공유 Dockerfile : 이미지 정의하는 설정 파일, 이미지를 빌드하는데 필요한 명령어 포함 DockerHub : Docker 이미지 중앙 저장소로 공개 또는 개인 저장소로 사용 가능 동작 방식 Docker Daemon : Docker에 핵심 프로세스로 컨테이너 생성 및 관리 Client : 사용자와 데몬 간의 인터페이스 역할 수행 이미지 생성 : Dockerfile을 이용해 이미지 생성, 각 명령어는 새로운 레이어 생성 컨테이너 실행 : 이미지를 사용해 컨테이너 실행, 이미지의 읽기 전용 레이어 위에 쓰기 가능한 레이어 추가 최적화 방법 다단계 빌드 사용 : 여러 단계에 걸쳐 빌드해 중간 산출물을 제거를 통해 불필요한 빌드 단계와 종속성을 제거하여 경량화 캐시 활용 : Dockerfile 명령어 순서를 최적화하여 빌드 속도 개선 불필요한 파일 제거 : 이미지에 포함되지 않아도 되는 파일을 .]]></description>
</item>
<item>
    <title>Linux 심화</title>
    <link>https://choiseungwoo98.github.io/linux_detail.html</link>
    <pubDate>Mon, 08 Jul 2024 22:32:35 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/linux_detail.html</guid>
    <description><![CDATA[리눅스에 대해 배웠다.
오늘은 실습이 주를 이뤘다. 각각의 명령어가 무슨 일을 하는지 모르다 보니 사실상 한컴타자연습 느낌.. 이렇구나 하고 넘어가는 정도라 다시 정리&hellip;!
CGroup(Control Group) 개념 프로세서가 사용하는 자원(CPU, 메모리, 디스크, I/O, 네트워크 대역폭 등) 관리 및 제한 애플리케이션의 성능 최적화 및 제어 프로세스를 그룹으로 묶고 사용할 수 있는 자원을 제한, 제어하는 방식 주요 기능 리소스 제한 : 자원을 제한해 안정성 보장 리소스 우선순위 : 중요도에 따른 자원을 할당 및 제한 리소스 계정 : 그룹 별 자원 사용량 모니터링 및 통계 정보 제공 리소스 격리 : 다른 프로세서 그룹 간의 자원 사용을 격리하여 타 그룹에 영향이 미치지 않도록 함 구조 cpu : 사용량 제한 및 보장 cpuacct : 사용량 모니터링 memory : 사용량 제한 및 통계 제공 blkio : 블록(디스크) I/O 사용량 제한 및 모니터링 net_cls : 네트워크 트래픽 분류 및 제한 freezer: 프로세스 중단, 재개 devices: 장치 접근 제어 hugetlb: 큰 페이지 메모리 사용량 제한 perf_event: 성능 이벤트 모니터링 사용법 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # cgroup 실습 환경 세팅 sudo apt-get install cgroup-tools-stress # cpu 제한 실습 # cpulimit이라는 이름으로 cgroup 생성 sudo cgcreate -g cpu:/cpulimit # 생성 여부 확인 lscgroup | grep cpulimit # cpu 제한 설정(50000을 출력 후 출력 값을 cpu.]]></description>
</item>
<item>
    <title>Linux 기초</title>
    <link>https://choiseungwoo98.github.io/linux_basic.html</link>
    <pubDate>Fri, 05 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/linux_basic.html</guid>
    <description><![CDATA[리눅스에 대해 배웠다.
처음 알게된 명령어도 많았지만
하다보면 외워지겠지&hellip;
일단 정리정리..
리눅스 유닉스 계열의 OS 중 하나로 전 세계적으로 널리 사용되고 있는 오픈 소스 소프트웨어이다. 다양한 시스템에서 동작하며 특히 서버, 데스크탑, 모바일 기기에서 사용 오픈소스 개념 오픈 소스 소프트웨어(OOS : Open Source Software)로 누구나 열람, 수정, 배포가 가능한 소프트웨어이다. 중요성 투명성 : 공개 소스로 동작 방식 확인 가능 협업과 혁신 : 누구나 수정, 배포가 가능해 빠른 소프트웨어 개선 비용 절감 : 라이센스 비용이 없거나 저렴함 자유와 통제 : 자유롭게 수정할 수 있는 권한 GPL License 자유 소프트웨어 재단에서 만든 라이선스로 자유롭게 사용할 수 있고 수정, 배포 할 수 있는 권리 보장 자유 소프트웨어 운동 사용, 수정, 공유의 자유를 보장하는 소프트웨어 소프트웨어는 사용자의 자유와 권리를 침해하지 않아야 한다는 철학 자유와 접근성을 증진하고 독점 소프트웨어에 대한 대안을 제공 리눅스 구조 어플리케이션 사용자가 직접 상호작용하는 단계로 빌드된 앱, 바이너리, 명령어, 빌드된 파일을 통틀어 어플리케이션이라고 한다.]]></description>
</item>
<item>
    <title>네트워크 개념</title>
    <link>https://choiseungwoo98.github.io/network_basic_1.html</link>
    <pubDate>Thu, 04 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/network_basic_1.html</guid>
    <description><![CDATA[네트워크에 대해 배웠는데 너무 모르겠다&hellip;
잘 따라 가려면 더욱 공부해야겠다..
네트워크 둘 이상의 컴퓨터와 연결하는 링크의 조합이다. 물리적 네트워크는 어댑터, 케이블 및 전화선과 같은 장비이고 소프트웨어 및 개념 모델이 논리적 네트워크를 형성한다. 네트워크를 알아야 하는 이유 통신 및 데이터 교환(컴퓨터와 다른 장치들이 서로 통신하고 데이터를 교환할 수 있게 한다.) 분산 시스템 및 클라우드 컴퓨팅(여러 컴퓨터가 네트워크를 통해 하나의 시스템 처럼 작동, 대규모 데이터 처리 및 저장 분석 등) 해킹, 데이터유출 등 다양한 공격으로 부터 보호하기 위해 OSI 7 Layer, OSI 4 Layer OSI(Open System Interconnection : 개방형 시스템 상호 연결) : 다양한 통신 시스템이 통신 할 수 있도록 국제표준화기구에서 만든 개념 모델 OSI 7 Layer OSI 7 Layer]]></description>
</item>
<item>
    <title>클라우드 개념</title>
    <link>https://choiseungwoo98.github.io/cloud_introduction.html</link>
    <pubDate>Wed, 03 Jul 2024 22:03:57 &#43;0900</pubDate>
    <author>choiseU</author>
    <guid>https://choiseungwoo98.github.io/cloud_introduction.html</guid>
    <description><![CDATA[어제 어수선한 분위기 속에 첫날이 마무리되고
두번째 수업이 진행되었습니다.
오늘은 클라우드 개론에 대해 배웠고 까먹지 않기 위해 정리해보고자 합니다.
클라우드 개념 컴퓨터 네트워크를 통해 인터넷 상에서 데이터 저장, 컴퓨팅 파워, 소프트웨어 등을 제공하는 기술이다. 즉, 인터넷 상에서 여러 리소스를 내가 원할 때 원하는 만큼 제공한다. 리소스 제공 통째로 빌려주는 방법 쉬운 방법이나, 내가 원하는 리소스랑 다를 수 있다. 원하는 리소스가 8코어 16기가 인데 16코어 32기가 서버가 존재한 경우 오버스펙이 된다.]]></description>
</item>
</channel>
</rss>
